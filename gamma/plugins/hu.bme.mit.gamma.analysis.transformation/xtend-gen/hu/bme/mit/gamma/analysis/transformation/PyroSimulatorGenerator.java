package hu.bme.mit.gamma.analysis.transformation;

import hu.bme.mit.gamma.analysis.AnalysisComponent;
import hu.bme.mit.gamma.analysis.EndCondition;
import hu.bme.mit.gamma.environment.model.EnvironmentAsynchronousCompositeComponentInstance;
import hu.bme.mit.gamma.environment.model.EnvironmentSynchronousCompositeComponentInstance;
import hu.bme.mit.gamma.expression.util.ExpressionEvaluator;
import hu.bme.mit.gamma.statechart.composite.ComponentInstance;
import java.util.ArrayList;
import java.util.List;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.xbase.lib.CollectionLiterals;
import org.eclipse.xtext.xbase.lib.StringExtensions;

@SuppressWarnings("all")
public class PyroSimulatorGenerator {
  public CharSequence generate(final AnalysisComponent analysis_component, final String packageName) {
    CharSequence _xblockexpression = null;
    {
      EObject _xifexpression = null;
      EnvironmentAsynchronousCompositeComponentInstance _analyzedComponent = analysis_component.getAnalyzedComponent();
      if ((_analyzedComponent instanceof EnvironmentAsynchronousCompositeComponentInstance)) {
        EnvironmentAsynchronousCompositeComponentInstance _analyzedComponent_1 = analysis_component.getAnalyzedComponent();
        _xifexpression = ((EnvironmentAsynchronousCompositeComponentInstance) _analyzedComponent_1).getType();
      } else {
        EnvironmentAsynchronousCompositeComponentInstance _analyzedComponent_2 = analysis_component.getAnalyzedComponent();
        _xifexpression = ((EnvironmentSynchronousCompositeComponentInstance) _analyzedComponent_2).getType();
      }
      EObject component = ((EObject)_xifexpression);
      ArrayList<ComponentInstance> stack = CollectionLiterals.<ComponentInstance>newArrayList();
      List<EnvironmentConnections> connections = ElementaryComponentCollector.collect(analysis_component.getAnalyzedComponent(), stack);
      PyroDistGenerator distGenerator = new PyroDistGenerator(packageName);
      PyroComponentClassGenerator compClassGenerator = new PyroComponentClassGenerator(packageName);
      ExpressionEvaluator expEval = ExpressionEvaluator.INSTANCE;
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("import pyro");
      _builder.newLine();
      _builder.append("import torch");
      _builder.newLine();
      _builder.append("from pyro.infer import SVI, Trace_ELBO");
      _builder.newLine();
      _builder.append("from pyro.optim import Adam");
      _builder.newLine();
      _builder.append("import pyro.distributions as dist");
      _builder.newLine();
      _builder.append("import torch.distributions.constraints as constraints");
      _builder.newLine();
      _builder.append("from pyro.distributions.distribution import Distribution");
      _builder.newLine();
      _builder.newLine();
      _builder.append("import math");
      _builder.newLine();
      _builder.append("from math import exp");
      _builder.newLine();
      _builder.append("import numpy as np");
      _builder.newLine();
      _builder.newLine();
      _builder.append("from py4j.java_gateway import JavaGateway, CallbackServerParameters");
      _builder.newLine();
      _builder.append("import matplotlib.pyplot as plt");
      _builder.newLine();
      _builder.append("import matplotlib");
      _builder.newLine();
      _builder.newLine();
      _builder.append("from influxdb import InfluxDBClient");
      _builder.newLine();
      _builder.newLine();
      _builder.append("import pyro.contrib.gp as gp");
      _builder.newLine();
      _builder.newLine();
      _builder.append("import time");
      _builder.newLine();
      _builder.append("import os");
      _builder.newLine();
      _builder.append("import datetime");
      _builder.newLine();
      _builder.append("import traceback");
      _builder.newLine();
      _builder.append("from jpype import JImplements, JOverride");
      _builder.newLine();
      _builder.append("from jpype import *");
      _builder.newLine();
      _builder.append("import jpype");
      _builder.newLine();
      _builder.newLine();
      _builder.append("DEBUG=False");
      _builder.newLine();
      _builder.append("IESC_SYNC=False");
      _builder.newLine();
      _builder.newLine();
      _builder.append("simTime=");
      String _string = Double.toString(analysis_component.getSimulationTime());
      _builder.append(_string);
      _builder.newLineIfNotEmpty();
      _builder.append("simNumber=");
      String _string_1 = analysis_component.getSimulationNumber().toString();
      _builder.append(_string_1);
      _builder.newLineIfNotEmpty();
      _builder.newLine();
      _builder.newLine();
      _builder.newLine();
      _builder.append("#time.sleep(3)");
      _builder.newLine();
      _builder.newLine();
      _builder.append("print(\'initiating Python-Java connection\')");
      _builder.newLine();
      _builder.newLine();
      _builder.append("def create_detmodel():");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("commands = [\"\"\"javac $(find . -name \"*.java\") -cp /usr/share/java/py4j0.10.8.1.jar\"\"\"]");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("for command in commands:");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("if os.system(command) == 0:");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("continue");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("else:");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("print( \"ERROR\")");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("break");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("startJVM(getDefaultJVMPath(), \'-ea\',");
      _builder.newLine();
      _builder.append("             ");
      _builder.append("\'-Djava.class.path=\' + str(os.path.realpath(__file__).replace(str(os.path.basename(__file__)),\"\")) + \'/bin\'");
      _builder.newLine();
      _builder.append("             ");
      _builder.append(")");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("detmodel = 0");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("DetModelEntryPoint = JClass(\'javaenv.DetModelEntryPoint\')");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("detmodel = DetModelEntryPoint()");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("return detmodel");
      _builder.newLine();
      _builder.newLine();
      _builder.append("detmodel=create_detmodel()");
      _builder.newLine();
      _builder.newLine();
      _builder.newLine();
      _builder.append("print(\'Python-Java connection established\')");
      _builder.newLine();
      _builder.newLine();
      CharSequence _generateClasses = distGenerator.generateClasses();
      _builder.append(_generateClasses);
      _builder.newLineIfNotEmpty();
      _builder.newLine();
      CharSequence _generateClasses_1 = compClassGenerator.generateClasses(connections);
      _builder.append(_generateClasses_1);
      _builder.newLineIfNotEmpty();
      _builder.newLine();
      CharSequence _generate = PyroStochasticClassGenerator.generate(analysis_component, packageName);
      _builder.append(_generate);
      _builder.newLineIfNotEmpty();
      _builder.newLine();
      _builder.append("stochmodel=0");
      _builder.newLine();
      _builder.append("try:");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("stochmodel = StochasticEventGenerator(detmodel)");
      _builder.newLine();
      _builder.append("except jpype.JException as ex:");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("print(\"Caught base exception : \", str(ex))");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("print(ex.stacktrace())");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("shutdownJVM()");
      _builder.newLine();
      _builder.append("except Exception as ex:");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("print(\"Caught python exception :\", str(ex))");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("shutdownJVM()");
      _builder.newLine();
      _builder.append("except Exception as err:");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("print(\"Exception occured during testing the simulation: \")");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("print(err)");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("traceback.print_exc()");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("shutdownJVM()");
      _builder.newLine();
      _builder.newLine();
      _builder.append("def state2num(state):");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("if state==\"run\":");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("return 0.0");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("else:");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("return 1.0");
      _builder.newLine();
      _builder.newLine();
      _builder.append("def simulate():");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("if DEBUG:");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("print(\"new sim ---------------------------------\")");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("global stochmodel, detmodel");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("stochmodel.reset()");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("stochmodel.generateEvents()");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("while len(stochmodel.events) > 0 and stochmodel.time < simTime:");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("event = stochmodel.popEvent()");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("stochmodel.time = event.eventTime");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("if DEBUG:");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("print(event.eventSource.name + \' at time: \' + str(stochmodel.time))");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("event.eventCall()");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("detmodel.get");
      String _firstUpper = StringExtensions.toFirstUpper(analysis_component.getAnalyzedComponent().getName());
      _builder.append(_firstUpper, "\t\t");
      _builder.append("().schedule()");
      _builder.newLineIfNotEmpty();
      _builder.append("\t\t");
      _builder.append("# evaluate end condition");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.newLine();
      {
        EList<EndCondition> _endcondition = analysis_component.getEndcondition();
        for(final EndCondition endCondition : _endcondition) {
          _builder.append("\t\t");
          _builder.append("if detmodel.monitorOf");
          String _generateEndConditionName = TransformationUtility.generateEndConditionName(endCondition);
          _builder.append(_generateEndConditionName, "\t\t");
          _builder.append(".state != \"run\":");
          _builder.newLineIfNotEmpty();
          _builder.append("\t\t");
          _builder.append("\t");
          _builder.append("break");
          _builder.newLine();
        }
      }
      _builder.newLine();
      _builder.append("\t");
      _builder.append("# get the aspects and return from the simulations ");
      _builder.newLine();
      _builder.append("\t");
      CharSequence _generateSimulationReturn = TransformationUtility.generateSimulationReturn(analysis_component.getAspect());
      _builder.append(_generateSimulationReturn, "\t");
      _builder.newLineIfNotEmpty();
      _builder.append("\t");
      _builder.newLine();
      _builder.newLine();
      _builder.newLine();
      _builder.newLine();
      _builder.append("if DEBUG:");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("print(\"testing the simulator\")");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("try:");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("for i in range(10):");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("print(simulate())");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("except Exception as err:");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("print(\"Exception occured during testing the simulation: \")");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("print(err)");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("traceback.print_exc()");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("except java.lang.RuntimeException as ex:");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("print(\"Caught runtime exception : \", str(ex))");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("print(ex.stacktrace())");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("except jpype.JException as ex:");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("print(\"Caught base exception : \", str(ex))");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("print(ex.stacktrace())");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("except Exception as ex:");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("print(\"Caught python exception :\", str(ex))");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("except Exception as err:");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("print(\"Exception occured during testing the simulation: \")");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("print(err)");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("traceback.print_exc()");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("finally:");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("shutdownJVM()");
      _builder.newLine();
      _xblockexpression = _builder;
    }
    return _xblockexpression;
  }
}

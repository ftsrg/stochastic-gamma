package hu.bme.mit.gamma.analysis.transformation;

import com.google.common.base.Objects;
import hu.bme.mit.gamma.analysis.AnalysisComponent;
import hu.bme.mit.gamma.statechart.interface_.Event;
import hu.bme.mit.gamma.statechart.interface_.EventDeclaration;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.xbase.lib.StringExtensions;

@SuppressWarnings("all")
public class GeneratePy4JGateway {
  public CharSequence generate(final AnalysisComponent component, final String packageName) {
    CharSequence _xblockexpression = null;
    {
      EObject _eContainer = component.eContainer();
      hu.bme.mit.gamma.statechart.interface_.Package pack = ((hu.bme.mit.gamma.statechart.interface_.Package) _eContainer);
      String compName = StringExtensions.toFirstUpper(component.getAnalyzedComponent().getType().getName());
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("package javaenv;");
      _builder.newLine();
      _builder.newLine();
      _builder.append("import ");
      _builder.append(packageName);
      _builder.append(".");
      String _lowerCase = pack.getName().toLowerCase();
      _builder.append(_lowerCase);
      _builder.append(".");
      _builder.append(compName);
      _builder.append(";");
      _builder.newLineIfNotEmpty();
      _builder.append("import ");
      _builder.append(packageName);
      _builder.append(".interfaces.");
      String _firstUpper = StringExtensions.toFirstUpper(component.getAspect().getEvent().getPort().getInterfaceRealization().getInterface().getName());
      _builder.append(_firstUpper);
      _builder.append("Interface;");
      _builder.newLineIfNotEmpty();
      _builder.append("import py4j.GatewayServer;");
      _builder.newLine();
      _builder.newLine();
      _builder.append("public class AnalyzerGateway{");
      _builder.newLine();
      _builder.append("\t");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("private static DetModelEntryPoint entryPoint;");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("public AnalyzerGateway() {");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("entryPoint=new DetModelEntryPoint();");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("public DetModelEntryPoint getEntryPoint() {");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("return entryPoint;");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("public static void main(String[] args) {");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("GatewayServer gatewayServer=new GatewayServer(new AnalyzerGateway());");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("gatewayServer.start();");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("System.out.println(\"Gateway has started!\");");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("public class DetModelEntryPoint  {");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("private ");
      _builder.append(compName, "\t\t\t");
      _builder.append(" detModel=new ");
      _builder.append(compName, "\t\t\t");
      _builder.append("();");
      _builder.newLineIfNotEmpty();
      _builder.append("\t\t\t");
      _builder.append("private Monitor monitor=new Monitor();");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("public DetModelEntryPoint(){");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("detModel.get");
      String _firstUpper_1 = StringExtensions.toFirstUpper(component.getAspect().getEvent().getPort().getName());
      _builder.append(_firstUpper_1, "\t\t\t\t");
      _builder.append("().registerListener(monitor);");
      _builder.newLineIfNotEmpty();
      _builder.append("\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("public void reset(){");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("monitor.reset();");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("detModel.reset();");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("public String getState(){");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("return monitor.state;");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("public int getFreq(){");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("return monitor.freq;");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("public ");
      _builder.append(compName, "\t\t\t");
      _builder.append(" getDetModel(){");
      _builder.newLineIfNotEmpty();
      _builder.append("\t\t\t\t");
      _builder.append("return detModel;");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("public ");
      _builder.append(compName, "\t\t\t");
      _builder.append(" get");
      String _firstUpper_2 = StringExtensions.toFirstUpper(component.getAnalyzedComponent().getName());
      _builder.append(_firstUpper_2, "\t\t\t");
      _builder.append("(){");
      _builder.newLineIfNotEmpty();
      _builder.append("\t\t\t\t");
      _builder.append("return detModel;");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("}   ");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("private class Monitor implements ");
      String _firstUpper_3 = StringExtensions.toFirstUpper(component.getAspect().getEvent().getPort().getInterfaceRealization().getInterface().getName());
      _builder.append(_firstUpper_3, "\t\t\t");
      _builder.append("Interface.Listener.Provided {");
      _builder.newLineIfNotEmpty();
      _builder.append("\t\t\t\t");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("public String state=\"run\";");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("public int freq=0;");
      _builder.newLine();
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("public void reset(){");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("state=\"run\";");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("freq=0;");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t\t\t");
      _builder.newLine();
      {
        EList<EventDeclaration> _events = component.getAspect().getEvent().getPort().getInterfaceRealization().getInterface().getEvents();
        for(final EventDeclaration event : _events) {
          _builder.append("\t\t\t\t");
          _builder.append("@Override");
          _builder.newLine();
          _builder.append("\t\t\t\t");
          _builder.append("public void raise");
          String _firstUpper_4 = StringExtensions.toFirstUpper(event.getEvent().getName());
          _builder.append(_firstUpper_4, "\t\t\t\t");
          _builder.append("(){");
          _builder.newLineIfNotEmpty();
          {
            Event _event = event.getEvent();
            Event _event_1 = component.getAspect().getEvent().getEvent();
            boolean _equals = Objects.equal(_event, _event_1);
            if (_equals) {
              _builder.append("\t\t\t\t");
              _builder.append("\t");
              _builder.append("state=\"stop\";");
              _builder.newLine();
              _builder.append("\t\t\t\t");
              _builder.append("\t");
              _builder.append("freq++;");
              _builder.newLine();
            }
          }
          _builder.append("\t\t\t\t");
          _builder.append("}");
          _builder.newLine();
          _builder.append("\t\t\t\t");
          _builder.newLine();
        }
      }
      _builder.append("\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.newLine();
      _builder.newLine();
      _xblockexpression = _builder;
    }
    return _xblockexpression;
  }
}

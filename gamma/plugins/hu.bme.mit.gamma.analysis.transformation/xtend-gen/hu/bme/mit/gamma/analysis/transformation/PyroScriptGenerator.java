package hu.bme.mit.gamma.analysis.transformation;

import hu.bme.mit.gamma.analysis.AnalysisComponent;
import hu.bme.mit.gamma.environment.model.EnvironmentAsynchronousCompositeComponentInstance;
import hu.bme.mit.gamma.environment.model.EnvironmentDelay;
import hu.bme.mit.gamma.environment.model.EnvironmentEventSource;
import hu.bme.mit.gamma.environment.model.EnvironmentExternSimulation;
import hu.bme.mit.gamma.environment.model.EnvironmentPeriodicEventSource;
import hu.bme.mit.gamma.environment.model.EnvironmentSample;
import hu.bme.mit.gamma.environment.model.EnvironmentSwitch;
import hu.bme.mit.gamma.environment.model.EnvironmentSynchronousCompositeComponentInstance;
import hu.bme.mit.gamma.expression.model.Expression;
import hu.bme.mit.gamma.expression.util.ExpressionEvaluator;
import hu.bme.mit.gamma.statechart.composite.ComponentInstance;
import hu.bme.mit.gamma.stochastic.stochastic.StochasticExpression;
import java.util.ArrayList;
import java.util.List;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.xbase.lib.CollectionLiterals;
import org.eclipse.xtext.xbase.lib.Functions.Function1;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.eclipse.xtext.xbase.lib.StringExtensions;

@SuppressWarnings("all")
public class PyroScriptGenerator {
  public CharSequence generate(final AnalysisComponent analysis_component, final String packageName) {
    CharSequence _xblockexpression = null;
    {
      EObject _xifexpression = null;
      EnvironmentAsynchronousCompositeComponentInstance _analyzedComponent = analysis_component.getAnalyzedComponent();
      if ((_analyzedComponent instanceof EnvironmentAsynchronousCompositeComponentInstance)) {
        EnvironmentAsynchronousCompositeComponentInstance _analyzedComponent_1 = analysis_component.getAnalyzedComponent();
        _xifexpression = ((EnvironmentAsynchronousCompositeComponentInstance) _analyzedComponent_1).getType();
      } else {
        EnvironmentAsynchronousCompositeComponentInstance _analyzedComponent_2 = analysis_component.getAnalyzedComponent();
        _xifexpression = ((EnvironmentSynchronousCompositeComponentInstance) _analyzedComponent_2).getType();
      }
      EObject component = ((EObject)_xifexpression);
      ArrayList<ComponentInstance> stack = CollectionLiterals.<ComponentInstance>newArrayList();
      List<EnvironmentConnections> connections = ElementaryComponentCollector.collect(analysis_component.getAnalyzedComponent(), stack);
      PythonClassGenerator generator = new PythonClassGenerator(packageName);
      ExpressionEvaluator expEval = ExpressionEvaluator.INSTANCE;
      StringConcatenation _builder = new StringConcatenation();
      _builder.newLine();
      _builder.append("import pyro");
      _builder.newLine();
      _builder.append("import torch");
      _builder.newLine();
      _builder.append("from pyro.infer import SVI, Trace_ELBO");
      _builder.newLine();
      _builder.append("from pyro.optim import Adam");
      _builder.newLine();
      _builder.append("import pyro.distributions as dist");
      _builder.newLine();
      _builder.append("import torch.distributions.constraints as constraints");
      _builder.newLine();
      _builder.append("from pyro.distributions.distribution import Distribution");
      _builder.newLine();
      _builder.newLine();
      _builder.append("import math");
      _builder.newLine();
      _builder.append("from math import exp");
      _builder.newLine();
      _builder.append("import numpy as np");
      _builder.newLine();
      _builder.newLine();
      _builder.append("from py4j.java_gateway import JavaGateway, CallbackServerParameters");
      _builder.newLine();
      _builder.append("import matplotlib.pyplot as plt");
      _builder.newLine();
      _builder.append("import matplotlib");
      _builder.newLine();
      _builder.newLine();
      _builder.append("from influxdb import InfluxDBClient");
      _builder.newLine();
      _builder.newLine();
      _builder.append("import pyro.contrib.gp as gp");
      _builder.newLine();
      _builder.newLine();
      _builder.append("import time");
      _builder.newLine();
      _builder.append("import os");
      _builder.newLine();
      _builder.append("import datetime");
      _builder.newLine();
      _builder.append("import traceback");
      _builder.newLine();
      _builder.newLine();
      _builder.append("print(\"python script is called\")");
      _builder.newLine();
      _builder.newLine();
      _builder.append("print(\"creating java Py4J gateway\")");
      _builder.newLine();
      _builder.newLine();
      _builder.append("os.system(\"\"\"javac $(find . -name \"*.java\") -cp /usr/share/java/py4j0.10.8.1.jar\"\"\")");
      _builder.newLine();
      _builder.append("os.system(\"\"\"cd ./bin && java -cp /usr/share/java/py4j0.10.8.1.jar:lib/*:. javaenv.AnalyzerGateway &\"\"\")");
      _builder.newLine();
      _builder.append("time.sleep(3)");
      _builder.newLine();
      _builder.newLine();
      _builder.newLine();
      _builder.append("print(\"creating python Py4J gateway\")");
      _builder.newLine();
      _builder.newLine();
      _builder.append("gateway = JavaGateway(callback_server_parameters=CallbackServerParameters())");
      _builder.newLine();
      _builder.append("sctmodel = gateway.entry_point.getEntryPoint()#.getDetModel()");
      _builder.newLine();
      _builder.newLine();
      _builder.newLine();
      _builder.append("simTime=");
      String _string = Double.toString(analysis_component.getSimulationTime());
      _builder.append(_string);
      _builder.newLineIfNotEmpty();
      _builder.append("simNumber=");
      String _string_1 = analysis_component.getSimulationNumber().toString();
      _builder.append(_string_1);
      _builder.newLineIfNotEmpty();
      _builder.newLine();
      _builder.newLine();
      _builder.newLine();
      _builder.newLine();
      _builder.append("print(\"connected to gateway\")");
      _builder.newLine();
      _builder.newLine();
      _builder.append("DEBUG=False");
      _builder.newLine();
      _builder.newLine();
      _builder.append("events=list()");
      _builder.newLine();
      _builder.newLine();
      _builder.newLine();
      CharSequence _generateDatasetClass = generator.generateDatasetClass();
      _builder.append(_generateDatasetClass);
      _builder.newLineIfNotEmpty();
      _builder.newLine();
      _builder.newLine();
      _builder.append("# stochastic model classes");
      _builder.newLine();
      _builder.newLine();
      CharSequence _generateContinuousRandomVariableClass = generator.generateContinuousRandomVariableClass();
      _builder.append(_generateContinuousRandomVariableClass);
      _builder.newLineIfNotEmpty();
      _builder.newLine();
      _builder.newLine();
      CharSequence _generateDiscreteRandomVariableClass = generator.generateDiscreteRandomVariableClass();
      _builder.append(_generateDiscreteRandomVariableClass);
      _builder.newLineIfNotEmpty();
      _builder.newLine();
      _builder.newLine();
      CharSequence _generateRandomVariableClass = generator.generateRandomVariableClass();
      _builder.append(_generateRandomVariableClass);
      _builder.newLineIfNotEmpty();
      _builder.newLine();
      _builder.newLine();
      CharSequence _generateGaussProcessClass = generator.generateGaussProcessClass();
      _builder.append(_generateGaussProcessClass);
      _builder.newLineIfNotEmpty();
      _builder.newLine();
      _builder.newLine();
      CharSequence _generateEventClass = generator.generateEventClass();
      _builder.append(_generateEventClass);
      _builder.newLineIfNotEmpty();
      _builder.newLine();
      _builder.newLine();
      CharSequence _generateFittedExponentialRandomVariableClass = generator.generateFittedExponentialRandomVariableClass();
      _builder.append(_generateFittedExponentialRandomVariableClass);
      _builder.newLineIfNotEmpty();
      _builder.newLine();
      _builder.newLine();
      CharSequence _generateFittedNormalRandomVariableClass = generator.generateFittedNormalRandomVariableClass();
      _builder.append(_generateFittedNormalRandomVariableClass);
      _builder.newLineIfNotEmpty();
      _builder.newLine();
      _builder.newLine();
      _builder.append("# environment component classes");
      _builder.newLine();
      _builder.newLine();
      CharSequence _generatePeriodicEventSourceClass = generator.generatePeriodicEventSourceClass();
      _builder.append(_generatePeriodicEventSourceClass);
      _builder.newLineIfNotEmpty();
      _builder.newLine();
      _builder.newLine();
      CharSequence _generateEventSourceClass = generator.generateEventSourceClass();
      _builder.append(_generateEventSourceClass);
      _builder.newLineIfNotEmpty();
      _builder.newLine();
      _builder.newLine();
      final Function1<EnvironmentConnections, Boolean> _function = (EnvironmentConnections c) -> {
        return Boolean.valueOf((c.component instanceof EnvironmentDelay));
      };
      String _generateDelayClasses = generator.generateDelayClasses(
        IterableExtensions.<EnvironmentConnections>toList(IterableExtensions.<EnvironmentConnections>filter(connections, _function)));
      _builder.append(_generateDelayClasses);
      _builder.newLineIfNotEmpty();
      _builder.newLine();
      final Function1<EnvironmentConnections, Boolean> _function_1 = (EnvironmentConnections c) -> {
        return Boolean.valueOf((c.component instanceof EnvironmentSwitch));
      };
      String _generateSwitchClasses = generator.generateSwitchClasses(
        IterableExtensions.<EnvironmentConnections>toList(IterableExtensions.<EnvironmentConnections>filter(connections, _function_1)));
      _builder.append(_generateSwitchClasses);
      _builder.newLineIfNotEmpty();
      _builder.newLine();
      final Function1<EnvironmentConnections, Boolean> _function_2 = (EnvironmentConnections c) -> {
        return Boolean.valueOf((c.component instanceof EnvironmentSample));
      };
      CharSequence _generateSampleClasses = generator.generateSampleClasses(
        IterableExtensions.<EnvironmentConnections>toList(IterableExtensions.<EnvironmentConnections>filter(connections, _function_2)));
      _builder.append(_generateSampleClasses);
      _builder.newLineIfNotEmpty();
      _builder.newLine();
      _builder.newLine();
      _builder.newLine();
      _builder.append("# environment instances");
      _builder.newLine();
      _builder.newLine();
      _builder.append("def generateComponents(actualTime):\t");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("components=list()");
      _builder.newLine();
      _builder.append("\t");
      _builder.newLine();
      _builder.append("\t");
      final Function1<EnvironmentConnections, Boolean> _function_3 = (EnvironmentConnections c) -> {
        return Boolean.valueOf((c.component instanceof EnvironmentPeriodicEventSource));
      };
      CharSequence _generatePeriodicEventSourceInstances = generator.generatePeriodicEventSourceInstances(
        IterableExtensions.<EnvironmentConnections>toList(IterableExtensions.<EnvironmentConnections>filter(connections, _function_3)));
      _builder.append(_generatePeriodicEventSourceInstances, "\t");
      _builder.newLineIfNotEmpty();
      _builder.append("\t");
      _builder.newLine();
      _builder.append("\t");
      _builder.newLine();
      _builder.append("\t");
      final Function1<EnvironmentConnections, Boolean> _function_4 = (EnvironmentConnections c) -> {
        return Boolean.valueOf((c.component instanceof EnvironmentEventSource));
      };
      CharSequence _generateEventSourceInstances = generator.generateEventSourceInstances(
        IterableExtensions.<EnvironmentConnections>toList(IterableExtensions.<EnvironmentConnections>filter(connections, _function_4)));
      _builder.append(_generateEventSourceInstances, "\t");
      _builder.newLineIfNotEmpty();
      _builder.append("\t");
      _builder.newLine();
      _builder.append("\t");
      _builder.newLine();
      _builder.append("\t");
      final Function1<EnvironmentConnections, Boolean> _function_5 = (EnvironmentConnections c) -> {
        return Boolean.valueOf((c.component instanceof EnvironmentDelay));
      };
      CharSequence _generateDelayInstances = generator.generateDelayInstances(
        IterableExtensions.<EnvironmentConnections>toList(IterableExtensions.<EnvironmentConnections>filter(connections, _function_5)));
      _builder.append(_generateDelayInstances, "\t");
      _builder.newLineIfNotEmpty();
      _builder.append("\t");
      _builder.newLine();
      _builder.append("\t");
      final Function1<EnvironmentConnections, Boolean> _function_6 = (EnvironmentConnections c) -> {
        return Boolean.valueOf((c.component instanceof EnvironmentSwitch));
      };
      CharSequence _generateSwitchInstances = generator.generateSwitchInstances(
        IterableExtensions.<EnvironmentConnections>toList(IterableExtensions.<EnvironmentConnections>filter(connections, _function_6)));
      _builder.append(_generateSwitchInstances, "\t");
      _builder.newLineIfNotEmpty();
      _builder.append("\t");
      _builder.newLine();
      _builder.append("\t");
      final Function1<EnvironmentConnections, Boolean> _function_7 = (EnvironmentConnections c) -> {
        return Boolean.valueOf((c.component instanceof EnvironmentSample));
      };
      CharSequence _generateSampleInstances = generator.generateSampleInstances(
        IterableExtensions.<EnvironmentConnections>toList(IterableExtensions.<EnvironmentConnections>filter(connections, _function_7)));
      _builder.append(_generateSampleInstances, "\t");
      _builder.newLineIfNotEmpty();
      _builder.append("\t");
      _builder.newLine();
      _builder.append("\t");
      final Function1<EnvironmentConnections, Boolean> _function_8 = (EnvironmentConnections c) -> {
        return Boolean.valueOf((c.component instanceof EnvironmentExternSimulation));
      };
      CharSequence _generateEventSourceInstances_1 = generator.generateEventSourceInstances(
        IterableExtensions.<EnvironmentConnections>toList(IterableExtensions.<EnvironmentConnections>filter(connections, _function_8)));
      _builder.append(_generateEventSourceInstances_1, "\t");
      _builder.newLineIfNotEmpty();
      _builder.append("\t");
      _builder.append("return components");
      _builder.newLine();
      _builder.newLine();
      _builder.newLine();
      _builder.newLine();
      _builder.newLine();
      _builder.append("def collectEvents(events,components):");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("for component in components:");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("events.extend(component.getEvents())");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("filter(lambda f: f.eventTime>=0.0,events)");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("events.sort(key=lambda f: f.eventTime)");
      _builder.newLine();
      _builder.append("\t");
      _builder.newLine();
      _builder.append("\t");
      _builder.newLine();
      _builder.append("def generateEvents(events,components):");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("for component in components:");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("component.generateEvents()");
      _builder.newLine();
      _builder.newLine();
      _builder.newLine();
      _builder.append("def state2Num(state):");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("if state==\"run\":");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("return 0.0");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("else:");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("return 1.0");
      _builder.newLine();
      _builder.newLine();
      _builder.newLine();
      _builder.newLine();
      _builder.newLine();
      _builder.append("def simulate():");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("actualTime=[0.0]");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("if DEBUG:");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("print(\"new sim ---------------------------------\")");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("events=list()");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("params=sampleParameters()");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("i=0");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("gateway.entry_point.getEntryPoint().reset(");
      {
        EList<Expression> _arguments = analysis_component.getAnalyzedComponent().getArguments();
        boolean _hasElements = false;
        for(final Expression arg : _arguments) {
          if (!_hasElements) {
            _hasElements = true;
          } else {
            _builder.appendImmediate(",", "\t");
          }
          _builder.newLineIfNotEmpty();
          {
            if ((arg instanceof StochasticExpression)) {
              _builder.append("\t");
              _builder.append("pyro.sample(\"param_\"+str(i),");
              CharSequence _generateDitribution = generator.generateDitribution(((StochasticExpression) arg).getRandomvariable());
              _builder.append(_generateDitribution, "\t");
              _builder.append("),");
              _builder.newLineIfNotEmpty();
              _builder.append("\t");
              _builder.append("i=i+1");
              _builder.newLine();
            } else {
              _builder.append("\t");
              String _string_2 = Double.toString(expEval.evaluateDecimal(arg));
              _builder.append(_string_2, "\t");
              _builder.newLineIfNotEmpty();
            }
          }
          _builder.append("\t");
        }
      }
      _builder.append(")");
      _builder.newLineIfNotEmpty();
      _builder.append("\t");
      _builder.append("components=generateComponents(actualTime)");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("generateEvents(events,components)");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("collectEvents(events,components)");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("while len(events)>0 and actualTime[0]<simTime:");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("collectEvents(events,components)");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("filter(lambda f: f.eventTime>=0.0,events)");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("events.sort(key=lambda f: f.eventTime)");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("event=events.pop(0)");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("actualTime[0]=event.eventTime");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("if DEBUG:");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("print(event.eventSource.name+\" at time: \"+str(actualTime[0]))");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("event.eventCall()");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("if DEBUG:");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("print(event.eventSource.name+\" at time: \"+str(actualTime))");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("event.eventCall()");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("# run the deterministic statechart behavior");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("sctmodel.get");
      String _firstUpper = StringExtensions.toFirstUpper(analysis_component.getAnalyzedComponent().getName());
      _builder.append(_firstUpper, "\t\t");
      _builder.append("().start()");
      _builder.newLineIfNotEmpty();
      _builder.append("\t\t");
      _builder.newLine();
      _builder.append("\t");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("# get the aspects and return from the simulations ");
      _builder.newLine();
      _builder.append("\t");
      CharSequence _generateSimulationReturn = TransformationUtility.generateSimulationReturn(analysis_component.getAspect());
      _builder.append(_generateSimulationReturn, "\t");
      _builder.newLineIfNotEmpty();
      _builder.newLine();
      _builder.newLine();
      _builder.append("print(\"testing the simulator\")");
      _builder.newLine();
      _builder.newLine();
      _builder.newLine();
      _builder.append("if DEBUG:");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("try:");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("for i in range(1):");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("print(simulate())");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("print(\"start simulator\")");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("prior_data=list()");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("for i in range(simNumber):");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("if i % 5 == 0:");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("print(\"Simulation step: \", i)");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("prior_data.append(simulate())");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("print(\"visualize histogram\")");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("fig, a = plt.subplots()");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("a.set_title(\"simulation results\")");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("a.hist(prior_data)");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("plt.show()");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("print(\"simulation has been finished\")");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("except Exception as err:");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("print(\"Exception occured during testing the simulation: \")");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("print(err)");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("traceback.print_exc()");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("finally:");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("print(\"shuting down the Py4J gateway\")");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("gateway.shutdown()");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("print(\"exit\")");
      _builder.newLine();
      _builder.append("\t");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("print(\"simulation has been finished\")");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("print(\"shuting down the Py4J gateway\")");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("gateway.shutdown()");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("print(\"exit\")");
      _builder.newLine();
      _builder.append("\t");
      _builder.newLine();
      _builder.newLine();
      _builder.newLine();
      _builder.append("def simulateUntilStop():");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("actualTime=[0.0]");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("if DEBUG:");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("print(\"new sim ---------------------------------\")");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("events=list()");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("params=sampleParameters()");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("i=0");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("gateway.entry_point.getEntryPoint().reset(");
      {
        EList<Expression> _arguments_1 = analysis_component.getAnalyzedComponent().getArguments();
        boolean _hasElements_1 = false;
        for(final Expression arg_1 : _arguments_1) {
          if (!_hasElements_1) {
            _hasElements_1 = true;
          } else {
            _builder.appendImmediate(",", "\t");
          }
          _builder.newLineIfNotEmpty();
          {
            if ((arg_1 instanceof StochasticExpression)) {
              _builder.append("\t");
              _builder.append("pyro.sample(\"param_\"+str(i),");
              CharSequence _generateDitribution_1 = generator.generateDitribution(((StochasticExpression) arg_1).getRandomvariable());
              _builder.append(_generateDitribution_1, "\t");
              _builder.append("),");
              _builder.newLineIfNotEmpty();
              _builder.append("\t");
              _builder.append("i=i+1");
              _builder.newLine();
            } else {
              _builder.append("\t");
              String _string_3 = Double.toString(expEval.evaluateDecimal(arg_1));
              _builder.append(_string_3, "\t");
              _builder.newLineIfNotEmpty();
            }
          }
          _builder.append("\t");
        }
      }
      _builder.append(")");
      _builder.newLineIfNotEmpty();
      _builder.append("\t");
      _builder.append("components=generateComponents(actualTime)");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("generateEvents(events,components)");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("collectEvents(events,components)");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("while len(events)>0 and actualTime[0]<simTime:");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("collectEvents(events,components)");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("filter(lambda f: f.eventTime>=0.0,events)");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("events.sort(key=lambda f: f.eventTime)");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("event=events.pop(0)");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("actualTime[0]=event.eventTime");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("if DEBUG:");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("print(event.eventSource.name+\" at time: \"+str(actualTime[0]))");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("event.eventCall()");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("if DEBUG:");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("print(event.eventSource.name+\" at time: \"+str(actualTime))");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("event.eventCall()");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("for i in range(10):");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("sctmodel.get");
      String _firstUpper_1 = StringExtensions.toFirstUpper(analysis_component.getAnalyzedComponent().getName());
      _builder.append(_firstUpper_1, "\t\t\t\t");
      _builder.append("().runCycle()");
      _builder.newLineIfNotEmpty();
      _builder.append("\t\t\t\t");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("if gateway.entry_point.getEntryPoint().getState() != \"run\":");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("break");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("components.clear()");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("return actualTime[0]");
      _builder.newLine();
      _builder.newLine();
      _builder.newLine();
      _builder.append("def simulateUntilTime():");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("actualTime=[0.0]");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("events=list()");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("gateway.entry_point.getEntryPoint().reset()");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("components=generateComponents(actualTime)");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("generateEvents(events,components)");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("collectEvents(events,components)");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("while len(events)>0 and actualTime[0]<simTime:");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("collectEvents(events,components)");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("filter(lambda f: f.eventTime>=0.0,events)");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("events.sort(key=lambda f: f.eventTime)");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("event=events.pop(0)");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("actualTime[0]=event.eventTime");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("if DEBUG:");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("print(event.eventSource.name+\" at time: \"+str(actualTime[0]))");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("event.eventCall()");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("for i in range(10):");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("sctmodel.get");
      String _firstUpper_2 = StringExtensions.toFirstUpper(analysis_component.getAnalyzedComponent().getName());
      _builder.append(_firstUpper_2, "\t\t\t");
      _builder.append("().runCycle()");
      _builder.newLineIfNotEmpty();
      _builder.append("\t");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("components.clear()");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("return gateway.entry_point.getEntryPoint().getFreq()");
      _builder.newLine();
      _builder.newLine();
      _builder.newLine();
      _xblockexpression = _builder;
    }
    return _xblockexpression;
  }
}

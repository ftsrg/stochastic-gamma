/**
 * generated by Xtext 2.20.0
 */
package hu.mit.gamma.environment.language.generator;

import hu.bme.mit.gamma.analysis.transformation.ClassGenerator;
import hu.bme.mit.gamma.analysis.transformation.ElementaryComponentCollector;
import hu.bme.mit.gamma.analysis.transformation.EnvironmentConnections;
import hu.bme.mit.gamma.environment.model.EnvironmentCompositeComponent;
import hu.bme.mit.gamma.environment.model.EnvironmentCompositeComponentInstance;
import hu.bme.mit.gamma.environment.model.EnvironmentExternSimulation;
import hu.bme.mit.gamma.statechart.composite.SynchronousComponentInstance;
import hu.bme.mit.gamma.statechart.interface_.Component;
import java.util.ArrayList;
import java.util.List;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.CollectionLiterals;
import org.eclipse.xtext.xbase.lib.Functions.Function1;
import org.eclipse.xtext.xbase.lib.IterableExtensions;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class EnvironmentLanguageGenerator extends AbstractGenerator {
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    EObject _get = resource.getContents().get(0);
    final hu.bme.mit.gamma.statechart.interface_.Package p = ((hu.bme.mit.gamma.statechart.interface_.Package) _get);
    final Function1<Component, Boolean> _function = (Component comp) -> {
      return Boolean.valueOf((comp instanceof EnvironmentCompositeComponent));
    };
    final Function1<Component, EList<SynchronousComponentInstance>> _function_1 = (Component comp) -> {
      return ((EnvironmentCompositeComponent) comp).getComponents();
    };
    final Function1<SynchronousComponentInstance, Boolean> _function_2 = (SynchronousComponentInstance comp) -> {
      return Boolean.valueOf((comp instanceof EnvironmentExternSimulation));
    };
    final Function1<SynchronousComponentInstance, EnvironmentExternSimulation> _function_3 = (SynchronousComponentInstance comp) -> {
      return ((EnvironmentExternSimulation) comp);
    };
    final List<EnvironmentExternSimulation> simulations = IterableExtensions.<EnvironmentExternSimulation>toList(IterableExtensions.<SynchronousComponentInstance, EnvironmentExternSimulation>map(IterableExtensions.<SynchronousComponentInstance>filter(IterableExtensions.<Component, SynchronousComponentInstance>flatMap(IterableExtensions.<Component>filter(p.getComponents(), _function), _function_1), _function_2), _function_3));
    String _name = p.getName();
    ClassGenerator generator = new ClassGenerator(_name);
    for (final EnvironmentExternSimulation simulation : simulations) {
      {
        ArrayList<EnvironmentCompositeComponentInstance> stack = CollectionLiterals.<EnvironmentCompositeComponentInstance>newArrayList();
        List<EnvironmentConnections> connections = ElementaryComponentCollector.collect(simulation, stack);
        String _name_1 = simulation.getName();
        String _plus = (_name_1 + "_temp.py");
        fsa.generateFile(_plus, 
          generator.generateExternSimulationTemplateClasses(connections));
      }
    }
  }
}

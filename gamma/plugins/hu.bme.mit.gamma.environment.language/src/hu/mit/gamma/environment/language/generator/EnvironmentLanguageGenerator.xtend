/*
 * generated by Xtext 2.20.0
 */
package hu.mit.gamma.environment.language.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import hu.bme.mit.gamma.statechart.interface_.Package
import hu.bme.mit.gamma.environment.model.EnvironmentCompositeComponent
import hu.bme.mit.gamma.environment.model.EnvironmentExternSimulation
import hu.bme.mit.gamma.analysis.transformation.ClassGenerator
import hu.bme.mit.gamma.analysis.transformation.ElementaryComponentCollector
import hu.bme.mit.gamma.environment.model.EnvironmentCompositeComponentInstance

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class EnvironmentLanguageGenerator extends AbstractGenerator {

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		val p=resource.contents.get(0) as Package 
		val simulations=p.components.filter[comp | comp instanceof EnvironmentCompositeComponent]
					.flatMap[comp | (comp as EnvironmentCompositeComponent).components]
					.filter[comp | comp instanceof EnvironmentExternSimulation]
					.map[comp | comp as EnvironmentExternSimulation].toList
		var generator=new ClassGenerator(p.name)
		for (simulation : simulations){
			var stack=<EnvironmentCompositeComponentInstance>newArrayList()
			var connections=ElementaryComponentCollector.collect(simulation,stack)
			fsa.generateFile(
				simulation.name+'_temp.py', 
				generator.generateExternSimulationTemplateClasses(connections)
			)
		}
	}
}

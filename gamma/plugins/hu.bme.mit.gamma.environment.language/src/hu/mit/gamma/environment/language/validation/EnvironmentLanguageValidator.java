/*
 * generated by Xtext 2.20.0
 */
package hu.mit.gamma.environment.language.validation;

import java.util.Collection;
import java.util.List;
import java.util.stream.Collectors;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.validation.Check;

import hu.bme.mit.gamma.environment.model.EnvironmentComponentInstance;
import hu.bme.mit.gamma.environment.model.EnvironmentCompositeComponent;
import hu.bme.mit.gamma.expression.model.ArgumentedElement;
import hu.bme.mit.gamma.expression.model.ElseExpression;
import hu.bme.mit.gamma.expression.model.Expression;
import hu.bme.mit.gamma.expression.model.ExpressionModelPackage;
import hu.bme.mit.gamma.expression.model.ParameterDeclaration;
import hu.bme.mit.gamma.expression.model.VariableDeclaration;
import hu.bme.mit.gamma.expression.util.ExpressionModelValidator.ReferenceInfo;
import hu.bme.mit.gamma.statechart.composite.AbstractSynchronousCompositeComponent;
import hu.bme.mit.gamma.statechart.composite.AsynchronousAdapter;
import hu.bme.mit.gamma.statechart.composite.BroadcastChannel;
import hu.bme.mit.gamma.statechart.composite.CascadeCompositeComponent;
import hu.bme.mit.gamma.statechart.composite.Channel;
import hu.bme.mit.gamma.statechart.composite.ComponentInstance;
import hu.bme.mit.gamma.statechart.composite.ComponentInstanceReference;
import hu.bme.mit.gamma.statechart.composite.CompositeComponent;
import hu.bme.mit.gamma.statechart.composite.CompositeModelPackage;
import hu.bme.mit.gamma.statechart.composite.ControlSpecification;
import hu.bme.mit.gamma.statechart.composite.InstancePortReference;
import hu.bme.mit.gamma.statechart.composite.MessageQueue;
import hu.bme.mit.gamma.statechart.composite.PortBinding;
import hu.bme.mit.gamma.statechart.composite.ScheduledAsynchronousCompositeComponent;
import hu.bme.mit.gamma.statechart.composite.SimpleChannel;
import hu.bme.mit.gamma.statechart.contract.AdaptiveContractAnnotation;
import hu.bme.mit.gamma.statechart.contract.StateContractAnnotation;
import hu.bme.mit.gamma.statechart.derivedfeatures.StatechartModelDerivedFeatures;
import hu.bme.mit.gamma.statechart.interface_.Clock;
import hu.bme.mit.gamma.statechart.interface_.Component;
import hu.bme.mit.gamma.statechart.interface_.Event;
import hu.bme.mit.gamma.statechart.interface_.EventParameterReferenceExpression;
import hu.bme.mit.gamma.statechart.interface_.Interface;
import hu.bme.mit.gamma.statechart.interface_.Package;
import hu.bme.mit.gamma.statechart.interface_.Port;
import hu.bme.mit.gamma.statechart.interface_.TimeSpecification;
import hu.bme.mit.gamma.statechart.phase.MissionPhaseStateDefinition;
import hu.bme.mit.gamma.statechart.phase.VariableBinding;
import hu.bme.mit.gamma.statechart.statechart.AnyPortEventReference;
import hu.bme.mit.gamma.statechart.statechart.ChoiceState;
import hu.bme.mit.gamma.statechart.statechart.EntryState;
import hu.bme.mit.gamma.statechart.statechart.ForkState;
import hu.bme.mit.gamma.statechart.statechart.JoinState;
import hu.bme.mit.gamma.statechart.statechart.MergeState;
import hu.bme.mit.gamma.statechart.statechart.OpaqueTrigger;
import hu.bme.mit.gamma.statechart.statechart.PortEventReference;
import hu.bme.mit.gamma.statechart.statechart.PseudoState;
import hu.bme.mit.gamma.statechart.statechart.RaiseEventAction;
import hu.bme.mit.gamma.statechart.statechart.Region;
import hu.bme.mit.gamma.statechart.statechart.StateNode;
import hu.bme.mit.gamma.statechart.statechart.StateReferenceExpression;
import hu.bme.mit.gamma.statechart.statechart.StatechartDefinition;
import hu.bme.mit.gamma.statechart.statechart.TimeoutDeclaration;
import hu.bme.mit.gamma.statechart.statechart.Transition;
import hu.bme.mit.gamma.statechart.util.StatechartModelValidator;

/**
 * This class contains custom validation rules. 
 *
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
public class EnvironmentLanguageValidator extends AbstractEnvironmentLanguageValidator {
	

	protected StatechartModelValidator statechartModelValidator = StatechartModelValidator.INSTANCE;
	
	public EnvironmentLanguageValidator() {
		super.expressionModelValidator = statechartModelValidator;
		super.actionModelValidator = statechartModelValidator;
	}
	
	//Elementary Environmental Components
	
	
	
	@Check
	public void checkComponentSepratation(Component component) {
		if (component instanceof EnvironmentCompositeComponent) return; //todo: add validation
		handleValidationResultMessage(statechartModelValidator.checkComponentSepratation(component));
	}
	
	// Expressions
	
	@Check
	public void checkArgumentTypes(ArgumentedElement element) {
		if (element instanceof EnvironmentCompositeComponent) return; //todo: add validation
		if (element instanceof EnvironmentComponentInstance) return; //todo: add validation
		handleValidationResultMessage(statechartModelValidator.checkArgumentTypes(element));
	}
	
	
	// Statechart
	
	@Check
	public void checkUnusedDeclarations(Component component) {
		if (component instanceof EnvironmentCompositeComponent) 
			return; //todo: add validation
		handleValidationResultMessage(statechartModelValidator.checkUnusedDeclarations(component));
	}
	
	@Check
	public void checkTransitionEventTriggers(PortEventReference portEventReference) {
		if (portEventReference.getPort().eContainer() instanceof EnvironmentCompositeComponent) return; //todo: add validation
		if (portEventReference.getPort().eContainer()  instanceof EnvironmentComponentInstance) return; //todo: add validation
		handleValidationResultMessage(statechartModelValidator.checkTransitionEventTriggers(portEventReference));
	}
		
	// Composite system
			
	@Check
	public void checkParameters(ComponentInstance instance) {
		if (instance instanceof EnvironmentComponentInstance) return; //todo: add validation
		handleValidationResultMessage(statechartModelValidator.checkParameters(instance));
	}
	
	@Check
	public void checkComponentInstanceArguments(ComponentInstance instance) {
		if (instance instanceof EnvironmentComponentInstance) return; //todo: add validation
		handleValidationResultMessage(statechartModelValidator.checkComponentInstanceArguments(instance));
	}
	
	@Check
	public void checkPortBinding(Port port) {
		if (port.eContainer() instanceof EnvironmentCompositeComponent) return; //todo: add validation
		if (port.eContainer()  instanceof EnvironmentComponentInstance) return; //todo: add validation
		handleValidationResultMessage(statechartModelValidator.checkPortBinding(port));
	}
	
	@Check
	public void checkComponentInstances(ComponentInstance instance) {
		return;
		//if (instance instanceof EnvironmentComponentInstance) 
		//	return; //todo: add validation
		//handleValidationResultMessage(statechartModelValidator.checkComponentInstances(instance));
	}
	
	@Check
	public void checkPortBindingUniqueness(PortBinding portBinding) {
		if (portBinding.eContainer() instanceof EnvironmentCompositeComponent) return; //todo: add validation
		if (portBinding.eContainer()  instanceof EnvironmentComponentInstance) return; //todo: add validation
		handleValidationResultMessage(statechartModelValidator.checkPortBindingUniqueness(portBinding));
	}
	
	@Check
	public void checkPortBinding(PortBinding portDefinition) {
		if (portDefinition.eContainer() instanceof EnvironmentCompositeComponent) return; //todo: add validation
		if (portDefinition.eContainer()  instanceof EnvironmentComponentInstance) return; //todo: add validation
		handleValidationResultMessage(statechartModelValidator.checkPortBinding(portDefinition));
	}
	
	@Check
	public void checkInstancePortReference(InstancePortReference reference) {
		if (reference.getPort().eContainer()  instanceof EnvironmentComponentInstance) return; //todo: add validation
		handleValidationResultMessage(statechartModelValidator.checkInstancePortReference(reference));
	}
	
	@Check
	public void checkPortBindingWithSimpleChannel(SimpleChannel channel) {
		if (channel.eContainer() instanceof EnvironmentCompositeComponent) return; //todo: add validation
		handleValidationResultMessage(statechartModelValidator.checkPortBindingWithSimpleChannel(channel));	
	}
	
	@Check
	public void checkPortBindingWithBroadcastChannel(BroadcastChannel channel) {
		if (channel.eContainer() instanceof EnvironmentCompositeComponent) return; //todo: add validation
		handleValidationResultMessage(statechartModelValidator.checkPortBindingWithBroadcastChannel(channel));		
	}
	
	@Check
	public void checkChannelProvidedPorts(Channel channel) {
		if (channel.eContainer() instanceof EnvironmentCompositeComponent) return; //todo: add validation
		handleValidationResultMessage(statechartModelValidator.checkChannelProvidedPorts(channel));
	}
	
	@Check
	public void checkChannelRequiredPorts(SimpleChannel channel) {
		if (channel.eContainer() instanceof EnvironmentCompositeComponent) return; //todo: add validation
		handleValidationResultMessage(statechartModelValidator.checkChannelRequiredPorts(channel));
	}
	
	@Check
	public void checkChannelRequiredPorts(BroadcastChannel channel) {
		if (channel.eContainer() instanceof EnvironmentCompositeComponent) return; //todo: add validation
		handleValidationResultMessage(statechartModelValidator.checkChannelRequiredPorts(channel));
	}
	
	@Check
	public void checkChannelInput(Channel channel) {
		if (channel.eContainer() instanceof EnvironmentCompositeComponent) return; //todo: add validation
		handleValidationResultMessage(statechartModelValidator.checkChannelInput(channel));		
	}
	
	@Check
	public void checkSimpleChannelOutput(SimpleChannel channel) {
		if (channel.eContainer() instanceof EnvironmentCompositeComponent) return; //todo: add validation
		handleValidationResultMessage(statechartModelValidator.checkSimpleChannelOutput(channel));
	}
	
	@Check
	public void checkBroadcastChannelOutput(BroadcastChannel channel) {
		if (channel.eContainer() instanceof EnvironmentCompositeComponent) return; //todo: add validation
		handleValidationResultMessage(statechartModelValidator.checkBroadcastChannelOutput(channel));	
	}
	
	@Check
	public void checkCascadeLoopChannels(SimpleChannel channel) {
		if (channel.eContainer() instanceof EnvironmentCompositeComponent) return; //todo: add validation
		handleValidationResultMessage(statechartModelValidator.checkCascadeLoopChannels(channel));
	}
	
	@Check
	public void checkCascadeLoopChannels(BroadcastChannel channel) {
		if (channel.eContainer() instanceof EnvironmentCompositeComponent) return; //todo: add validation
		handleValidationResultMessage(statechartModelValidator.checkCascadeLoopChannels(channel));
	}
	
	// Wrapper
	
	@Check
	public void checkWrapperPortName(Port port) {
		if (port.eContainer() instanceof EnvironmentCompositeComponent) return; //todo: add validation
		if (port.eContainer()  instanceof EnvironmentComponentInstance) return; //todo: add validation
		handleValidationResultMessage(statechartModelValidator.checkWrapperPortName(port));
	}
	@Check
	public void checkMessageQueueAnyEventReferences(AnyPortEventReference anyPortEventReference) {
		if (anyPortEventReference.getPort().eContainer() instanceof EnvironmentCompositeComponent) return; //todo: add validation
		if (anyPortEventReference.getPort().eContainer()  instanceof EnvironmentComponentInstance) return; //todo: add validation
		handleValidationResultMessage(statechartModelValidator
				.checkMessageQueueAnyEventReferences(anyPortEventReference));
	}
	
	@Check
	public void checkExecutionLists(CascadeCompositeComponent cascade) {
		if (cascade instanceof EnvironmentCompositeComponent) return; //todo: add validation
		handleValidationResultMessage(statechartModelValidator.checkExecutionLists(cascade));
	}
	
	@Check
	public void checkExecutionLists(ScheduledAsynchronousCompositeComponent scheduledComponent) {
		if (scheduledComponent instanceof EnvironmentCompositeComponent) return; //todo: add validation
		handleValidationResultMessage(statechartModelValidator.checkExecutionLists(scheduledComponent));
	}
	
	@Check
	public void checkComponents(ScheduledAsynchronousCompositeComponent scheduledComponent) {
		if (scheduledComponent instanceof EnvironmentCompositeComponent) return; //todo: add validation
		handleValidationResultMessage(statechartModelValidator.checkComponents(scheduledComponent));
	}
	
	@Check
	public void checkComponentInstanceReferences(ComponentInstanceReference reference) {
		if (reference.getComponentInstanceHierarchy().stream().filter(instance -> instance instanceof EnvironmentComponentInstance).count()>0) return; //todo: add validation
		handleValidationResultMessage(statechartModelValidator.checkComponentInstanceReferences(reference));
	}
}

/*
 * generated by Xtext 2.24.0
 */
package hu.mit.gamma.environment.language.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import hu.bme.mit.gamma.action.language.services.ActionLanguageGrammarAccess;
import hu.bme.mit.gamma.expression.language.services.ExpressionLanguageGrammarAccess;
import hu.bme.mit.gamma.statechart.language.services.StatechartLanguageGrammarAccess;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class EnvironmentLanguageGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class PackageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.mit.gamma.environment.language.EnvironmentLanguage.Package");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPackageKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cImportKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cImportsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cImportsPackageCrossReference_2_1_0 = (CrossReference)cImportsAssignment_2_1.eContents().get(0);
		private final RuleCall cImportsPackageSTRINGTerminalRuleCall_2_1_0_1 = (RuleCall)cImportsPackageCrossReference_2_1_0.eContents().get(1);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Assignment cConstantDeclarationsAssignment_3_0 = (Assignment)cAlternatives_3.eContents().get(0);
		private final RuleCall cConstantDeclarationsConstantDeclarationParserRuleCall_3_0_0 = (RuleCall)cConstantDeclarationsAssignment_3_0.eContents().get(0);
		private final Assignment cFunctionDeclarationsAssignment_3_1 = (Assignment)cAlternatives_3.eContents().get(1);
		private final RuleCall cFunctionDeclarationsFunctionDeclarationParserRuleCall_3_1_0 = (RuleCall)cFunctionDeclarationsAssignment_3_1.eContents().get(0);
		private final Assignment cTypeDeclarationsAssignment_3_2 = (Assignment)cAlternatives_3.eContents().get(2);
		private final RuleCall cTypeDeclarationsTypeDeclarationParserRuleCall_3_2_0 = (RuleCall)cTypeDeclarationsAssignment_3_2.eContents().get(0);
		private final Assignment cComponentsAssignment_3_3 = (Assignment)cAlternatives_3.eContents().get(3);
		private final RuleCall cComponentsComponentParserRuleCall_3_3_0 = (RuleCall)cComponentsAssignment_3_3.eContents().get(0);
		private final Assignment cInterfacesAssignment_3_4 = (Assignment)cAlternatives_3.eContents().get(4);
		private final RuleCall cInterfacesInterfaceParserRuleCall_3_4_0 = (RuleCall)cInterfacesAssignment_3_4.eContents().get(0);
		
		//@Override
		//Package InterfaceModel::Package:
		//	'package' name=ID ('import' imports+=[InterfaceModel::Package|STRING])* (constantDeclarations+=ConstantDeclaration |
		//	functionDeclarations+=FunctionDeclaration | typeDeclarations+=TypeDeclaration | components+=Component |
		//	interfaces+=Interface)*;
		@Override public ParserRule getRule() { return rule; }
		
		//'package' name=ID ('import' imports+=[InterfaceModel::Package|STRING])* (constantDeclarations+=ConstantDeclaration |
		//functionDeclarations+=FunctionDeclaration | typeDeclarations+=TypeDeclaration | components+=Component |
		//interfaces+=Interface)*
		public Group getGroup() { return cGroup; }
		
		//'package'
		public Keyword getPackageKeyword_0() { return cPackageKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//('import' imports+=[InterfaceModel::Package|STRING])*
		public Group getGroup_2() { return cGroup_2; }
		
		//'import'
		public Keyword getImportKeyword_2_0() { return cImportKeyword_2_0; }
		
		//imports+=[InterfaceModel::Package|STRING]
		public Assignment getImportsAssignment_2_1() { return cImportsAssignment_2_1; }
		
		//[InterfaceModel::Package|STRING]
		public CrossReference getImportsPackageCrossReference_2_1_0() { return cImportsPackageCrossReference_2_1_0; }
		
		//STRING
		public RuleCall getImportsPackageSTRINGTerminalRuleCall_2_1_0_1() { return cImportsPackageSTRINGTerminalRuleCall_2_1_0_1; }
		
		//(constantDeclarations+=ConstantDeclaration | functionDeclarations+=FunctionDeclaration |
		//typeDeclarations+=TypeDeclaration | components+=Component | interfaces+=Interface)*
		public Alternatives getAlternatives_3() { return cAlternatives_3; }
		
		//constantDeclarations+=ConstantDeclaration
		public Assignment getConstantDeclarationsAssignment_3_0() { return cConstantDeclarationsAssignment_3_0; }
		
		//ConstantDeclaration
		public RuleCall getConstantDeclarationsConstantDeclarationParserRuleCall_3_0_0() { return cConstantDeclarationsConstantDeclarationParserRuleCall_3_0_0; }
		
		//functionDeclarations+=FunctionDeclaration
		public Assignment getFunctionDeclarationsAssignment_3_1() { return cFunctionDeclarationsAssignment_3_1; }
		
		//FunctionDeclaration
		public RuleCall getFunctionDeclarationsFunctionDeclarationParserRuleCall_3_1_0() { return cFunctionDeclarationsFunctionDeclarationParserRuleCall_3_1_0; }
		
		//typeDeclarations+=TypeDeclaration
		public Assignment getTypeDeclarationsAssignment_3_2() { return cTypeDeclarationsAssignment_3_2; }
		
		//TypeDeclaration
		public RuleCall getTypeDeclarationsTypeDeclarationParserRuleCall_3_2_0() { return cTypeDeclarationsTypeDeclarationParserRuleCall_3_2_0; }
		
		//components+=Component
		public Assignment getComponentsAssignment_3_3() { return cComponentsAssignment_3_3; }
		
		//Component
		public RuleCall getComponentsComponentParserRuleCall_3_3_0() { return cComponentsComponentParserRuleCall_3_3_0; }
		
		//interfaces+=Interface
		public Assignment getInterfacesAssignment_3_4() { return cInterfacesAssignment_3_4; }
		
		//Interface
		public RuleCall getInterfacesInterfaceParserRuleCall_3_4_0() { return cInterfacesInterfaceParserRuleCall_3_4_0; }
	}
	public class ComponentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.mit.gamma.environment.language.EnvironmentLanguage.Component");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSynchronousComponentParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cEnvironmentCompositeComponentParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cAnalysisComponentParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cRequirementComponentParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//@Override
		//Component InterfaceModel::Component:
		//	SynchronousComponent | EnvironmentCompositeComponent | AnalysisComponent | RequirementComponent;
		@Override public ParserRule getRule() { return rule; }
		
		//SynchronousComponent | EnvironmentCompositeComponent | AnalysisComponent | RequirementComponent
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//SynchronousComponent
		public RuleCall getSynchronousComponentParserRuleCall_0() { return cSynchronousComponentParserRuleCall_0; }
		
		//EnvironmentCompositeComponent
		public RuleCall getEnvironmentCompositeComponentParserRuleCall_1() { return cEnvironmentCompositeComponentParserRuleCall_1; }
		
		//AnalysisComponent
		public RuleCall getAnalysisComponentParserRuleCall_2() { return cAnalysisComponentParserRuleCall_2; }
		
		//RequirementComponent
		public RuleCall getRequirementComponentParserRuleCall_3() { return cRequirementComponentParserRuleCall_3; }
	}
	public class RequirementComponentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.mit.gamma.environment.language.EnvironmentLanguage.RequirementComponent");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRequirementKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Assignment cParameterDeclarationsAssignment_2_1_0 = (Assignment)cGroup_2_1.eContents().get(0);
		private final RuleCall cParameterDeclarationsParameterDeclarationParserRuleCall_2_1_0_0 = (RuleCall)cParameterDeclarationsAssignment_2_1_0.eContents().get(0);
		private final Group cGroup_2_1_1 = (Group)cGroup_2_1.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_1_0 = (Keyword)cGroup_2_1_1.eContents().get(0);
		private final Assignment cParameterDeclarationsAssignment_2_1_1_1 = (Assignment)cGroup_2_1_1.eContents().get(1);
		private final RuleCall cParameterDeclarationsParameterDeclarationParserRuleCall_2_1_1_1_0 = (RuleCall)cParameterDeclarationsAssignment_2_1_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cInKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cAnalyzedComponentAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cAnalyzedComponentEnvironmentCompositeComponentInstanceParserRuleCall_5_0 = (RuleCall)cAnalyzedComponentAssignment_5.eContents().get(0);
		private final Assignment cAspectAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cAspectAnalysisAspectParserRuleCall_6_0 = (RuleCall)cAspectAssignment_6.eContents().get(0);
		private final Assignment cRequirementAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cRequirementRequirementAspectParserRuleCall_7_0 = (RuleCall)cRequirementAssignment_7.eContents().get(0);
		private final Assignment cConditionsAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cConditionsAnalysisConditionParserRuleCall_8_0 = (RuleCall)cConditionsAssignment_8.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		////defining Analysis and Requirement models
		//RequirementComponent AnalysisModel::RequirementComponent:
		//	'requirement' name=ID ('(' (parameterDeclarations+=ParameterDeclaration (','
		//	parameterDeclarations+=ParameterDeclaration)*)? ')')?
		//	'{'
		//	'in' analyzedComponent=EnvironmentCompositeComponentInstance
		//	aspect=AnalysisAspect
		//	requirement+=RequirementAspect
		//	conditions+=AnalysisCondition*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'requirement' name=ID ('(' (parameterDeclarations+=ParameterDeclaration (','
		//parameterDeclarations+=ParameterDeclaration)*)? ')')?
		//'{'
		//'in' analyzedComponent=EnvironmentCompositeComponentInstance
		//aspect=AnalysisAspect
		//requirement+=RequirementAspect
		//conditions+=AnalysisCondition*
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'requirement'
		public Keyword getRequirementKeyword_0() { return cRequirementKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//('(' (parameterDeclarations+=ParameterDeclaration (',' parameterDeclarations+=ParameterDeclaration)*)? ')')?
		public Group getGroup_2() { return cGroup_2; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }
		
		//(parameterDeclarations+=ParameterDeclaration (',' parameterDeclarations+=ParameterDeclaration)*)?
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//parameterDeclarations+=ParameterDeclaration
		public Assignment getParameterDeclarationsAssignment_2_1_0() { return cParameterDeclarationsAssignment_2_1_0; }
		
		//ParameterDeclaration
		public RuleCall getParameterDeclarationsParameterDeclarationParserRuleCall_2_1_0_0() { return cParameterDeclarationsParameterDeclarationParserRuleCall_2_1_0_0; }
		
		//(',' parameterDeclarations+=ParameterDeclaration)*
		public Group getGroup_2_1_1() { return cGroup_2_1_1; }
		
		//','
		public Keyword getCommaKeyword_2_1_1_0() { return cCommaKeyword_2_1_1_0; }
		
		//parameterDeclarations+=ParameterDeclaration
		public Assignment getParameterDeclarationsAssignment_2_1_1_1() { return cParameterDeclarationsAssignment_2_1_1_1; }
		
		//ParameterDeclaration
		public RuleCall getParameterDeclarationsParameterDeclarationParserRuleCall_2_1_1_1_0() { return cParameterDeclarationsParameterDeclarationParserRuleCall_2_1_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2_2() { return cRightParenthesisKeyword_2_2; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//'in'
		public Keyword getInKeyword_4() { return cInKeyword_4; }
		
		//analyzedComponent=EnvironmentCompositeComponentInstance
		public Assignment getAnalyzedComponentAssignment_5() { return cAnalyzedComponentAssignment_5; }
		
		//EnvironmentCompositeComponentInstance
		public RuleCall getAnalyzedComponentEnvironmentCompositeComponentInstanceParserRuleCall_5_0() { return cAnalyzedComponentEnvironmentCompositeComponentInstanceParserRuleCall_5_0; }
		
		//aspect=AnalysisAspect
		public Assignment getAspectAssignment_6() { return cAspectAssignment_6; }
		
		//AnalysisAspect
		public RuleCall getAspectAnalysisAspectParserRuleCall_6_0() { return cAspectAnalysisAspectParserRuleCall_6_0; }
		
		//requirement+=RequirementAspect
		public Assignment getRequirementAssignment_7() { return cRequirementAssignment_7; }
		
		//RequirementAspect
		public RuleCall getRequirementRequirementAspectParserRuleCall_7_0() { return cRequirementRequirementAspectParserRuleCall_7_0; }
		
		//conditions+=AnalysisCondition*
		public Assignment getConditionsAssignment_8() { return cConditionsAssignment_8; }
		
		//AnalysisCondition
		public RuleCall getConditionsAnalysisConditionParserRuleCall_8_0() { return cConditionsAnalysisConditionParserRuleCall_8_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_9() { return cRightCurlyBracketKeyword_9; }
	}
	public class RequirementAspectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.mit.gamma.environment.language.EnvironmentLanguage.RequirementAspect");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLowerThanParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cGreaterThanParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cIsBetweenParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//RequirementAspect AnalysisModel::RequirementAspect:
		//	LowerThan | GreaterThan | IsBetween;
		@Override public ParserRule getRule() { return rule; }
		
		//LowerThan | GreaterThan | IsBetween
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//LowerThan
		public RuleCall getLowerThanParserRuleCall_0() { return cLowerThanParserRuleCall_0; }
		
		//GreaterThan
		public RuleCall getGreaterThanParserRuleCall_1() { return cGreaterThanParserRuleCall_1; }
		
		//IsBetween
		public RuleCall getIsBetweenParserRuleCall_2() { return cIsBetweenParserRuleCall_2; }
	}
	public class LowerThanElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.mit.gamma.environment.language.EnvironmentLanguage.LowerThan");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLowerThanKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueDOUBLETerminalRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cDescriptionKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cDescriptionAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_2_1_0 = (RuleCall)cDescriptionAssignment_2_1.eContents().get(0);
		
		//LowerThan AnalysisModel::LowerThan:
		//	'lower than' value=DOUBLE ('description' description=STRING)?;
		@Override public ParserRule getRule() { return rule; }
		
		//'lower than' value=DOUBLE ('description' description=STRING)?
		public Group getGroup() { return cGroup; }
		
		//'lower than'
		public Keyword getLowerThanKeyword_0() { return cLowerThanKeyword_0; }
		
		//value=DOUBLE
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//DOUBLE
		public RuleCall getValueDOUBLETerminalRuleCall_1_0() { return cValueDOUBLETerminalRuleCall_1_0; }
		
		//('description' description=STRING)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'description'
		public Keyword getDescriptionKeyword_2_0() { return cDescriptionKeyword_2_0; }
		
		//description=STRING
		public Assignment getDescriptionAssignment_2_1() { return cDescriptionAssignment_2_1; }
		
		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_2_1_0() { return cDescriptionSTRINGTerminalRuleCall_2_1_0; }
	}
	public class GreaterThanElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.mit.gamma.environment.language.EnvironmentLanguage.GreaterThan");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGreaterThanKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueDOUBLETerminalRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cDescriptionKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cDescriptionAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_2_1_0 = (RuleCall)cDescriptionAssignment_2_1.eContents().get(0);
		
		//GreaterThan AnalysisModel::GreaterThan:
		//	'greater than' value=DOUBLE ('description' description=STRING)?;
		@Override public ParserRule getRule() { return rule; }
		
		//'greater than' value=DOUBLE ('description' description=STRING)?
		public Group getGroup() { return cGroup; }
		
		//'greater than'
		public Keyword getGreaterThanKeyword_0() { return cGreaterThanKeyword_0; }
		
		//value=DOUBLE
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//DOUBLE
		public RuleCall getValueDOUBLETerminalRuleCall_1_0() { return cValueDOUBLETerminalRuleCall_1_0; }
		
		//('description' description=STRING)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'description'
		public Keyword getDescriptionKeyword_2_0() { return cDescriptionKeyword_2_0; }
		
		//description=STRING
		public Assignment getDescriptionAssignment_2_1() { return cDescriptionAssignment_2_1; }
		
		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_2_1_0() { return cDescriptionSTRINGTerminalRuleCall_2_1_0; }
	}
	public class IsBetweenElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.mit.gamma.environment.language.EnvironmentLanguage.IsBetween");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cInKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cLowerBoundAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cLowerBoundDOUBLETerminalRuleCall_2_0 = (RuleCall)cLowerBoundAssignment_2.eContents().get(0);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cUpperBoundAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cUpperBoundDOUBLETerminalRuleCall_4_0 = (RuleCall)cUpperBoundAssignment_4.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cDescriptionKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cDescriptionAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_6_1_0 = (RuleCall)cDescriptionAssignment_6_1.eContents().get(0);
		
		//IsBetween AnalysisModel::IsBetween:
		//	'in' '[' lowerBound=DOUBLE ',' upperBound=DOUBLE ']' ('description' description=STRING)?;
		@Override public ParserRule getRule() { return rule; }
		
		//'in' '[' lowerBound=DOUBLE ',' upperBound=DOUBLE ']' ('description' description=STRING)?
		public Group getGroup() { return cGroup; }
		
		//'in'
		public Keyword getInKeyword_0() { return cInKeyword_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1() { return cLeftSquareBracketKeyword_1; }
		
		//lowerBound=DOUBLE
		public Assignment getLowerBoundAssignment_2() { return cLowerBoundAssignment_2; }
		
		//DOUBLE
		public RuleCall getLowerBoundDOUBLETerminalRuleCall_2_0() { return cLowerBoundDOUBLETerminalRuleCall_2_0; }
		
		//','
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }
		
		//upperBound=DOUBLE
		public Assignment getUpperBoundAssignment_4() { return cUpperBoundAssignment_4; }
		
		//DOUBLE
		public RuleCall getUpperBoundDOUBLETerminalRuleCall_4_0() { return cUpperBoundDOUBLETerminalRuleCall_4_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_5() { return cRightSquareBracketKeyword_5; }
		
		//('description' description=STRING)?
		public Group getGroup_6() { return cGroup_6; }
		
		//'description'
		public Keyword getDescriptionKeyword_6_0() { return cDescriptionKeyword_6_0; }
		
		//description=STRING
		public Assignment getDescriptionAssignment_6_1() { return cDescriptionAssignment_6_1; }
		
		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_6_1_0() { return cDescriptionSTRINGTerminalRuleCall_6_1_0; }
	}
	public class AnalysisComponentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.mit.gamma.environment.language.EnvironmentLanguage.AnalysisComponent");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAnalysisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Assignment cParameterDeclarationsAssignment_2_1_0 = (Assignment)cGroup_2_1.eContents().get(0);
		private final RuleCall cParameterDeclarationsParameterDeclarationParserRuleCall_2_1_0_0 = (RuleCall)cParameterDeclarationsAssignment_2_1_0.eContents().get(0);
		private final Group cGroup_2_1_1 = (Group)cGroup_2_1.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_1_0 = (Keyword)cGroup_2_1_1.eContents().get(0);
		private final Assignment cParameterDeclarationsAssignment_2_1_1_1 = (Assignment)cGroup_2_1_1.eContents().get(1);
		private final RuleCall cParameterDeclarationsParameterDeclarationParserRuleCall_2_1_1_1_0 = (RuleCall)cParameterDeclarationsAssignment_2_1_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cInKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cAnalyzedComponentAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cAnalyzedComponentEnvironmentCompositeComponentInstanceParserRuleCall_5_0 = (RuleCall)cAnalyzedComponentAssignment_5.eContents().get(0);
		private final Assignment cAspectAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cAspectAnalysisAspectParserRuleCall_6_0 = (RuleCall)cAspectAssignment_6.eContents().get(0);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cSimulationKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Keyword cTimeKeyword_7_1 = (Keyword)cGroup_7.eContents().get(1);
		private final Keyword cEqualsSignKeyword_7_2 = (Keyword)cGroup_7.eContents().get(2);
		private final Assignment cSimulationTimeAssignment_7_3 = (Assignment)cGroup_7.eContents().get(3);
		private final RuleCall cSimulationTimeDOUBLETerminalRuleCall_7_3_0 = (RuleCall)cSimulationTimeAssignment_7_3.eContents().get(0);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cSimulationKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Keyword cNumberKeyword_8_1 = (Keyword)cGroup_8.eContents().get(1);
		private final Keyword cEqualsSignKeyword_8_2 = (Keyword)cGroup_8.eContents().get(2);
		private final Assignment cSimulationNumberAssignment_8_3 = (Assignment)cGroup_8.eContents().get(3);
		private final RuleCall cSimulationNumberINTEGERTerminalRuleCall_8_3_0 = (RuleCall)cSimulationNumberAssignment_8_3.eContents().get(0);
		private final Assignment cConditionsAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cConditionsAnalysisConditionParserRuleCall_9_0 = (RuleCall)cConditionsAssignment_9.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_10 = (Keyword)cGroup.eContents().get(10);
		
		//AnalysisComponent AnalysisModel::AnalysisComponent:
		//	'analysis' name=ID ('(' (parameterDeclarations+=ParameterDeclaration (',' parameterDeclarations+=ParameterDeclaration)
		//	*)? ')')?
		//	'{'
		//	'in' analyzedComponent=EnvironmentCompositeComponentInstance
		//	aspect=AnalysisAspect ("simulation" "time" "=" simulationTime=DOUBLE)? ("simulation" "number" "="
		//	simulationNumber=INTEGER)?
		//	conditions+=AnalysisCondition*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'analysis' name=ID ('(' (parameterDeclarations+=ParameterDeclaration (',' parameterDeclarations+=ParameterDeclaration)
		//*)? ')')?
		//'{'
		//'in' analyzedComponent=EnvironmentCompositeComponentInstance
		//aspect=AnalysisAspect ("simulation" "time" "=" simulationTime=DOUBLE)? ("simulation" "number" "="
		//simulationNumber=INTEGER)?
		//conditions+=AnalysisCondition*
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'analysis'
		public Keyword getAnalysisKeyword_0() { return cAnalysisKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//('(' (parameterDeclarations+=ParameterDeclaration (',' parameterDeclarations+=ParameterDeclaration)*)? ')')?
		public Group getGroup_2() { return cGroup_2; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }
		
		//(parameterDeclarations+=ParameterDeclaration (',' parameterDeclarations+=ParameterDeclaration)*)?
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//parameterDeclarations+=ParameterDeclaration
		public Assignment getParameterDeclarationsAssignment_2_1_0() { return cParameterDeclarationsAssignment_2_1_0; }
		
		//ParameterDeclaration
		public RuleCall getParameterDeclarationsParameterDeclarationParserRuleCall_2_1_0_0() { return cParameterDeclarationsParameterDeclarationParserRuleCall_2_1_0_0; }
		
		//(',' parameterDeclarations+=ParameterDeclaration)*
		public Group getGroup_2_1_1() { return cGroup_2_1_1; }
		
		//','
		public Keyword getCommaKeyword_2_1_1_0() { return cCommaKeyword_2_1_1_0; }
		
		//parameterDeclarations+=ParameterDeclaration
		public Assignment getParameterDeclarationsAssignment_2_1_1_1() { return cParameterDeclarationsAssignment_2_1_1_1; }
		
		//ParameterDeclaration
		public RuleCall getParameterDeclarationsParameterDeclarationParserRuleCall_2_1_1_1_0() { return cParameterDeclarationsParameterDeclarationParserRuleCall_2_1_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2_2() { return cRightParenthesisKeyword_2_2; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//'in'
		public Keyword getInKeyword_4() { return cInKeyword_4; }
		
		//analyzedComponent=EnvironmentCompositeComponentInstance
		public Assignment getAnalyzedComponentAssignment_5() { return cAnalyzedComponentAssignment_5; }
		
		//EnvironmentCompositeComponentInstance
		public RuleCall getAnalyzedComponentEnvironmentCompositeComponentInstanceParserRuleCall_5_0() { return cAnalyzedComponentEnvironmentCompositeComponentInstanceParserRuleCall_5_0; }
		
		//aspect=AnalysisAspect
		public Assignment getAspectAssignment_6() { return cAspectAssignment_6; }
		
		//AnalysisAspect
		public RuleCall getAspectAnalysisAspectParserRuleCall_6_0() { return cAspectAnalysisAspectParserRuleCall_6_0; }
		
		//("simulation" "time" "=" simulationTime=DOUBLE)?
		public Group getGroup_7() { return cGroup_7; }
		
		//"simulation"
		public Keyword getSimulationKeyword_7_0() { return cSimulationKeyword_7_0; }
		
		//"time"
		public Keyword getTimeKeyword_7_1() { return cTimeKeyword_7_1; }
		
		//"="
		public Keyword getEqualsSignKeyword_7_2() { return cEqualsSignKeyword_7_2; }
		
		//simulationTime=DOUBLE
		public Assignment getSimulationTimeAssignment_7_3() { return cSimulationTimeAssignment_7_3; }
		
		//DOUBLE
		public RuleCall getSimulationTimeDOUBLETerminalRuleCall_7_3_0() { return cSimulationTimeDOUBLETerminalRuleCall_7_3_0; }
		
		//("simulation" "number" "=" simulationNumber=INTEGER)?
		public Group getGroup_8() { return cGroup_8; }
		
		//"simulation"
		public Keyword getSimulationKeyword_8_0() { return cSimulationKeyword_8_0; }
		
		//"number"
		public Keyword getNumberKeyword_8_1() { return cNumberKeyword_8_1; }
		
		//"="
		public Keyword getEqualsSignKeyword_8_2() { return cEqualsSignKeyword_8_2; }
		
		//simulationNumber=INTEGER
		public Assignment getSimulationNumberAssignment_8_3() { return cSimulationNumberAssignment_8_3; }
		
		//INTEGER
		public RuleCall getSimulationNumberINTEGERTerminalRuleCall_8_3_0() { return cSimulationNumberINTEGERTerminalRuleCall_8_3_0; }
		
		//conditions+=AnalysisCondition*
		public Assignment getConditionsAssignment_9() { return cConditionsAssignment_9; }
		
		//AnalysisCondition
		public RuleCall getConditionsAnalysisConditionParserRuleCall_9_0() { return cConditionsAnalysisConditionParserRuleCall_9_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_10() { return cRightCurlyBracketKeyword_10; }
	}
	public class AnalysisAspectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.mit.gamma.environment.language.EnvironmentLanguage.AnalysisAspect");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cProbabilityParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cTimedProbabilityParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cTimeBoundedProbabilityParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cMeanTimeParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cFrequencyParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//AnalysisAspect AnalysisModel::AnalysisAspect:
		//	Probability | TimedProbability | TimeBoundedProbability | MeanTime | Frequency;
		@Override public ParserRule getRule() { return rule; }
		
		//Probability | TimedProbability | TimeBoundedProbability | MeanTime | Frequency
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Probability
		public RuleCall getProbabilityParserRuleCall_0() { return cProbabilityParserRuleCall_0; }
		
		//TimedProbability
		public RuleCall getTimedProbabilityParserRuleCall_1() { return cTimedProbabilityParserRuleCall_1; }
		
		//TimeBoundedProbability
		public RuleCall getTimeBoundedProbabilityParserRuleCall_2() { return cTimeBoundedProbabilityParserRuleCall_2; }
		
		//MeanTime
		public RuleCall getMeanTimeParserRuleCall_3() { return cMeanTimeParserRuleCall_3; }
		
		//Frequency
		public RuleCall getFrequencyParserRuleCall_4() { return cFrequencyParserRuleCall_4; }
	}
	public class MeanParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.mit.gamma.environment.language.EnvironmentLanguage.MeanParameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMeanKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cParameterKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cOfKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cEventAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cEventComponentPortEventReferenceParserRuleCall_3_0 = (RuleCall)cEventAssignment_3.eContents().get(0);
		
		//MeanParameter AnalysisModel::MeanParameter:
		//	'mean' 'parameter' 'of' event=ComponentPortEventReference;
		@Override public ParserRule getRule() { return rule; }
		
		//'mean' 'parameter' 'of' event=ComponentPortEventReference
		public Group getGroup() { return cGroup; }
		
		//'mean'
		public Keyword getMeanKeyword_0() { return cMeanKeyword_0; }
		
		//'parameter'
		public Keyword getParameterKeyword_1() { return cParameterKeyword_1; }
		
		//'of'
		public Keyword getOfKeyword_2() { return cOfKeyword_2; }
		
		//event=ComponentPortEventReference
		public Assignment getEventAssignment_3() { return cEventAssignment_3; }
		
		//ComponentPortEventReference
		public RuleCall getEventComponentPortEventReferenceParserRuleCall_3_0() { return cEventComponentPortEventReferenceParserRuleCall_3_0; }
	}
	public class ParameterDistributionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.mit.gamma.environment.language.EnvironmentLanguage.ParameterDistribution");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cParameterKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cDistributionKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cOfKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cEventAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cEventComponentPortEventReferenceParserRuleCall_3_0 = (RuleCall)cEventAssignment_3.eContents().get(0);
		
		//ParameterDistribution AnalysisModel::ParameterDistribution:
		//	'parameter' 'distribution' 'of' event=ComponentPortEventReference;
		@Override public ParserRule getRule() { return rule; }
		
		//'parameter' 'distribution' 'of' event=ComponentPortEventReference
		public Group getGroup() { return cGroup; }
		
		//'parameter'
		public Keyword getParameterKeyword_0() { return cParameterKeyword_0; }
		
		//'distribution'
		public Keyword getDistributionKeyword_1() { return cDistributionKeyword_1; }
		
		//'of'
		public Keyword getOfKeyword_2() { return cOfKeyword_2; }
		
		//event=ComponentPortEventReference
		public Assignment getEventAssignment_3() { return cEventAssignment_3; }
		
		//ComponentPortEventReference
		public RuleCall getEventComponentPortEventReferenceParserRuleCall_3_0() { return cEventComponentPortEventReferenceParserRuleCall_3_0; }
	}
	public class ProbabilityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.mit.gamma.environment.language.EnvironmentLanguage.Probability");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cProbabilityKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cOfKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cEventAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cEventComponentPortEventReferenceParserRuleCall_2_0 = (RuleCall)cEventAssignment_2.eContents().get(0);
		
		//Probability AnalysisModel::Probability:
		//	'probability' 'of' event=ComponentPortEventReference;
		@Override public ParserRule getRule() { return rule; }
		
		//'probability' 'of' event=ComponentPortEventReference
		public Group getGroup() { return cGroup; }
		
		//'probability'
		public Keyword getProbabilityKeyword_0() { return cProbabilityKeyword_0; }
		
		//'of'
		public Keyword getOfKeyword_1() { return cOfKeyword_1; }
		
		//event=ComponentPortEventReference
		public Assignment getEventAssignment_2() { return cEventAssignment_2; }
		
		//ComponentPortEventReference
		public RuleCall getEventComponentPortEventReferenceParserRuleCall_2_0() { return cEventComponentPortEventReferenceParserRuleCall_2_0; }
	}
	public class TimedProbabilityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.mit.gamma.environment.language.EnvironmentLanguage.TimedProbability");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cProbabilityKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cOfKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cEventAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cEventComponentPortEventReferenceParserRuleCall_2_0 = (RuleCall)cEventAssignment_2.eContents().get(0);
		private final Keyword cUntilKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cTimeLimitAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cTimeLimitDOUBLETerminalRuleCall_4_0 = (RuleCall)cTimeLimitAssignment_4.eContents().get(0);
		
		//TimedProbability AnalysisModel::TimedProbability:
		//	'probability' 'of' event=ComponentPortEventReference 'until' timeLimit=DOUBLE;
		@Override public ParserRule getRule() { return rule; }
		
		//'probability' 'of' event=ComponentPortEventReference 'until' timeLimit=DOUBLE
		public Group getGroup() { return cGroup; }
		
		//'probability'
		public Keyword getProbabilityKeyword_0() { return cProbabilityKeyword_0; }
		
		//'of'
		public Keyword getOfKeyword_1() { return cOfKeyword_1; }
		
		//event=ComponentPortEventReference
		public Assignment getEventAssignment_2() { return cEventAssignment_2; }
		
		//ComponentPortEventReference
		public RuleCall getEventComponentPortEventReferenceParserRuleCall_2_0() { return cEventComponentPortEventReferenceParserRuleCall_2_0; }
		
		//'until'
		public Keyword getUntilKeyword_3() { return cUntilKeyword_3; }
		
		//timeLimit=DOUBLE
		public Assignment getTimeLimitAssignment_4() { return cTimeLimitAssignment_4; }
		
		//DOUBLE
		public RuleCall getTimeLimitDOUBLETerminalRuleCall_4_0() { return cTimeLimitDOUBLETerminalRuleCall_4_0; }
	}
	public class TimeBoundedProbabilityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.mit.gamma.environment.language.EnvironmentLanguage.TimeBoundedProbability");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cProbabilityKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cOfKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cEventAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cEventComponentPortEventReferenceParserRuleCall_2_0 = (RuleCall)cEventAssignment_2.eContents().get(0);
		private final Keyword cFromKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cLowerBoundAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cLowerBoundDOUBLETerminalRuleCall_4_0 = (RuleCall)cLowerBoundAssignment_4.eContents().get(0);
		private final Keyword cToKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cUpperBoundAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cUpperBoundDOUBLETerminalRuleCall_6_0 = (RuleCall)cUpperBoundAssignment_6.eContents().get(0);
		
		//TimeBoundedProbability AnalysisModel::TimeBoundedProbability:
		//	'probability' 'of' event=ComponentPortEventReference 'from' lowerBound=DOUBLE 'to' upperBound=DOUBLE;
		@Override public ParserRule getRule() { return rule; }
		
		//'probability' 'of' event=ComponentPortEventReference 'from' lowerBound=DOUBLE 'to' upperBound=DOUBLE
		public Group getGroup() { return cGroup; }
		
		//'probability'
		public Keyword getProbabilityKeyword_0() { return cProbabilityKeyword_0; }
		
		//'of'
		public Keyword getOfKeyword_1() { return cOfKeyword_1; }
		
		//event=ComponentPortEventReference
		public Assignment getEventAssignment_2() { return cEventAssignment_2; }
		
		//ComponentPortEventReference
		public RuleCall getEventComponentPortEventReferenceParserRuleCall_2_0() { return cEventComponentPortEventReferenceParserRuleCall_2_0; }
		
		//'from'
		public Keyword getFromKeyword_3() { return cFromKeyword_3; }
		
		//lowerBound=DOUBLE
		public Assignment getLowerBoundAssignment_4() { return cLowerBoundAssignment_4; }
		
		//DOUBLE
		public RuleCall getLowerBoundDOUBLETerminalRuleCall_4_0() { return cLowerBoundDOUBLETerminalRuleCall_4_0; }
		
		//'to'
		public Keyword getToKeyword_5() { return cToKeyword_5; }
		
		//upperBound=DOUBLE
		public Assignment getUpperBoundAssignment_6() { return cUpperBoundAssignment_6; }
		
		//DOUBLE
		public RuleCall getUpperBoundDOUBLETerminalRuleCall_6_0() { return cUpperBoundDOUBLETerminalRuleCall_6_0; }
	}
	public class MeanTimeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.mit.gamma.environment.language.EnvironmentLanguage.MeanTime");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMeanKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cTimeKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cOfKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cEventAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cEventComponentPortEventReferenceParserRuleCall_3_0 = (RuleCall)cEventAssignment_3.eContents().get(0);
		
		//MeanTime AnalysisModel::MeanTime:
		//	'mean' 'time' 'of' event=ComponentPortEventReference;
		@Override public ParserRule getRule() { return rule; }
		
		//'mean' 'time' 'of' event=ComponentPortEventReference
		public Group getGroup() { return cGroup; }
		
		//'mean'
		public Keyword getMeanKeyword_0() { return cMeanKeyword_0; }
		
		//'time'
		public Keyword getTimeKeyword_1() { return cTimeKeyword_1; }
		
		//'of'
		public Keyword getOfKeyword_2() { return cOfKeyword_2; }
		
		//event=ComponentPortEventReference
		public Assignment getEventAssignment_3() { return cEventAssignment_3; }
		
		//ComponentPortEventReference
		public RuleCall getEventComponentPortEventReferenceParserRuleCall_3_0() { return cEventComponentPortEventReferenceParserRuleCall_3_0; }
	}
	public class FrequencyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.mit.gamma.environment.language.EnvironmentLanguage.Frequency");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFrequencyKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cOfKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cEventAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cEventComponentPortEventReferenceParserRuleCall_2_0 = (RuleCall)cEventAssignment_2.eContents().get(0);
		
		//Frequency AnalysisModel::Frequency:
		//	'frequency' 'of' event=ComponentPortEventReference;
		@Override public ParserRule getRule() { return rule; }
		
		//'frequency' 'of' event=ComponentPortEventReference
		public Group getGroup() { return cGroup; }
		
		//'frequency'
		public Keyword getFrequencyKeyword_0() { return cFrequencyKeyword_0; }
		
		//'of'
		public Keyword getOfKeyword_1() { return cOfKeyword_1; }
		
		//event=ComponentPortEventReference
		public Assignment getEventAssignment_2() { return cEventAssignment_2; }
		
		//ComponentPortEventReference
		public RuleCall getEventComponentPortEventReferenceParserRuleCall_2_0() { return cEventComponentPortEventReferenceParserRuleCall_2_0; }
	}
	public class AssumeRaisedElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.mit.gamma.environment.language.EnvironmentLanguage.AssumeRaised");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAssumeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cEventAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cEventComponentPortEventReferenceParserRuleCall_1_0 = (RuleCall)cEventAssignment_1.eContents().get(0);
		private final Keyword cRaisedKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//AssumeRaised AnalysisModel::AssumeRaised:
		//	'assume' event=ComponentPortEventReference 'raised';
		@Override public ParserRule getRule() { return rule; }
		
		//'assume' event=ComponentPortEventReference 'raised'
		public Group getGroup() { return cGroup; }
		
		//'assume'
		public Keyword getAssumeKeyword_0() { return cAssumeKeyword_0; }
		
		//event=ComponentPortEventReference
		public Assignment getEventAssignment_1() { return cEventAssignment_1; }
		
		//ComponentPortEventReference
		public RuleCall getEventComponentPortEventReferenceParserRuleCall_1_0() { return cEventComponentPortEventReferenceParserRuleCall_1_0; }
		
		//'raised'
		public Keyword getRaisedKeyword_2() { return cRaisedKeyword_2; }
	}
	public class AssumeNotRaisedElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.mit.gamma.environment.language.EnvironmentLanguage.AssumeNotRaised");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAssumeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cEventAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cEventComponentPortEventReferenceParserRuleCall_1_0 = (RuleCall)cEventAssignment_1.eContents().get(0);
		private final Keyword cNotKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cRaisedKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//AssumeNotRaised AnalysisModel::AssumeNotRaised:
		//	'assume' event=ComponentPortEventReference 'not' 'raised';
		@Override public ParserRule getRule() { return rule; }
		
		//'assume' event=ComponentPortEventReference 'not' 'raised'
		public Group getGroup() { return cGroup; }
		
		//'assume'
		public Keyword getAssumeKeyword_0() { return cAssumeKeyword_0; }
		
		//event=ComponentPortEventReference
		public Assignment getEventAssignment_1() { return cEventAssignment_1; }
		
		//ComponentPortEventReference
		public RuleCall getEventComponentPortEventReferenceParserRuleCall_1_0() { return cEventComponentPortEventReferenceParserRuleCall_1_0; }
		
		//'not'
		public Keyword getNotKeyword_2() { return cNotKeyword_2; }
		
		//'raised'
		public Keyword getRaisedKeyword_3() { return cRaisedKeyword_3; }
	}
	public class AnalysisConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.mit.gamma.environment.language.EnvironmentLanguage.AnalysisCondition");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAssumeRaisedParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cAssumeNotRaisedParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//AnalysisCondition AnalysisModel::AnalysisCondition:
		//	AssumeRaised | AssumeNotRaised;
		@Override public ParserRule getRule() { return rule; }
		
		//AssumeRaised | AssumeNotRaised
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//AssumeRaised
		public RuleCall getAssumeRaisedParserRuleCall_0() { return cAssumeRaisedParserRuleCall_0; }
		
		//AssumeNotRaised
		public RuleCall getAssumeNotRaisedParserRuleCall_1() { return cAssumeNotRaisedParserRuleCall_1; }
	}
	public class ComponentPortEventReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.mit.gamma.environment.language.EnvironmentLanguage.ComponentPortEventReference");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEventKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cComponentAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cComponentEnvironmentCompositeComponentInstanceCrossReference_2_0 = (CrossReference)cComponentAssignment_2.eContents().get(0);
		private final RuleCall cComponentEnvironmentCompositeComponentInstanceIDTerminalRuleCall_2_0_1 = (RuleCall)cComponentEnvironmentCompositeComponentInstanceCrossReference_2_0.eContents().get(1);
		private final Keyword cFullStopKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cPortAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cPortPortCrossReference_4_0 = (CrossReference)cPortAssignment_4.eContents().get(0);
		private final RuleCall cPortPortIDTerminalRuleCall_4_0_1 = (RuleCall)cPortPortCrossReference_4_0.eContents().get(1);
		private final Keyword cFullStopKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cEventAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final CrossReference cEventEventCrossReference_6_0 = (CrossReference)cEventAssignment_6.eContents().get(0);
		private final RuleCall cEventEventIDTerminalRuleCall_6_0_1 = (RuleCall)cEventEventCrossReference_6_0.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//ComponentPortEventReference AnalysisModel::ComponentPortEventReference:
		//	'event' '[' component=[EnvironmentModel::EnvironmentCompositeComponentInstance] '.' port=[InterfaceModel::Port] '.'
		//	event=[InterfaceModel::Event] ']';
		@Override public ParserRule getRule() { return rule; }
		
		//'event' '[' component=[EnvironmentModel::EnvironmentCompositeComponentInstance] '.' port=[InterfaceModel::Port] '.'
		//event=[InterfaceModel::Event] ']'
		public Group getGroup() { return cGroup; }
		
		//'event'
		public Keyword getEventKeyword_0() { return cEventKeyword_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1() { return cLeftSquareBracketKeyword_1; }
		
		//component=[EnvironmentModel::EnvironmentCompositeComponentInstance]
		public Assignment getComponentAssignment_2() { return cComponentAssignment_2; }
		
		//[EnvironmentModel::EnvironmentCompositeComponentInstance]
		public CrossReference getComponentEnvironmentCompositeComponentInstanceCrossReference_2_0() { return cComponentEnvironmentCompositeComponentInstanceCrossReference_2_0; }
		
		//ID
		public RuleCall getComponentEnvironmentCompositeComponentInstanceIDTerminalRuleCall_2_0_1() { return cComponentEnvironmentCompositeComponentInstanceIDTerminalRuleCall_2_0_1; }
		
		//'.'
		public Keyword getFullStopKeyword_3() { return cFullStopKeyword_3; }
		
		//port=[InterfaceModel::Port]
		public Assignment getPortAssignment_4() { return cPortAssignment_4; }
		
		//[InterfaceModel::Port]
		public CrossReference getPortPortCrossReference_4_0() { return cPortPortCrossReference_4_0; }
		
		//ID
		public RuleCall getPortPortIDTerminalRuleCall_4_0_1() { return cPortPortIDTerminalRuleCall_4_0_1; }
		
		//'.'
		public Keyword getFullStopKeyword_5() { return cFullStopKeyword_5; }
		
		//event=[InterfaceModel::Event]
		public Assignment getEventAssignment_6() { return cEventAssignment_6; }
		
		//[InterfaceModel::Event]
		public CrossReference getEventEventCrossReference_6_0() { return cEventEventCrossReference_6_0; }
		
		//ID
		public RuleCall getEventEventIDTerminalRuleCall_6_0_1() { return cEventEventIDTerminalRuleCall_6_0_1; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_7() { return cRightSquareBracketKeyword_7; }
	}
	public class EnvironmentCompositeComponentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.mit.gamma.environment.language.EnvironmentLanguage.EnvironmentCompositeComponent");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEnvironmentKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Assignment cParameterDeclarationsAssignment_2_1_0 = (Assignment)cGroup_2_1.eContents().get(0);
		private final RuleCall cParameterDeclarationsParameterDeclarationParserRuleCall_2_1_0_0 = (RuleCall)cParameterDeclarationsAssignment_2_1_0.eContents().get(0);
		private final Group cGroup_2_1_1 = (Group)cGroup_2_1.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_1_0 = (Keyword)cGroup_2_1_1.eContents().get(0);
		private final Assignment cParameterDeclarationsAssignment_2_1_1_1 = (Assignment)cGroup_2_1_1.eContents().get(1);
		private final RuleCall cParameterDeclarationsParameterDeclarationParserRuleCall_2_1_1_1_0 = (RuleCall)cParameterDeclarationsAssignment_2_1_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftSquareBracketKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Assignment cPortsAssignment_3_1_0 = (Assignment)cGroup_3_1.eContents().get(0);
		private final RuleCall cPortsPortParserRuleCall_3_1_0_0 = (RuleCall)cPortsAssignment_3_1_0.eContents().get(0);
		private final Group cGroup_3_1_1 = (Group)cGroup_3_1.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_1_0 = (Keyword)cGroup_3_1_1.eContents().get(0);
		private final Assignment cPortsAssignment_3_1_1_1 = (Assignment)cGroup_3_1_1.eContents().get(1);
		private final RuleCall cPortsPortParserRuleCall_3_1_1_1_0 = (RuleCall)cPortsAssignment_3_1_1_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Alternatives cAlternatives_5 = (Alternatives)cGroup.eContents().get(5);
		private final Assignment cComponentsAssignment_5_0 = (Assignment)cAlternatives_5.eContents().get(0);
		private final RuleCall cComponentsSynchronousComponentInstanceParserRuleCall_5_0_0 = (RuleCall)cComponentsAssignment_5_0.eContents().get(0);
		private final Assignment cEnvironmentComponentsAssignment_5_1 = (Assignment)cAlternatives_5.eContents().get(1);
		private final RuleCall cEnvironmentComponentsEnvironmentComponentInstanceParserRuleCall_5_1_0 = (RuleCall)cEnvironmentComponentsAssignment_5_1.eContents().get(0);
		private final Assignment cPortBindingsAssignment_5_2 = (Assignment)cAlternatives_5.eContents().get(2);
		private final RuleCall cPortBindingsPortBindingParserRuleCall_5_2_0 = (RuleCall)cPortBindingsAssignment_5_2.eContents().get(0);
		private final Assignment cChannelsAssignment_5_3 = (Assignment)cAlternatives_5.eContents().get(3);
		private final RuleCall cChannelsChannelParserRuleCall_5_3_0 = (RuleCall)cChannelsAssignment_5_3.eContents().get(0);
		private final Group cGroup_5_4 = (Group)cAlternatives_5.eContents().get(4);
		private final Keyword cFailureKeyword_5_4_0 = (Keyword)cGroup_5_4.eContents().get(0);
		private final Keyword cPropagationKeyword_5_4_1 = (Keyword)cGroup_5_4.eContents().get(1);
		private final Assignment cExecutionListAssignment_5_4_2 = (Assignment)cGroup_5_4.eContents().get(2);
		private final CrossReference cExecutionListSynchronousComponentInstanceCrossReference_5_4_2_0 = (CrossReference)cExecutionListAssignment_5_4_2.eContents().get(0);
		private final RuleCall cExecutionListSynchronousComponentInstanceIDTerminalRuleCall_5_4_2_0_1 = (RuleCall)cExecutionListSynchronousComponentInstanceCrossReference_5_4_2_0.eContents().get(1);
		private final Group cGroup_5_4_3 = (Group)cGroup_5_4.eContents().get(3);
		private final Keyword cCommaKeyword_5_4_3_0 = (Keyword)cGroup_5_4_3.eContents().get(0);
		private final Assignment cExecutionListAssignment_5_4_3_1 = (Assignment)cGroup_5_4_3.eContents().get(1);
		private final CrossReference cExecutionListSynchronousComponentInstanceCrossReference_5_4_3_1_0 = (CrossReference)cExecutionListAssignment_5_4_3_1.eContents().get(0);
		private final RuleCall cExecutionListSynchronousComponentInstanceIDTerminalRuleCall_5_4_3_1_0_1 = (RuleCall)cExecutionListSynchronousComponentInstanceCrossReference_5_4_3_1_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		////defining Environment models
		//EnvironmentCompositeComponent EnvironmentModel::EnvironmentCompositeComponent:
		//	'environment' name=ID ('(' (parameterDeclarations+=ParameterDeclaration (','
		//	parameterDeclarations+=ParameterDeclaration)*)? ')')? ('[' (ports+=Port (','? ports+=Port)*)? ']')?
		//	'{' (components+=SynchronousComponentInstance | environmentComponents+=EnvironmentComponentInstance |
		//	portBindings+=PortBinding | channels+=Channel |
		//	'failure' 'propagation' executionList+=[CompositeModel::SynchronousComponentInstance] (','
		//	executionList+=[CompositeModel::SynchronousComponentInstance])*)*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'environment' name=ID ('(' (parameterDeclarations+=ParameterDeclaration (','
		//parameterDeclarations+=ParameterDeclaration)*)? ')')? ('[' (ports+=Port (','? ports+=Port)*)? ']')?
		//'{' (components+=SynchronousComponentInstance | environmentComponents+=EnvironmentComponentInstance |
		//portBindings+=PortBinding | channels+=Channel |
		//'failure' 'propagation' executionList+=[CompositeModel::SynchronousComponentInstance] (','
		//executionList+=[CompositeModel::SynchronousComponentInstance])*)*
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'environment'
		public Keyword getEnvironmentKeyword_0() { return cEnvironmentKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//('(' (parameterDeclarations+=ParameterDeclaration (',' parameterDeclarations+=ParameterDeclaration)*)? ')')?
		public Group getGroup_2() { return cGroup_2; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }
		
		//(parameterDeclarations+=ParameterDeclaration (',' parameterDeclarations+=ParameterDeclaration)*)?
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//parameterDeclarations+=ParameterDeclaration
		public Assignment getParameterDeclarationsAssignment_2_1_0() { return cParameterDeclarationsAssignment_2_1_0; }
		
		//ParameterDeclaration
		public RuleCall getParameterDeclarationsParameterDeclarationParserRuleCall_2_1_0_0() { return cParameterDeclarationsParameterDeclarationParserRuleCall_2_1_0_0; }
		
		//(',' parameterDeclarations+=ParameterDeclaration)*
		public Group getGroup_2_1_1() { return cGroup_2_1_1; }
		
		//','
		public Keyword getCommaKeyword_2_1_1_0() { return cCommaKeyword_2_1_1_0; }
		
		//parameterDeclarations+=ParameterDeclaration
		public Assignment getParameterDeclarationsAssignment_2_1_1_1() { return cParameterDeclarationsAssignment_2_1_1_1; }
		
		//ParameterDeclaration
		public RuleCall getParameterDeclarationsParameterDeclarationParserRuleCall_2_1_1_1_0() { return cParameterDeclarationsParameterDeclarationParserRuleCall_2_1_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2_2() { return cRightParenthesisKeyword_2_2; }
		
		//('[' (ports+=Port (','? ports+=Port)*)? ']')?
		public Group getGroup_3() { return cGroup_3; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_3_0() { return cLeftSquareBracketKeyword_3_0; }
		
		//(ports+=Port (','? ports+=Port)*)?
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//ports+=Port
		public Assignment getPortsAssignment_3_1_0() { return cPortsAssignment_3_1_0; }
		
		//Port
		public RuleCall getPortsPortParserRuleCall_3_1_0_0() { return cPortsPortParserRuleCall_3_1_0_0; }
		
		//(','? ports+=Port)*
		public Group getGroup_3_1_1() { return cGroup_3_1_1; }
		
		//','?
		public Keyword getCommaKeyword_3_1_1_0() { return cCommaKeyword_3_1_1_0; }
		
		//ports+=Port
		public Assignment getPortsAssignment_3_1_1_1() { return cPortsAssignment_3_1_1_1; }
		
		//Port
		public RuleCall getPortsPortParserRuleCall_3_1_1_1_0() { return cPortsPortParserRuleCall_3_1_1_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_3_2() { return cRightSquareBracketKeyword_3_2; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }
		
		//(components+=SynchronousComponentInstance | environmentComponents+=EnvironmentComponentInstance |
		//portBindings+=PortBinding | channels+=Channel |
		//'failure' 'propagation' executionList+=[CompositeModel::SynchronousComponentInstance] (','
		//executionList+=[CompositeModel::SynchronousComponentInstance])*)*
		public Alternatives getAlternatives_5() { return cAlternatives_5; }
		
		//components+=SynchronousComponentInstance
		public Assignment getComponentsAssignment_5_0() { return cComponentsAssignment_5_0; }
		
		//SynchronousComponentInstance
		public RuleCall getComponentsSynchronousComponentInstanceParserRuleCall_5_0_0() { return cComponentsSynchronousComponentInstanceParserRuleCall_5_0_0; }
		
		//environmentComponents+=EnvironmentComponentInstance
		public Assignment getEnvironmentComponentsAssignment_5_1() { return cEnvironmentComponentsAssignment_5_1; }
		
		//EnvironmentComponentInstance
		public RuleCall getEnvironmentComponentsEnvironmentComponentInstanceParserRuleCall_5_1_0() { return cEnvironmentComponentsEnvironmentComponentInstanceParserRuleCall_5_1_0; }
		
		//portBindings+=PortBinding
		public Assignment getPortBindingsAssignment_5_2() { return cPortBindingsAssignment_5_2; }
		
		//PortBinding
		public RuleCall getPortBindingsPortBindingParserRuleCall_5_2_0() { return cPortBindingsPortBindingParserRuleCall_5_2_0; }
		
		//channels+=Channel
		public Assignment getChannelsAssignment_5_3() { return cChannelsAssignment_5_3; }
		
		//Channel
		public RuleCall getChannelsChannelParserRuleCall_5_3_0() { return cChannelsChannelParserRuleCall_5_3_0; }
		
		//'failure' 'propagation' executionList+=[CompositeModel::SynchronousComponentInstance] (','
		//executionList+=[CompositeModel::SynchronousComponentInstance])*
		public Group getGroup_5_4() { return cGroup_5_4; }
		
		//'failure'
		public Keyword getFailureKeyword_5_4_0() { return cFailureKeyword_5_4_0; }
		
		//'propagation'
		public Keyword getPropagationKeyword_5_4_1() { return cPropagationKeyword_5_4_1; }
		
		//executionList+=[CompositeModel::SynchronousComponentInstance]
		public Assignment getExecutionListAssignment_5_4_2() { return cExecutionListAssignment_5_4_2; }
		
		//[CompositeModel::SynchronousComponentInstance]
		public CrossReference getExecutionListSynchronousComponentInstanceCrossReference_5_4_2_0() { return cExecutionListSynchronousComponentInstanceCrossReference_5_4_2_0; }
		
		//ID
		public RuleCall getExecutionListSynchronousComponentInstanceIDTerminalRuleCall_5_4_2_0_1() { return cExecutionListSynchronousComponentInstanceIDTerminalRuleCall_5_4_2_0_1; }
		
		//(',' executionList+=[CompositeModel::SynchronousComponentInstance])*
		public Group getGroup_5_4_3() { return cGroup_5_4_3; }
		
		//','
		public Keyword getCommaKeyword_5_4_3_0() { return cCommaKeyword_5_4_3_0; }
		
		//executionList+=[CompositeModel::SynchronousComponentInstance]
		public Assignment getExecutionListAssignment_5_4_3_1() { return cExecutionListAssignment_5_4_3_1; }
		
		//[CompositeModel::SynchronousComponentInstance]
		public CrossReference getExecutionListSynchronousComponentInstanceCrossReference_5_4_3_1_0() { return cExecutionListSynchronousComponentInstanceCrossReference_5_4_3_1_0; }
		
		//ID
		public RuleCall getExecutionListSynchronousComponentInstanceIDTerminalRuleCall_5_4_3_1_0_1() { return cExecutionListSynchronousComponentInstanceIDTerminalRuleCall_5_4_3_1_0_1; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class EnvironmentComponentInstanceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.mit.gamma.environment.language.EnvironmentLanguage.EnvironmentComponentInstance");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cElementaryEnvironmentComponentInstanceParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cEnvironmentCompositeComponentInstanceParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		///* 
		// * @Override
		// * Package returns StatechartModel::Package:
		// * 	super
		// ;*/
		//// Composition language 
		//EnvironmentComponentInstance EnvironmentModel::EnvironmentComponentInstance:
		//	ElementaryEnvironmentComponentInstance | EnvironmentCompositeComponentInstance;
		@Override public ParserRule getRule() { return rule; }
		
		//ElementaryEnvironmentComponentInstance | EnvironmentCompositeComponentInstance
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ElementaryEnvironmentComponentInstance
		public RuleCall getElementaryEnvironmentComponentInstanceParserRuleCall_0() { return cElementaryEnvironmentComponentInstanceParserRuleCall_0; }
		
		//EnvironmentCompositeComponentInstance
		public RuleCall getEnvironmentCompositeComponentInstanceParserRuleCall_1() { return cEnvironmentCompositeComponentInstanceParserRuleCall_1; }
	}
	public class ElementaryEnvironmentComponentInstanceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.mit.gamma.environment.language.EnvironmentLanguage.ElementaryEnvironmentComponentInstance");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cEnvironementEventSourceParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cPeriodicEnvironementEventSourceParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cEnvironmentDelayParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cEnvironmentSampleParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cEnvironmentSwitchParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cEnvironmentExternSimulationParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		//ElementaryEnvironmentComponentInstance EnvironmentModel::ElementaryEnvironmentComponentInstance:
		//	EnvironementEventSource | PeriodicEnvironementEventSource | EnvironmentDelay | EnvironmentSample | EnvironmentSwitch
		//	| EnvironmentExternSimulation;
		@Override public ParserRule getRule() { return rule; }
		
		//EnvironementEventSource | PeriodicEnvironementEventSource | EnvironmentDelay | EnvironmentSample | EnvironmentSwitch
		//| EnvironmentExternSimulation
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//EnvironementEventSource
		public RuleCall getEnvironementEventSourceParserRuleCall_0() { return cEnvironementEventSourceParserRuleCall_0; }
		
		//PeriodicEnvironementEventSource
		public RuleCall getPeriodicEnvironementEventSourceParserRuleCall_1() { return cPeriodicEnvironementEventSourceParserRuleCall_1; }
		
		//EnvironmentDelay
		public RuleCall getEnvironmentDelayParserRuleCall_2() { return cEnvironmentDelayParserRuleCall_2; }
		
		//EnvironmentSample
		public RuleCall getEnvironmentSampleParserRuleCall_3() { return cEnvironmentSampleParserRuleCall_3; }
		
		//EnvironmentSwitch
		public RuleCall getEnvironmentSwitchParserRuleCall_4() { return cEnvironmentSwitchParserRuleCall_4; }
		
		//EnvironmentExternSimulation
		public RuleCall getEnvironmentExternSimulationParserRuleCall_5() { return cEnvironmentExternSimulationParserRuleCall_5; }
	}
	public class EnvironmentCompositeComponentInstanceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.mit.gamma.environment.language.EnvironmentLanguage.EnvironmentCompositeComponentInstance");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEnvironmentKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cComponentKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cTypeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cTypeEnvironmentCompositeComponentCrossReference_4_0 = (CrossReference)cTypeAssignment_4.eContents().get(0);
		private final RuleCall cTypeEnvironmentCompositeComponentIDTerminalRuleCall_4_0_1 = (RuleCall)cTypeEnvironmentCompositeComponentCrossReference_4_0.eContents().get(1);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cLeftParenthesisKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cArgumentsAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cArgumentsExpressionParserRuleCall_5_1_0 = (RuleCall)cArgumentsAssignment_5_1.eContents().get(0);
		private final Group cGroup_5_2 = (Group)cGroup_5.eContents().get(2);
		private final Keyword cCommaKeyword_5_2_0 = (Keyword)cGroup_5_2.eContents().get(0);
		private final Assignment cArgumentsAssignment_5_2_1 = (Assignment)cGroup_5_2.eContents().get(1);
		private final RuleCall cArgumentsExpressionParserRuleCall_5_2_1_0 = (RuleCall)cArgumentsAssignment_5_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5_3 = (Keyword)cGroup_5.eContents().get(3);
		
		//EnvironmentCompositeComponentInstance EnvironmentModel::EnvironmentCompositeComponentInstance:
		//	'environment' 'component' name=ID ':' type=[EnvironmentModel::EnvironmentCompositeComponent] ('('
		//	arguments+=Expression (',' arguments+=Expression)* ')')?;
		@Override public ParserRule getRule() { return rule; }
		
		//'environment' 'component' name=ID ':' type=[EnvironmentModel::EnvironmentCompositeComponent] ('('
		//arguments+=Expression (',' arguments+=Expression)* ')')?
		public Group getGroup() { return cGroup; }
		
		//'environment'
		public Keyword getEnvironmentKeyword_0() { return cEnvironmentKeyword_0; }
		
		//'component'
		public Keyword getComponentKeyword_1() { return cComponentKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//':'
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }
		
		//type=[EnvironmentModel::EnvironmentCompositeComponent]
		public Assignment getTypeAssignment_4() { return cTypeAssignment_4; }
		
		//[EnvironmentModel::EnvironmentCompositeComponent]
		public CrossReference getTypeEnvironmentCompositeComponentCrossReference_4_0() { return cTypeEnvironmentCompositeComponentCrossReference_4_0; }
		
		//ID
		public RuleCall getTypeEnvironmentCompositeComponentIDTerminalRuleCall_4_0_1() { return cTypeEnvironmentCompositeComponentIDTerminalRuleCall_4_0_1; }
		
		//('(' arguments+=Expression (',' arguments+=Expression)* ')')?
		public Group getGroup_5() { return cGroup_5; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_5_0() { return cLeftParenthesisKeyword_5_0; }
		
		//arguments+=Expression
		public Assignment getArgumentsAssignment_5_1() { return cArgumentsAssignment_5_1; }
		
		//Expression
		public RuleCall getArgumentsExpressionParserRuleCall_5_1_0() { return cArgumentsExpressionParserRuleCall_5_1_0; }
		
		//(',' arguments+=Expression)*
		public Group getGroup_5_2() { return cGroup_5_2; }
		
		//','
		public Keyword getCommaKeyword_5_2_0() { return cCommaKeyword_5_2_0; }
		
		//arguments+=Expression
		public Assignment getArgumentsAssignment_5_2_1() { return cArgumentsAssignment_5_2_1; }
		
		//Expression
		public RuleCall getArgumentsExpressionParserRuleCall_5_2_1_0() { return cArgumentsExpressionParserRuleCall_5_2_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5_3() { return cRightParenthesisKeyword_5_3; }
	}
	public class StochasticRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.mit.gamma.environment.language.EnvironmentLanguage.StochasticRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cFilterAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cFilterFilterParserRuleCall_0_0_0 = (RuleCall)cFilterAssignment_0_0.eContents().get(0);
		private final Keyword cCommaKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cFilterAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFilterFilterParserRuleCall_1_0 = (RuleCall)cFilterAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cStochasticModelAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cStochasticModelStochasticModelParserRuleCall_3_0 = (RuleCall)cStochasticModelAssignment_3.eContents().get(0);
		
		//StochasticRule EnvironmentModel::StochasticRule:
		//	(filter+=Filter ",")* filter+=Filter ":" stochasticModel=StochasticModel;
		@Override public ParserRule getRule() { return rule; }
		
		//(filter+=Filter ",")* filter+=Filter ":" stochasticModel=StochasticModel
		public Group getGroup() { return cGroup; }
		
		//(filter+=Filter ",")*
		public Group getGroup_0() { return cGroup_0; }
		
		//filter+=Filter
		public Assignment getFilterAssignment_0_0() { return cFilterAssignment_0_0; }
		
		//Filter
		public RuleCall getFilterFilterParserRuleCall_0_0_0() { return cFilterFilterParserRuleCall_0_0_0; }
		
		//","
		public Keyword getCommaKeyword_0_1() { return cCommaKeyword_0_1; }
		
		//filter+=Filter
		public Assignment getFilterAssignment_1() { return cFilterAssignment_1; }
		
		//Filter
		public RuleCall getFilterFilterParserRuleCall_1_0() { return cFilterFilterParserRuleCall_1_0; }
		
		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//stochasticModel=StochasticModel
		public Assignment getStochasticModelAssignment_3() { return cStochasticModelAssignment_3; }
		
		//StochasticModel
		public RuleCall getStochasticModelStochasticModelParserRuleCall_3_0() { return cStochasticModelStochasticModelParserRuleCall_3_0; }
	}
	public class FilterSimulationRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.mit.gamma.environment.language.EnvironmentLanguage.FilterSimulationRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cFilterAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cFilterFilterParserRuleCall_0_0_0 = (RuleCall)cFilterAssignment_0_0.eContents().get(0);
		private final Keyword cCommaKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cFilterAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFilterFilterParserRuleCall_1_0 = (RuleCall)cFilterAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cSimulationAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cSimulationSimulationParserRuleCall_3_0 = (RuleCall)cSimulationAssignment_3.eContents().get(0);
		
		//FilterSimulationRule EnvironmentModel::SimulationRule:
		//	(filter+=Filter ",")* filter+=Filter ":" simulation=Simulation;
		@Override public ParserRule getRule() { return rule; }
		
		//(filter+=Filter ",")* filter+=Filter ":" simulation=Simulation
		public Group getGroup() { return cGroup; }
		
		//(filter+=Filter ",")*
		public Group getGroup_0() { return cGroup_0; }
		
		//filter+=Filter
		public Assignment getFilterAssignment_0_0() { return cFilterAssignment_0_0; }
		
		//Filter
		public RuleCall getFilterFilterParserRuleCall_0_0_0() { return cFilterFilterParserRuleCall_0_0_0; }
		
		//","
		public Keyword getCommaKeyword_0_1() { return cCommaKeyword_0_1; }
		
		//filter+=Filter
		public Assignment getFilterAssignment_1() { return cFilterAssignment_1; }
		
		//Filter
		public RuleCall getFilterFilterParserRuleCall_1_0() { return cFilterFilterParserRuleCall_1_0; }
		
		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//simulation=Simulation
		public Assignment getSimulationAssignment_3() { return cSimulationAssignment_3; }
		
		//Simulation
		public RuleCall getSimulationSimulationParserRuleCall_3_0() { return cSimulationSimulationParserRuleCall_3_0; }
	}
	public class SwitchRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.mit.gamma.environment.language.EnvironmentLanguage.SwitchRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFilterAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cFilterPortFilterParserRuleCall_0_0 = (RuleCall)cFilterAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cStochasticModelAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStochasticModelCategoricalProbabailityParserRuleCall_2_0 = (RuleCall)cStochasticModelAssignment_2.eContents().get(0);
		
		//SwitchRule EnvironmentModel::StochasticRule:
		//	filter+=PortFilter ':' stochasticModel=CategoricalProbabaility;
		@Override public ParserRule getRule() { return rule; }
		
		//filter+=PortFilter ':' stochasticModel=CategoricalProbabaility
		public Group getGroup() { return cGroup; }
		
		//filter+=PortFilter
		public Assignment getFilterAssignment_0() { return cFilterAssignment_0; }
		
		//PortFilter
		public RuleCall getFilterPortFilterParserRuleCall_0_0() { return cFilterPortFilterParserRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//stochasticModel=CategoricalProbabaility
		public Assignment getStochasticModelAssignment_2() { return cStochasticModelAssignment_2; }
		
		//CategoricalProbabaility
		public RuleCall getStochasticModelCategoricalProbabailityParserRuleCall_2_0() { return cStochasticModelCategoricalProbabailityParserRuleCall_2_0; }
	}
	public class DelayRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.mit.gamma.environment.language.EnvironmentLanguage.DelayRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Assignment cFilterAssignment_0_0 = (Assignment)cAlternatives_0.eContents().get(0);
		private final RuleCall cFilterPortFilterParserRuleCall_0_0_0 = (RuleCall)cFilterAssignment_0_0.eContents().get(0);
		private final Assignment cFilterAssignment_0_1 = (Assignment)cAlternatives_0.eContents().get(1);
		private final RuleCall cFilterComponentFilterParserRuleCall_0_1_0 = (RuleCall)cFilterAssignment_0_1.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cStochasticModelAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cStochasticModelContinouosRandomVariableParserRuleCall_2_0_0 = (RuleCall)cStochasticModelAssignment_2_0.eContents().get(0);
		private final Assignment cStochasticModelAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final RuleCall cStochasticModelStochasticProcessParserRuleCall_2_1_0 = (RuleCall)cStochasticModelAssignment_2_1.eContents().get(0);
		
		//DelayRule EnvironmentModel::StochasticRule:
		//	(filter+=PortFilter | filter+=ComponentFilter) ':' (stochasticModel=ContinouosRandomVariable |
		//	stochasticModel=StochasticProcess);
		@Override public ParserRule getRule() { return rule; }
		
		//(filter+=PortFilter | filter+=ComponentFilter) ':' (stochasticModel=ContinouosRandomVariable |
		//stochasticModel=StochasticProcess)
		public Group getGroup() { return cGroup; }
		
		//(filter+=PortFilter | filter+=ComponentFilter)
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//filter+=PortFilter
		public Assignment getFilterAssignment_0_0() { return cFilterAssignment_0_0; }
		
		//PortFilter
		public RuleCall getFilterPortFilterParserRuleCall_0_0_0() { return cFilterPortFilterParserRuleCall_0_0_0; }
		
		//filter+=ComponentFilter
		public Assignment getFilterAssignment_0_1() { return cFilterAssignment_0_1; }
		
		//ComponentFilter
		public RuleCall getFilterComponentFilterParserRuleCall_0_1_0() { return cFilterComponentFilterParserRuleCall_0_1_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//(stochasticModel=ContinouosRandomVariable | stochasticModel=StochasticProcess)
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//stochasticModel=ContinouosRandomVariable
		public Assignment getStochasticModelAssignment_2_0() { return cStochasticModelAssignment_2_0; }
		
		//ContinouosRandomVariable
		public RuleCall getStochasticModelContinouosRandomVariableParserRuleCall_2_0_0() { return cStochasticModelContinouosRandomVariableParserRuleCall_2_0_0; }
		
		//stochasticModel=StochasticProcess
		public Assignment getStochasticModelAssignment_2_1() { return cStochasticModelAssignment_2_1; }
		
		//StochasticProcess
		public RuleCall getStochasticModelStochasticProcessParserRuleCall_2_1_0() { return cStochasticModelStochasticProcessParserRuleCall_2_1_0; }
	}
	public class FilterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.mit.gamma.environment.language.EnvironmentLanguage.Filter");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cEventFilterParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cPortFilterParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cComponentFilterParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Filter EnvironmentModel::Filter:
		//	EventFilter | PortFilter | ComponentFilter;
		@Override public ParserRule getRule() { return rule; }
		
		//EventFilter | PortFilter | ComponentFilter
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//EventFilter
		public RuleCall getEventFilterParserRuleCall_0() { return cEventFilterParserRuleCall_0; }
		
		//PortFilter
		public RuleCall getPortFilterParserRuleCall_1() { return cPortFilterParserRuleCall_1; }
		
		//ComponentFilter
		public RuleCall getComponentFilterParserRuleCall_2() { return cComponentFilterParserRuleCall_2; }
	}
	public class EventFilterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.mit.gamma.environment.language.EnvironmentLanguage.EventFilter");
		private final Assignment cEventAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cEventPortEventReferenceParserRuleCall_0 = (RuleCall)cEventAssignment.eContents().get(0);
		
		//EventFilter EnvironmentModel::EventFilter:
		//	event=PortEventReference;
		@Override public ParserRule getRule() { return rule; }
		
		//event=PortEventReference
		public Assignment getEventAssignment() { return cEventAssignment; }
		
		//PortEventReference
		public RuleCall getEventPortEventReferenceParserRuleCall_0() { return cEventPortEventReferenceParserRuleCall_0; }
	}
	public class PortFilterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.mit.gamma.environment.language.EnvironmentLanguage.PortFilter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPortAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cPortPortCrossReference_0_0 = (CrossReference)cPortAssignment_0.eContents().get(0);
		private final RuleCall cPortPortIDTerminalRuleCall_0_0_1 = (RuleCall)cPortPortCrossReference_0_0.eContents().get(1);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cAsteriskKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//PortFilter EnvironmentModel::PortFilter:
		//	port=[InterfaceModel::Port] "." "*";
		@Override public ParserRule getRule() { return rule; }
		
		//port=[InterfaceModel::Port] "." "*"
		public Group getGroup() { return cGroup; }
		
		//port=[InterfaceModel::Port]
		public Assignment getPortAssignment_0() { return cPortAssignment_0; }
		
		//[InterfaceModel::Port]
		public CrossReference getPortPortCrossReference_0_0() { return cPortPortCrossReference_0_0; }
		
		//ID
		public RuleCall getPortPortIDTerminalRuleCall_0_0_1() { return cPortPortIDTerminalRuleCall_0_0_1; }
		
		//"."
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }
		
		//"*"
		public Keyword getAsteriskKeyword_2() { return cAsteriskKeyword_2; }
	}
	public class ComponentFilterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.mit.gamma.environment.language.EnvironmentLanguage.ComponentFilter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cComponentFilterAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cAsteriskKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cAsteriskKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ComponentFilter EnvironmentModel::ComponentFilter:
		//	{EnvironmentModel::ComponentFilter} "*" "." "*";
		@Override public ParserRule getRule() { return rule; }
		
		//{EnvironmentModel::ComponentFilter} "*" "." "*"
		public Group getGroup() { return cGroup; }
		
		//{EnvironmentModel::ComponentFilter}
		public Action getComponentFilterAction_0() { return cComponentFilterAction_0; }
		
		//"*"
		public Keyword getAsteriskKeyword_1() { return cAsteriskKeyword_1; }
		
		//"."
		public Keyword getFullStopKeyword_2() { return cFullStopKeyword_2; }
		
		//"*"
		public Keyword getAsteriskKeyword_3() { return cAsteriskKeyword_3; }
	}
	public class SimulationRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.mit.gamma.environment.language.EnvironmentLanguage.SimulationRule");
		private final Assignment cSimulationAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cSimulationSimulationParserRuleCall_0 = (RuleCall)cSimulationAssignment.eContents().get(0);
		
		//SimulationRule EnvironmentModel::SimulationRule:
		//	simulation=Simulation;
		@Override public ParserRule getRule() { return rule; }
		
		//simulation=Simulation
		public Assignment getSimulationAssignment() { return cSimulationAssignment; }
		
		//Simulation
		public RuleCall getSimulationSimulationParserRuleCall_0() { return cSimulationSimulationParserRuleCall_0; }
	}
	public class SimulationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.mit.gamma.environment.language.EnvironmentLanguage.Simulation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cClassKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cSimulationClassNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSimulationClassNameSTRINGTerminalRuleCall_2_0 = (RuleCall)cSimulationClassNameAssignment_2.eContents().get(0);
		
		//Simulation EnvironmentModel::Simulation:
		//	"class" "=" simulationClassName=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//"class" "=" simulationClassName=STRING
		public Group getGroup() { return cGroup; }
		
		//"class"
		public Keyword getClassKeyword_0() { return cClassKeyword_0; }
		
		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//simulationClassName=STRING
		public Assignment getSimulationClassNameAssignment_2() { return cSimulationClassNameAssignment_2; }
		
		//STRING
		public RuleCall getSimulationClassNameSTRINGTerminalRuleCall_2_0() { return cSimulationClassNameSTRINGTerminalRuleCall_2_0; }
	}
	public class EnvironementEventSourceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.mit.gamma.environment.language.EnvironmentLanguage.EnvironementEventSource");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSourceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cOutportsAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cOutportsPortParserRuleCall_2_0_0 = (RuleCall)cOutportsAssignment_2_0.eContents().get(0);
		private final Keyword cCommaKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cOutportsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cOutportsPortParserRuleCall_3_0 = (RuleCall)cOutportsAssignment_3.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Assignment cBehaviorRulesAssignment_5_0 = (Assignment)cGroup_5.eContents().get(0);
		private final RuleCall cBehaviorRulesStochasticRuleParserRuleCall_5_0_0 = (RuleCall)cBehaviorRulesAssignment_5_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//EnvironementEventSource EnvironmentModel::EnvironmentEventSource:
		//	'source' name=ID (outports+=Port ",")* outports+=Port "{" (behaviorRules+=StochasticRule ";")+
		//	"}";
		@Override public ParserRule getRule() { return rule; }
		
		//'source' name=ID (outports+=Port ",")* outports+=Port "{" (behaviorRules+=StochasticRule ";")+
		//"}"
		public Group getGroup() { return cGroup; }
		
		//'source'
		public Keyword getSourceKeyword_0() { return cSourceKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//(outports+=Port ",")*
		public Group getGroup_2() { return cGroup_2; }
		
		//outports+=Port
		public Assignment getOutportsAssignment_2_0() { return cOutportsAssignment_2_0; }
		
		//Port
		public RuleCall getOutportsPortParserRuleCall_2_0_0() { return cOutportsPortParserRuleCall_2_0_0; }
		
		//","
		public Keyword getCommaKeyword_2_1() { return cCommaKeyword_2_1; }
		
		//outports+=Port
		public Assignment getOutportsAssignment_3() { return cOutportsAssignment_3; }
		
		//Port
		public RuleCall getOutportsPortParserRuleCall_3_0() { return cOutportsPortParserRuleCall_3_0; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }
		
		//(behaviorRules+=StochasticRule ";")+
		public Group getGroup_5() { return cGroup_5; }
		
		//behaviorRules+=StochasticRule
		public Assignment getBehaviorRulesAssignment_5_0() { return cBehaviorRulesAssignment_5_0; }
		
		//StochasticRule
		public RuleCall getBehaviorRulesStochasticRuleParserRuleCall_5_0_0() { return cBehaviorRulesStochasticRuleParserRuleCall_5_0_0; }
		
		//";"
		public Keyword getSemicolonKeyword_5_1() { return cSemicolonKeyword_5_1; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class PeriodicEnvironementEventSourceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.mit.gamma.environment.language.EnvironmentLanguage.PeriodicEnvironementEventSource");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPeriodicKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cSourceKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cOutportsAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cOutportsPortParserRuleCall_3_0_0 = (RuleCall)cOutportsAssignment_3_0.eContents().get(0);
		private final Keyword cCommaKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cOutportsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cOutportsPortParserRuleCall_4_0 = (RuleCall)cOutportsAssignment_4.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Assignment cBehaviorRulesAssignment_6_0 = (Assignment)cGroup_6.eContents().get(0);
		private final Alternatives cBehaviorRulesAlternatives_6_0_0 = (Alternatives)cBehaviorRulesAssignment_6_0.eContents().get(0);
		private final RuleCall cBehaviorRulesStochasticRuleParserRuleCall_6_0_0_0 = (RuleCall)cBehaviorRulesAlternatives_6_0_0.eContents().get(0);
		private final RuleCall cBehaviorRulesFilterSimulationRuleParserRuleCall_6_0_0_1 = (RuleCall)cBehaviorRulesAlternatives_6_0_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//PeriodicEnvironementEventSource EnvironmentModel::EnvironmentPeriodicEventSource:
		//	'periodic' 'source' name=ID (outports+=Port ",")* outports+=Port "{" (behaviorRules+=(StochasticRule |
		//	FilterSimulationRule) ";")+
		//	"}";
		@Override public ParserRule getRule() { return rule; }
		
		//'periodic' 'source' name=ID (outports+=Port ",")* outports+=Port "{" (behaviorRules+=(StochasticRule |
		//FilterSimulationRule) ";")+
		//"}"
		public Group getGroup() { return cGroup; }
		
		//'periodic'
		public Keyword getPeriodicKeyword_0() { return cPeriodicKeyword_0; }
		
		//'source'
		public Keyword getSourceKeyword_1() { return cSourceKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//(outports+=Port ",")*
		public Group getGroup_3() { return cGroup_3; }
		
		//outports+=Port
		public Assignment getOutportsAssignment_3_0() { return cOutportsAssignment_3_0; }
		
		//Port
		public RuleCall getOutportsPortParserRuleCall_3_0_0() { return cOutportsPortParserRuleCall_3_0_0; }
		
		//","
		public Keyword getCommaKeyword_3_1() { return cCommaKeyword_3_1; }
		
		//outports+=Port
		public Assignment getOutportsAssignment_4() { return cOutportsAssignment_4; }
		
		//Port
		public RuleCall getOutportsPortParserRuleCall_4_0() { return cOutportsPortParserRuleCall_4_0; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_5() { return cLeftCurlyBracketKeyword_5; }
		
		//(behaviorRules+=(StochasticRule | FilterSimulationRule) ";")+
		public Group getGroup_6() { return cGroup_6; }
		
		//behaviorRules+=(StochasticRule | FilterSimulationRule)
		public Assignment getBehaviorRulesAssignment_6_0() { return cBehaviorRulesAssignment_6_0; }
		
		//(StochasticRule | FilterSimulationRule)
		public Alternatives getBehaviorRulesAlternatives_6_0_0() { return cBehaviorRulesAlternatives_6_0_0; }
		
		//StochasticRule
		public RuleCall getBehaviorRulesStochasticRuleParserRuleCall_6_0_0_0() { return cBehaviorRulesStochasticRuleParserRuleCall_6_0_0_0; }
		
		//FilterSimulationRule
		public RuleCall getBehaviorRulesFilterSimulationRuleParserRuleCall_6_0_0_1() { return cBehaviorRulesFilterSimulationRuleParserRuleCall_6_0_0_1; }
		
		//";"
		public Keyword getSemicolonKeyword_6_1() { return cSemicolonKeyword_6_1; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}
	public class EnvironmentSwitchElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.mit.gamma.environment.language.EnvironmentLanguage.EnvironmentSwitch");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSwitchKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cInportsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cInportsPortParserRuleCall_2_0 = (RuleCall)cInportsAssignment_2.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cOutportsAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cOutportsPortParserRuleCall_4_0_0 = (RuleCall)cOutportsAssignment_4_0.eContents().get(0);
		private final Keyword cCommaKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Assignment cOutportsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cOutportsPortParserRuleCall_5_0 = (RuleCall)cOutportsAssignment_5.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Assignment cBehaviorRulesAssignment_7_0 = (Assignment)cGroup_7.eContents().get(0);
		private final RuleCall cBehaviorRulesSwitchRuleParserRuleCall_7_0_0 = (RuleCall)cBehaviorRulesAssignment_7_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_7_1 = (Keyword)cGroup_7.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//EnvironmentSwitch EnvironmentModel::EnvironmentSwitch:
		//	'switch' name=ID inports+=Port "->" (outports+=Port ",")* outports+=Port "{" (behaviorRules+=SwitchRule ";")+
		//	"}";
		@Override public ParserRule getRule() { return rule; }
		
		//'switch' name=ID inports+=Port "->" (outports+=Port ",")* outports+=Port "{" (behaviorRules+=SwitchRule ";")+
		//"}"
		public Group getGroup() { return cGroup; }
		
		//'switch'
		public Keyword getSwitchKeyword_0() { return cSwitchKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//inports+=Port
		public Assignment getInportsAssignment_2() { return cInportsAssignment_2; }
		
		//Port
		public RuleCall getInportsPortParserRuleCall_2_0() { return cInportsPortParserRuleCall_2_0; }
		
		//"->"
		public Keyword getHyphenMinusGreaterThanSignKeyword_3() { return cHyphenMinusGreaterThanSignKeyword_3; }
		
		//(outports+=Port ",")*
		public Group getGroup_4() { return cGroup_4; }
		
		//outports+=Port
		public Assignment getOutportsAssignment_4_0() { return cOutportsAssignment_4_0; }
		
		//Port
		public RuleCall getOutportsPortParserRuleCall_4_0_0() { return cOutportsPortParserRuleCall_4_0_0; }
		
		//","
		public Keyword getCommaKeyword_4_1() { return cCommaKeyword_4_1; }
		
		//outports+=Port
		public Assignment getOutportsAssignment_5() { return cOutportsAssignment_5; }
		
		//Port
		public RuleCall getOutportsPortParserRuleCall_5_0() { return cOutportsPortParserRuleCall_5_0; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_6() { return cLeftCurlyBracketKeyword_6; }
		
		//(behaviorRules+=SwitchRule ";")+
		public Group getGroup_7() { return cGroup_7; }
		
		//behaviorRules+=SwitchRule
		public Assignment getBehaviorRulesAssignment_7_0() { return cBehaviorRulesAssignment_7_0; }
		
		//SwitchRule
		public RuleCall getBehaviorRulesSwitchRuleParserRuleCall_7_0_0() { return cBehaviorRulesSwitchRuleParserRuleCall_7_0_0; }
		
		//";"
		public Keyword getSemicolonKeyword_7_1() { return cSemicolonKeyword_7_1; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
	}
	public class EnvironmentDelayElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.mit.gamma.environment.language.EnvironmentLanguage.EnvironmentDelay");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDelayKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cInportsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cInportsPortParserRuleCall_2_0 = (RuleCall)cInportsAssignment_2.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cOutportsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cOutportsPortParserRuleCall_4_0 = (RuleCall)cOutportsAssignment_4.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Assignment cBehaviorRulesAssignment_6_0 = (Assignment)cGroup_6.eContents().get(0);
		private final Alternatives cBehaviorRulesAlternatives_6_0_0 = (Alternatives)cBehaviorRulesAssignment_6_0.eContents().get(0);
		private final RuleCall cBehaviorRulesDelayRuleParserRuleCall_6_0_0_0 = (RuleCall)cBehaviorRulesAlternatives_6_0_0.eContents().get(0);
		private final RuleCall cBehaviorRulesFilterSimulationRuleParserRuleCall_6_0_0_1 = (RuleCall)cBehaviorRulesAlternatives_6_0_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//EnvironmentDelay EnvironmentModel::EnvironmentDelay:
		//	'delay' name=ID inports+=Port "->" outports+=Port "{" (behaviorRules+=(DelayRule | FilterSimulationRule) ";")+
		//	"}";
		@Override public ParserRule getRule() { return rule; }
		
		//'delay' name=ID inports+=Port "->" outports+=Port "{" (behaviorRules+=(DelayRule | FilterSimulationRule) ";")+
		//"}"
		public Group getGroup() { return cGroup; }
		
		//'delay'
		public Keyword getDelayKeyword_0() { return cDelayKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//inports+=Port
		public Assignment getInportsAssignment_2() { return cInportsAssignment_2; }
		
		//Port
		public RuleCall getInportsPortParserRuleCall_2_0() { return cInportsPortParserRuleCall_2_0; }
		
		//"->"
		public Keyword getHyphenMinusGreaterThanSignKeyword_3() { return cHyphenMinusGreaterThanSignKeyword_3; }
		
		//outports+=Port
		public Assignment getOutportsAssignment_4() { return cOutportsAssignment_4; }
		
		//Port
		public RuleCall getOutportsPortParserRuleCall_4_0() { return cOutportsPortParserRuleCall_4_0; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_5() { return cLeftCurlyBracketKeyword_5; }
		
		//(behaviorRules+=(DelayRule | FilterSimulationRule) ";")+
		public Group getGroup_6() { return cGroup_6; }
		
		//behaviorRules+=(DelayRule | FilterSimulationRule)
		public Assignment getBehaviorRulesAssignment_6_0() { return cBehaviorRulesAssignment_6_0; }
		
		//(DelayRule | FilterSimulationRule)
		public Alternatives getBehaviorRulesAlternatives_6_0_0() { return cBehaviorRulesAlternatives_6_0_0; }
		
		//DelayRule
		public RuleCall getBehaviorRulesDelayRuleParserRuleCall_6_0_0_0() { return cBehaviorRulesDelayRuleParserRuleCall_6_0_0_0; }
		
		//FilterSimulationRule
		public RuleCall getBehaviorRulesFilterSimulationRuleParserRuleCall_6_0_0_1() { return cBehaviorRulesFilterSimulationRuleParserRuleCall_6_0_0_1; }
		
		//";"
		public Keyword getSemicolonKeyword_6_1() { return cSemicolonKeyword_6_1; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}
	public class EnvironmentSampleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.mit.gamma.environment.language.EnvironmentLanguage.EnvironmentSample");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSampleKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cInportsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cInportsPortParserRuleCall_2_0 = (RuleCall)cInportsAssignment_2.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cOutportsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cOutportsPortParserRuleCall_4_0 = (RuleCall)cOutportsAssignment_4.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Assignment cBehaviorRulesAssignment_6_0 = (Assignment)cGroup_6.eContents().get(0);
		private final Alternatives cBehaviorRulesAlternatives_6_0_0 = (Alternatives)cBehaviorRulesAssignment_6_0.eContents().get(0);
		private final RuleCall cBehaviorRulesStochasticRuleParserRuleCall_6_0_0_0 = (RuleCall)cBehaviorRulesAlternatives_6_0_0.eContents().get(0);
		private final RuleCall cBehaviorRulesFilterSimulationRuleParserRuleCall_6_0_0_1 = (RuleCall)cBehaviorRulesAlternatives_6_0_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//EnvironmentSample EnvironmentModel::EnvironmentSample:
		//	'sample' name=ID inports+=Port "->" outports+=Port "{" (behaviorRules+=(StochasticRule | FilterSimulationRule) ";")+
		//	"}";
		@Override public ParserRule getRule() { return rule; }
		
		//'sample' name=ID inports+=Port "->" outports+=Port "{" (behaviorRules+=(StochasticRule | FilterSimulationRule) ";")+
		//"}"
		public Group getGroup() { return cGroup; }
		
		//'sample'
		public Keyword getSampleKeyword_0() { return cSampleKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//inports+=Port
		public Assignment getInportsAssignment_2() { return cInportsAssignment_2; }
		
		//Port
		public RuleCall getInportsPortParserRuleCall_2_0() { return cInportsPortParserRuleCall_2_0; }
		
		//"->"
		public Keyword getHyphenMinusGreaterThanSignKeyword_3() { return cHyphenMinusGreaterThanSignKeyword_3; }
		
		//outports+=Port
		public Assignment getOutportsAssignment_4() { return cOutportsAssignment_4; }
		
		//Port
		public RuleCall getOutportsPortParserRuleCall_4_0() { return cOutportsPortParserRuleCall_4_0; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_5() { return cLeftCurlyBracketKeyword_5; }
		
		//(behaviorRules+=(StochasticRule | FilterSimulationRule) ";")+
		public Group getGroup_6() { return cGroup_6; }
		
		//behaviorRules+=(StochasticRule | FilterSimulationRule)
		public Assignment getBehaviorRulesAssignment_6_0() { return cBehaviorRulesAssignment_6_0; }
		
		//(StochasticRule | FilterSimulationRule)
		public Alternatives getBehaviorRulesAlternatives_6_0_0() { return cBehaviorRulesAlternatives_6_0_0; }
		
		//StochasticRule
		public RuleCall getBehaviorRulesStochasticRuleParserRuleCall_6_0_0_0() { return cBehaviorRulesStochasticRuleParserRuleCall_6_0_0_0; }
		
		//FilterSimulationRule
		public RuleCall getBehaviorRulesFilterSimulationRuleParserRuleCall_6_0_0_1() { return cBehaviorRulesFilterSimulationRuleParserRuleCall_6_0_0_1; }
		
		//";"
		public Keyword getSemicolonKeyword_6_1() { return cSemicolonKeyword_6_1; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}
	public class EnvironmentExternSimulationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.mit.gamma.environment.language.EnvironmentLanguage.EnvironmentExternSimulation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSimulationKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cAlternatives_2.eContents().get(0);
		private final Group cGroup_2_0_0 = (Group)cGroup_2_0.eContents().get(0);
		private final Assignment cInportsAssignment_2_0_0_0 = (Assignment)cGroup_2_0_0.eContents().get(0);
		private final RuleCall cInportsPortParserRuleCall_2_0_0_0_0 = (RuleCall)cInportsAssignment_2_0_0_0.eContents().get(0);
		private final Keyword cCommaKeyword_2_0_0_1 = (Keyword)cGroup_2_0_0.eContents().get(1);
		private final Assignment cInportsAssignment_2_0_1 = (Assignment)cGroup_2_0.eContents().get(1);
		private final RuleCall cInportsPortParserRuleCall_2_0_1_0 = (RuleCall)cInportsAssignment_2_0_1.eContents().get(0);
		private final Keyword cLessThanSignHyphenMinusGreaterThanSignKeyword_2_0_2 = (Keyword)cGroup_2_0.eContents().get(2);
		private final Keyword cVerticalLineHyphenMinusGreaterThanSignKeyword_2_1 = (Keyword)cAlternatives_2.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cOutportsAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cOutportsPortParserRuleCall_3_0_0 = (RuleCall)cOutportsAssignment_3_0.eContents().get(0);
		private final Keyword cCommaKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cOutportsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cOutportsPortParserRuleCall_4_0 = (RuleCall)cOutportsAssignment_4.eContents().get(0);
		private final Keyword cWithKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cBehaviorRulesAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cBehaviorRulesSimulationRuleParserRuleCall_6_0 = (RuleCall)cBehaviorRulesAssignment_6.eContents().get(0);
		
		//EnvironmentExternSimulation EnvironmentModel::EnvironmentExternSimulation:
		//	'simulation' name=ID ((inports+=Port ",")* inports+=Port "<->" | "|->") (outports+=Port ",")* outports+=Port "with"
		//	behaviorRules+=SimulationRule;
		@Override public ParserRule getRule() { return rule; }
		
		//'simulation' name=ID ((inports+=Port ",")* inports+=Port "<->" | "|->") (outports+=Port ",")* outports+=Port "with"
		//behaviorRules+=SimulationRule
		public Group getGroup() { return cGroup; }
		
		//'simulation'
		public Keyword getSimulationKeyword_0() { return cSimulationKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//((inports+=Port ",")* inports+=Port "<->" | "|->")
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//(inports+=Port ",")* inports+=Port "<->"
		public Group getGroup_2_0() { return cGroup_2_0; }
		
		//(inports+=Port ",")*
		public Group getGroup_2_0_0() { return cGroup_2_0_0; }
		
		//inports+=Port
		public Assignment getInportsAssignment_2_0_0_0() { return cInportsAssignment_2_0_0_0; }
		
		//Port
		public RuleCall getInportsPortParserRuleCall_2_0_0_0_0() { return cInportsPortParserRuleCall_2_0_0_0_0; }
		
		//","
		public Keyword getCommaKeyword_2_0_0_1() { return cCommaKeyword_2_0_0_1; }
		
		//inports+=Port
		public Assignment getInportsAssignment_2_0_1() { return cInportsAssignment_2_0_1; }
		
		//Port
		public RuleCall getInportsPortParserRuleCall_2_0_1_0() { return cInportsPortParserRuleCall_2_0_1_0; }
		
		//"<->"
		public Keyword getLessThanSignHyphenMinusGreaterThanSignKeyword_2_0_2() { return cLessThanSignHyphenMinusGreaterThanSignKeyword_2_0_2; }
		
		//"|->"
		public Keyword getVerticalLineHyphenMinusGreaterThanSignKeyword_2_1() { return cVerticalLineHyphenMinusGreaterThanSignKeyword_2_1; }
		
		//(outports+=Port ",")*
		public Group getGroup_3() { return cGroup_3; }
		
		//outports+=Port
		public Assignment getOutportsAssignment_3_0() { return cOutportsAssignment_3_0; }
		
		//Port
		public RuleCall getOutportsPortParserRuleCall_3_0_0() { return cOutportsPortParserRuleCall_3_0_0; }
		
		//","
		public Keyword getCommaKeyword_3_1() { return cCommaKeyword_3_1; }
		
		//outports+=Port
		public Assignment getOutportsAssignment_4() { return cOutportsAssignment_4; }
		
		//Port
		public RuleCall getOutportsPortParserRuleCall_4_0() { return cOutportsPortParserRuleCall_4_0; }
		
		//"with"
		public Keyword getWithKeyword_5() { return cWithKeyword_5; }
		
		//behaviorRules+=SimulationRule
		public Assignment getBehaviorRulesAssignment_6() { return cBehaviorRulesAssignment_6; }
		
		//SimulationRule
		public RuleCall getBehaviorRulesSimulationRuleParserRuleCall_6_0() { return cBehaviorRulesSimulationRuleParserRuleCall_6_0; }
	}
	public class StochasticModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.mit.gamma.environment.language.EnvironmentLanguage.StochasticModel");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cStochasticProcessParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cRandomVariableParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//StochasticModel StochasticModel::StochasticModel:
		//	StochasticProcess | RandomVariable;
		@Override public ParserRule getRule() { return rule; }
		
		//StochasticProcess | RandomVariable
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//StochasticProcess
		public RuleCall getStochasticProcessParserRuleCall_0() { return cStochasticProcessParserRuleCall_0; }
		
		//RandomVariable
		public RuleCall getRandomVariableParserRuleCall_1() { return cRandomVariableParserRuleCall_1; }
	}
	public class StochasticProcessElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.mit.gamma.environment.language.EnvironmentLanguage.StochasticProcess");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cFittedGaussianProcessParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDiracProcessParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//StochasticProcess StochasticModel::StochasticProcess:
		//	FittedGaussianProcess | DiracProcess;
		@Override public ParserRule getRule() { return rule; }
		
		//FittedGaussianProcess | DiracProcess
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//FittedGaussianProcess
		public RuleCall getFittedGaussianProcessParserRuleCall_0() { return cFittedGaussianProcessParserRuleCall_0; }
		
		//DiracProcess
		public RuleCall getDiracProcessParserRuleCall_1() { return cDiracProcessParserRuleCall_1; }
	}
	public class RandomVariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.mit.gamma.environment.language.EnvironmentLanguage.RandomVariable");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cContinouosRandomVariableParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDiscreteRandomVariableParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//RandomVariable StochasticModel::RandomVariable:
		//	ContinouosRandomVariable | DiscreteRandomVariable;
		@Override public ParserRule getRule() { return rule; }
		
		//ContinouosRandomVariable | DiscreteRandomVariable
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ContinouosRandomVariable
		public RuleCall getContinouosRandomVariableParserRuleCall_0() { return cContinouosRandomVariableParserRuleCall_0; }
		
		//DiscreteRandomVariable
		public RuleCall getDiscreteRandomVariableParserRuleCall_1() { return cDiscreteRandomVariableParserRuleCall_1; }
	}
	public class ContinouosRandomVariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.mit.gamma.environment.language.EnvironmentLanguage.ContinouosRandomVariable");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cNormalRandomVariableParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cExponentialRandomVariableParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cWeibullRandomVariableParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cGammaRandomVariableParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cFittedExponentialRandomVariableParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cFittedGammaRandomVariableParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cFittedNormalRandomVariableParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		
		//ContinouosRandomVariable StochasticModel::ContinouosRandomVariable:
		//	NormalRandomVariable | ExponentialRandomVariable | WeibullRandomVariable | GammaRandomVariable |
		//	FittedExponentialRandomVariable | FittedGammaRandomVariable | FittedNormalRandomVariable;
		@Override public ParserRule getRule() { return rule; }
		
		//NormalRandomVariable | ExponentialRandomVariable | WeibullRandomVariable | GammaRandomVariable |
		//FittedExponentialRandomVariable | FittedGammaRandomVariable | FittedNormalRandomVariable
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//NormalRandomVariable
		public RuleCall getNormalRandomVariableParserRuleCall_0() { return cNormalRandomVariableParserRuleCall_0; }
		
		//ExponentialRandomVariable
		public RuleCall getExponentialRandomVariableParserRuleCall_1() { return cExponentialRandomVariableParserRuleCall_1; }
		
		//WeibullRandomVariable
		public RuleCall getWeibullRandomVariableParserRuleCall_2() { return cWeibullRandomVariableParserRuleCall_2; }
		
		//GammaRandomVariable
		public RuleCall getGammaRandomVariableParserRuleCall_3() { return cGammaRandomVariableParserRuleCall_3; }
		
		//FittedExponentialRandomVariable
		public RuleCall getFittedExponentialRandomVariableParserRuleCall_4() { return cFittedExponentialRandomVariableParserRuleCall_4; }
		
		//FittedGammaRandomVariable
		public RuleCall getFittedGammaRandomVariableParserRuleCall_5() { return cFittedGammaRandomVariableParserRuleCall_5; }
		
		//FittedNormalRandomVariable
		public RuleCall getFittedNormalRandomVariableParserRuleCall_6() { return cFittedNormalRandomVariableParserRuleCall_6; }
	}
	public class DiscreteRandomVariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.mit.gamma.environment.language.EnvironmentLanguage.DiscreteRandomVariable");
		private final RuleCall cBernoulliRandomVariableParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//DiscreteRandomVariable StochasticModel::DiscreteRandomVariable:
		//	BernoulliRandomVariable;
		@Override public ParserRule getRule() { return rule; }
		
		//BernoulliRandomVariable
		public RuleCall getBernoulliRandomVariableParserRuleCall() { return cBernoulliRandomVariableParserRuleCall; }
	}
	public class NormalRandomVariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.mit.gamma.environment.language.EnvironmentLanguage.NormalRandomVariable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNormalKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cMeanKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cMeanAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cMeanDOUBLETerminalRuleCall_3_0 = (RuleCall)cMeanAssignment_3.eContents().get(0);
		private final Keyword cCommaKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cScaleKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cEqualsSignKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cScaleAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cScaleDOUBLETerminalRuleCall_7_0 = (RuleCall)cScaleAssignment_7.eContents().get(0);
		
		//NormalRandomVariable StochasticModel::NormalRandomVariable:
		//	'normal' 'mean' '=' mean=DOUBLE ',' 'scale' '=' scale=DOUBLE;
		@Override public ParserRule getRule() { return rule; }
		
		//'normal' 'mean' '=' mean=DOUBLE ',' 'scale' '=' scale=DOUBLE
		public Group getGroup() { return cGroup; }
		
		//'normal'
		public Keyword getNormalKeyword_0() { return cNormalKeyword_0; }
		
		//'mean'
		public Keyword getMeanKeyword_1() { return cMeanKeyword_1; }
		
		//'='
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }
		
		//mean=DOUBLE
		public Assignment getMeanAssignment_3() { return cMeanAssignment_3; }
		
		//DOUBLE
		public RuleCall getMeanDOUBLETerminalRuleCall_3_0() { return cMeanDOUBLETerminalRuleCall_3_0; }
		
		//','
		public Keyword getCommaKeyword_4() { return cCommaKeyword_4; }
		
		//'scale'
		public Keyword getScaleKeyword_5() { return cScaleKeyword_5; }
		
		//'='
		public Keyword getEqualsSignKeyword_6() { return cEqualsSignKeyword_6; }
		
		//scale=DOUBLE
		public Assignment getScaleAssignment_7() { return cScaleAssignment_7; }
		
		//DOUBLE
		public RuleCall getScaleDOUBLETerminalRuleCall_7_0() { return cScaleDOUBLETerminalRuleCall_7_0; }
	}
	public class WeibullRandomVariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.mit.gamma.environment.language.EnvironmentLanguage.WeibullRandomVariable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cWeibullKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cWeibullKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Keyword cScaleKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cScaleAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cScaleDOUBLETerminalRuleCall_3_0 = (RuleCall)cScaleAssignment_3.eContents().get(0);
		private final Keyword cCommaKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cShapeKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cEqualsSignKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cShapeAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cShapeDOUBLETerminalRuleCall_7_0 = (RuleCall)cShapeAssignment_7.eContents().get(0);
		
		//WeibullRandomVariable StochasticModel::WeibullRandomVariable:
		//	('Weibull' | 'weibull') 'scale' '=' scale=DOUBLE ',' 'shape' '=' shape=DOUBLE;
		@Override public ParserRule getRule() { return rule; }
		
		//('Weibull' | 'weibull') 'scale' '=' scale=DOUBLE ',' 'shape' '=' shape=DOUBLE
		public Group getGroup() { return cGroup; }
		
		//('Weibull' | 'weibull')
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//'Weibull'
		public Keyword getWeibullKeyword_0_0() { return cWeibullKeyword_0_0; }
		
		//'weibull'
		public Keyword getWeibullKeyword_0_1() { return cWeibullKeyword_0_1; }
		
		//'scale'
		public Keyword getScaleKeyword_1() { return cScaleKeyword_1; }
		
		//'='
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }
		
		//scale=DOUBLE
		public Assignment getScaleAssignment_3() { return cScaleAssignment_3; }
		
		//DOUBLE
		public RuleCall getScaleDOUBLETerminalRuleCall_3_0() { return cScaleDOUBLETerminalRuleCall_3_0; }
		
		//','
		public Keyword getCommaKeyword_4() { return cCommaKeyword_4; }
		
		//'shape'
		public Keyword getShapeKeyword_5() { return cShapeKeyword_5; }
		
		//'='
		public Keyword getEqualsSignKeyword_6() { return cEqualsSignKeyword_6; }
		
		//shape=DOUBLE
		public Assignment getShapeAssignment_7() { return cShapeAssignment_7; }
		
		//DOUBLE
		public RuleCall getShapeDOUBLETerminalRuleCall_7_0() { return cShapeDOUBLETerminalRuleCall_7_0; }
	}
	public class GammaRandomVariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.mit.gamma.environment.language.EnvironmentLanguage.GammaRandomVariable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGammaKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cScaleKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cScaleAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cScaleDOUBLETerminalRuleCall_3_0 = (RuleCall)cScaleAssignment_3.eContents().get(0);
		private final Keyword cCommaKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cShapeKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cEqualsSignKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cShapeAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cShapeDOUBLETerminalRuleCall_7_0 = (RuleCall)cShapeAssignment_7.eContents().get(0);
		
		//GammaRandomVariable StochasticModel::GammaRandomVariable:
		//	'gamma' 'scale' '=' scale=DOUBLE ',' 'shape' '=' shape=DOUBLE;
		@Override public ParserRule getRule() { return rule; }
		
		//'gamma' 'scale' '=' scale=DOUBLE ',' 'shape' '=' shape=DOUBLE
		public Group getGroup() { return cGroup; }
		
		//'gamma'
		public Keyword getGammaKeyword_0() { return cGammaKeyword_0; }
		
		//'scale'
		public Keyword getScaleKeyword_1() { return cScaleKeyword_1; }
		
		//'='
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }
		
		//scale=DOUBLE
		public Assignment getScaleAssignment_3() { return cScaleAssignment_3; }
		
		//DOUBLE
		public RuleCall getScaleDOUBLETerminalRuleCall_3_0() { return cScaleDOUBLETerminalRuleCall_3_0; }
		
		//','
		public Keyword getCommaKeyword_4() { return cCommaKeyword_4; }
		
		//'shape'
		public Keyword getShapeKeyword_5() { return cShapeKeyword_5; }
		
		//'='
		public Keyword getEqualsSignKeyword_6() { return cEqualsSignKeyword_6; }
		
		//shape=DOUBLE
		public Assignment getShapeAssignment_7() { return cShapeAssignment_7; }
		
		//DOUBLE
		public RuleCall getShapeDOUBLETerminalRuleCall_7_0() { return cShapeDOUBLETerminalRuleCall_7_0; }
	}
	public class ExponentialRandomVariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.mit.gamma.environment.language.EnvironmentLanguage.ExponentialRandomVariable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cExponentialKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cRateKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cRateAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRateDOUBLETerminalRuleCall_2_0 = (RuleCall)cRateAssignment_2.eContents().get(0);
		
		//ExponentialRandomVariable StochasticModel::ExponentialRandomVariable:
		//	'exponential' 'rate=' rate=DOUBLE;
		@Override public ParserRule getRule() { return rule; }
		
		//'exponential' 'rate=' rate=DOUBLE
		public Group getGroup() { return cGroup; }
		
		//'exponential'
		public Keyword getExponentialKeyword_0() { return cExponentialKeyword_0; }
		
		//'rate='
		public Keyword getRateKeyword_1() { return cRateKeyword_1; }
		
		//rate=DOUBLE
		public Assignment getRateAssignment_2() { return cRateAssignment_2; }
		
		//DOUBLE
		public RuleCall getRateDOUBLETerminalRuleCall_2_0() { return cRateDOUBLETerminalRuleCall_2_0; }
	}
	public class BernoulliRandomVariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.mit.gamma.environment.language.EnvironmentLanguage.BernoulliRandomVariable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBernoulliKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cProbKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cProbabilityAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cProbabilityDOUBLETerminalRuleCall_2_0 = (RuleCall)cProbabilityAssignment_2.eContents().get(0);
		
		//BernoulliRandomVariable StochasticModel::BernoulliRandomVariable:
		//	'bernoulli' 'prob=' probability=DOUBLE;
		@Override public ParserRule getRule() { return rule; }
		
		//'bernoulli' 'prob=' probability=DOUBLE
		public Group getGroup() { return cGroup; }
		
		//'bernoulli'
		public Keyword getBernoulliKeyword_0() { return cBernoulliKeyword_0; }
		
		//'prob='
		public Keyword getProbKeyword_1() { return cProbKeyword_1; }
		
		//probability=DOUBLE
		public Assignment getProbabilityAssignment_2() { return cProbabilityAssignment_2; }
		
		//DOUBLE
		public RuleCall getProbabilityDOUBLETerminalRuleCall_2_0() { return cProbabilityDOUBLETerminalRuleCall_2_0; }
	}
	public class FittedExponentialRandomVariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.mit.gamma.environment.language.EnvironmentLanguage.FittedExponentialRandomVariable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFittedKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cExponentialKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLrKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cEqualsSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cLrAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cLrDOUBLETerminalRuleCall_4_0 = (RuleCall)cLrAssignment_4.eContents().get(0);
		private final Keyword cCommaKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cSourceKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cEqualsSignKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cSourceAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cSourceDataSourceParserRuleCall_8_0 = (RuleCall)cSourceAssignment_8.eContents().get(0);
		
		//FittedExponentialRandomVariable StochasticModel::FittedExponentialRandomVariable:
		//	'fitted' 'exponential' 'lr' '=' lr=DOUBLE ',' 'source' '=' source=DataSource;
		@Override public ParserRule getRule() { return rule; }
		
		//'fitted' 'exponential' 'lr' '=' lr=DOUBLE ',' 'source' '=' source=DataSource
		public Group getGroup() { return cGroup; }
		
		//'fitted'
		public Keyword getFittedKeyword_0() { return cFittedKeyword_0; }
		
		//'exponential'
		public Keyword getExponentialKeyword_1() { return cExponentialKeyword_1; }
		
		//'lr'
		public Keyword getLrKeyword_2() { return cLrKeyword_2; }
		
		//'='
		public Keyword getEqualsSignKeyword_3() { return cEqualsSignKeyword_3; }
		
		//lr=DOUBLE
		public Assignment getLrAssignment_4() { return cLrAssignment_4; }
		
		//DOUBLE
		public RuleCall getLrDOUBLETerminalRuleCall_4_0() { return cLrDOUBLETerminalRuleCall_4_0; }
		
		//','
		public Keyword getCommaKeyword_5() { return cCommaKeyword_5; }
		
		//'source'
		public Keyword getSourceKeyword_6() { return cSourceKeyword_6; }
		
		//'='
		public Keyword getEqualsSignKeyword_7() { return cEqualsSignKeyword_7; }
		
		//source=DataSource
		public Assignment getSourceAssignment_8() { return cSourceAssignment_8; }
		
		//DataSource
		public RuleCall getSourceDataSourceParserRuleCall_8_0() { return cSourceDataSourceParserRuleCall_8_0; }
	}
	public class FittedNormalRandomVariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.mit.gamma.environment.language.EnvironmentLanguage.FittedNormalRandomVariable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFittedKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cNormalKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLrKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cEqualsSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cLrAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cLrDOUBLETerminalRuleCall_4_0 = (RuleCall)cLrAssignment_4.eContents().get(0);
		private final Keyword cCommaKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cSourceKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cEqualsSignKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cSourceAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cSourceDataSourceParserRuleCall_8_0 = (RuleCall)cSourceAssignment_8.eContents().get(0);
		
		//FittedNormalRandomVariable StochasticModel::FittedNormalRandomVariable:
		//	'fitted' 'normal' 'lr' '=' lr=DOUBLE ',' 'source' '=' source=DataSource;
		@Override public ParserRule getRule() { return rule; }
		
		//'fitted' 'normal' 'lr' '=' lr=DOUBLE ',' 'source' '=' source=DataSource
		public Group getGroup() { return cGroup; }
		
		//'fitted'
		public Keyword getFittedKeyword_0() { return cFittedKeyword_0; }
		
		//'normal'
		public Keyword getNormalKeyword_1() { return cNormalKeyword_1; }
		
		//'lr'
		public Keyword getLrKeyword_2() { return cLrKeyword_2; }
		
		//'='
		public Keyword getEqualsSignKeyword_3() { return cEqualsSignKeyword_3; }
		
		//lr=DOUBLE
		public Assignment getLrAssignment_4() { return cLrAssignment_4; }
		
		//DOUBLE
		public RuleCall getLrDOUBLETerminalRuleCall_4_0() { return cLrDOUBLETerminalRuleCall_4_0; }
		
		//','
		public Keyword getCommaKeyword_5() { return cCommaKeyword_5; }
		
		//'source'
		public Keyword getSourceKeyword_6() { return cSourceKeyword_6; }
		
		//'='
		public Keyword getEqualsSignKeyword_7() { return cEqualsSignKeyword_7; }
		
		//source=DataSource
		public Assignment getSourceAssignment_8() { return cSourceAssignment_8; }
		
		//DataSource
		public RuleCall getSourceDataSourceParserRuleCall_8_0() { return cSourceDataSourceParserRuleCall_8_0; }
	}
	public class FittedGammaRandomVariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.mit.gamma.environment.language.EnvironmentLanguage.FittedGammaRandomVariable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFittedKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cGammaKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLrKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cEqualsSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cLrAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cLrDOUBLETerminalRuleCall_4_0 = (RuleCall)cLrAssignment_4.eContents().get(0);
		private final Keyword cCommaKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cSourceKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cEqualsSignKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cSourceAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cSourceDataSourceParserRuleCall_8_0 = (RuleCall)cSourceAssignment_8.eContents().get(0);
		
		//FittedGammaRandomVariable StochasticModel::FittedGammaRandomVariable:
		//	'fitted' 'gamma' 'lr' '=' lr=DOUBLE ',' 'source' '=' source=DataSource;
		@Override public ParserRule getRule() { return rule; }
		
		//'fitted' 'gamma' 'lr' '=' lr=DOUBLE ',' 'source' '=' source=DataSource
		public Group getGroup() { return cGroup; }
		
		//'fitted'
		public Keyword getFittedKeyword_0() { return cFittedKeyword_0; }
		
		//'gamma'
		public Keyword getGammaKeyword_1() { return cGammaKeyword_1; }
		
		//'lr'
		public Keyword getLrKeyword_2() { return cLrKeyword_2; }
		
		//'='
		public Keyword getEqualsSignKeyword_3() { return cEqualsSignKeyword_3; }
		
		//lr=DOUBLE
		public Assignment getLrAssignment_4() { return cLrAssignment_4; }
		
		//DOUBLE
		public RuleCall getLrDOUBLETerminalRuleCall_4_0() { return cLrDOUBLETerminalRuleCall_4_0; }
		
		//','
		public Keyword getCommaKeyword_5() { return cCommaKeyword_5; }
		
		//'source'
		public Keyword getSourceKeyword_6() { return cSourceKeyword_6; }
		
		//'='
		public Keyword getEqualsSignKeyword_7() { return cEqualsSignKeyword_7; }
		
		//source=DataSource
		public Assignment getSourceAssignment_8() { return cSourceAssignment_8; }
		
		//DataSource
		public RuleCall getSourceDataSourceParserRuleCall_8_0() { return cSourceDataSourceParserRuleCall_8_0; }
	}
	public class CategoricalProbabailityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.mit.gamma.environment.language.EnvironmentLanguage.CategoricalProbabaility");
		private final Assignment cProbabilityAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cProbabilityDOUBLETerminalRuleCall_0 = (RuleCall)cProbabilityAssignment.eContents().get(0);
		
		//CategoricalProbabaility StochasticModel::CategoricalProbabaility:
		//	probability=DOUBLE;
		@Override public ParserRule getRule() { return rule; }
		
		//probability=DOUBLE
		public Assignment getProbabilityAssignment() { return cProbabilityAssignment; }
		
		//DOUBLE
		public RuleCall getProbabilityDOUBLETerminalRuleCall_0() { return cProbabilityDOUBLETerminalRuleCall_0; }
	}
	public class DiracProcessElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.mit.gamma.environment.language.EnvironmentLanguage.DiracProcess");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDiracKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cSourceKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cSourceAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cSourceDataSourceParserRuleCall_3_0 = (RuleCall)cSourceAssignment_3.eContents().get(0);
		
		//DiracProcess StochasticModel::DiracProcess:
		//	"Dirac" "source" "=" source=DataSource;
		@Override public ParserRule getRule() { return rule; }
		
		//"Dirac" "source" "=" source=DataSource
		public Group getGroup() { return cGroup; }
		
		//"Dirac"
		public Keyword getDiracKeyword_0() { return cDiracKeyword_0; }
		
		//"source"
		public Keyword getSourceKeyword_1() { return cSourceKeyword_1; }
		
		//"="
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }
		
		//source=DataSource
		public Assignment getSourceAssignment_3() { return cSourceAssignment_3; }
		
		//DataSource
		public RuleCall getSourceDataSourceParserRuleCall_3_0() { return cSourceDataSourceParserRuleCall_3_0; }
	}
	public class FittedGaussianProcessElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.mit.gamma.environment.language.EnvironmentLanguage.FittedGaussianProcess");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cGPKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cAlternatives_0.eContents().get(1);
		private final Keyword cGaussKeyword_0_1_0 = (Keyword)cGroup_0_1.eContents().get(0);
		private final Keyword cProcessKeyword_0_1_1 = (Keyword)cGroup_0_1.eContents().get(1);
		private final Keyword cKernelKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cKernelAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cKernelKernelParserRuleCall_3_0 = (RuleCall)cKernelAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Keyword cLrKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Keyword cEqualsSignKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		private final Assignment cLrAssignment_4_3 = (Assignment)cGroup_4.eContents().get(3);
		private final RuleCall cLrDOUBLETerminalRuleCall_4_3_0 = (RuleCall)cLrAssignment_4_3.eContents().get(0);
		private final Keyword cCommaKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cSourceKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cEqualsSignKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cSourceAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cSourceDataSourceParserRuleCall_8_0 = (RuleCall)cSourceAssignment_8.eContents().get(0);
		
		//FittedGaussianProcess StochasticModel::FittedGaussianProcess:
		//	("GP" | "Gauss" "Process") "kernel" "=" kernel=Kernel ("," "lr" "=" lr=DOUBLE)? "," "source" "=" source=DataSource;
		@Override public ParserRule getRule() { return rule; }
		
		//("GP" | "Gauss" "Process") "kernel" "=" kernel=Kernel ("," "lr" "=" lr=DOUBLE)? "," "source" "=" source=DataSource
		public Group getGroup() { return cGroup; }
		
		//("GP" | "Gauss" "Process")
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//"GP"
		public Keyword getGPKeyword_0_0() { return cGPKeyword_0_0; }
		
		//"Gauss" "Process"
		public Group getGroup_0_1() { return cGroup_0_1; }
		
		//"Gauss"
		public Keyword getGaussKeyword_0_1_0() { return cGaussKeyword_0_1_0; }
		
		//"Process"
		public Keyword getProcessKeyword_0_1_1() { return cProcessKeyword_0_1_1; }
		
		//"kernel"
		public Keyword getKernelKeyword_1() { return cKernelKeyword_1; }
		
		//"="
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }
		
		//kernel=Kernel
		public Assignment getKernelAssignment_3() { return cKernelAssignment_3; }
		
		//Kernel
		public RuleCall getKernelKernelParserRuleCall_3_0() { return cKernelKernelParserRuleCall_3_0; }
		
		//("," "lr" "=" lr=DOUBLE)?
		public Group getGroup_4() { return cGroup_4; }
		
		//","
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }
		
		//"lr"
		public Keyword getLrKeyword_4_1() { return cLrKeyword_4_1; }
		
		//"="
		public Keyword getEqualsSignKeyword_4_2() { return cEqualsSignKeyword_4_2; }
		
		//lr=DOUBLE
		public Assignment getLrAssignment_4_3() { return cLrAssignment_4_3; }
		
		//DOUBLE
		public RuleCall getLrDOUBLETerminalRuleCall_4_3_0() { return cLrDOUBLETerminalRuleCall_4_3_0; }
		
		//","
		public Keyword getCommaKeyword_5() { return cCommaKeyword_5; }
		
		//"source"
		public Keyword getSourceKeyword_6() { return cSourceKeyword_6; }
		
		//"="
		public Keyword getEqualsSignKeyword_7() { return cEqualsSignKeyword_7; }
		
		//source=DataSource
		public Assignment getSourceAssignment_8() { return cSourceAssignment_8; }
		
		//DataSource
		public RuleCall getSourceDataSourceParserRuleCall_8_0() { return cSourceDataSourceParserRuleCall_8_0; }
	}
	public class KernelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.mit.gamma.environment.language.EnvironmentLanguage.Kernel");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBrownianKernelParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cLinearKernelParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cRBFKernelParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cPeriodicKernelParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cSumKernelParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//Kernel StochasticModel::Kernel:
		//	BrownianKernel | LinearKernel | RBFKernel | PeriodicKernel | SumKernel;
		@Override public ParserRule getRule() { return rule; }
		
		//BrownianKernel | LinearKernel | RBFKernel | PeriodicKernel | SumKernel
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//BrownianKernel
		public RuleCall getBrownianKernelParserRuleCall_0() { return cBrownianKernelParserRuleCall_0; }
		
		//LinearKernel
		public RuleCall getLinearKernelParserRuleCall_1() { return cLinearKernelParserRuleCall_1; }
		
		//RBFKernel
		public RuleCall getRBFKernelParserRuleCall_2() { return cRBFKernelParserRuleCall_2; }
		
		//PeriodicKernel
		public RuleCall getPeriodicKernelParserRuleCall_3() { return cPeriodicKernelParserRuleCall_3; }
		
		//SumKernel
		public RuleCall getSumKernelParserRuleCall_4() { return cSumKernelParserRuleCall_4; }
	}
	public class SumKernelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.mit.gamma.environment.language.EnvironmentLanguage.SumKernel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cKernelsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cKernelsKernelParserRuleCall_1_0 = (RuleCall)cKernelsAssignment_1.eContents().get(0);
		private final Keyword cPlusSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cKernelsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cKernelsKernelParserRuleCall_3_0 = (RuleCall)cKernelsAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//SumKernel StochasticModel::SumKernel:
		//	"(" kernels+=Kernel "+" kernels+=Kernel ")";
		@Override public ParserRule getRule() { return rule; }
		
		//"(" kernels+=Kernel "+" kernels+=Kernel ")"
		public Group getGroup() { return cGroup; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//kernels+=Kernel
		public Assignment getKernelsAssignment_1() { return cKernelsAssignment_1; }
		
		//Kernel
		public RuleCall getKernelsKernelParserRuleCall_1_0() { return cKernelsKernelParserRuleCall_1_0; }
		
		//"+"
		public Keyword getPlusSignKeyword_2() { return cPlusSignKeyword_2; }
		
		//kernels+=Kernel
		public Assignment getKernelsAssignment_3() { return cKernelsAssignment_3; }
		
		//Kernel
		public RuleCall getKernelsKernelParserRuleCall_3_0() { return cKernelsKernelParserRuleCall_3_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class BrownianKernelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.mit.gamma.environment.language.EnvironmentLanguage.BrownianKernel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBrownianKernelAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cBrownianKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//BrownianKernel StochasticModel::BrownianKernel:
		//	{StochasticModel::BrownianKernel} "Brownian";
		@Override public ParserRule getRule() { return rule; }
		
		//{StochasticModel::BrownianKernel} "Brownian"
		public Group getGroup() { return cGroup; }
		
		//{StochasticModel::BrownianKernel}
		public Action getBrownianKernelAction_0() { return cBrownianKernelAction_0; }
		
		//"Brownian"
		public Keyword getBrownianKeyword_1() { return cBrownianKeyword_1; }
	}
	public class RBFKernelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.mit.gamma.environment.language.EnvironmentLanguage.RBFKernel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRBFKernelAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cRBFKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//RBFKernel StochasticModel::RBFKernel:
		//	{StochasticModel::RBFKernel} "RBF";
		@Override public ParserRule getRule() { return rule; }
		
		//{StochasticModel::RBFKernel} "RBF"
		public Group getGroup() { return cGroup; }
		
		//{StochasticModel::RBFKernel}
		public Action getRBFKernelAction_0() { return cRBFKernelAction_0; }
		
		//"RBF"
		public Keyword getRBFKeyword_1() { return cRBFKeyword_1; }
	}
	public class LinearKernelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.mit.gamma.environment.language.EnvironmentLanguage.LinearKernel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cLinearKernelAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLinearKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//LinearKernel StochasticModel::LinearKernel:
		//	{StochasticModel::LinearKernel} "Linear";
		@Override public ParserRule getRule() { return rule; }
		
		//{StochasticModel::LinearKernel} "Linear"
		public Group getGroup() { return cGroup; }
		
		//{StochasticModel::LinearKernel}
		public Action getLinearKernelAction_0() { return cLinearKernelAction_0; }
		
		//"Linear"
		public Keyword getLinearKeyword_1() { return cLinearKeyword_1; }
	}
	public class PeriodicKernelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.mit.gamma.environment.language.EnvironmentLanguage.PeriodicKernel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPeriodicKernelAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cPeriodicKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//PeriodicKernel StochasticModel::PeriodicKernel:
		//	{StochasticModel::PeriodicKernel} "Periodic";
		@Override public ParserRule getRule() { return rule; }
		
		//{StochasticModel::PeriodicKernel} "Periodic"
		public Group getGroup() { return cGroup; }
		
		//{StochasticModel::PeriodicKernel}
		public Action getPeriodicKernelAction_0() { return cPeriodicKernelAction_0; }
		
		//"Periodic"
		public Keyword getPeriodicKeyword_1() { return cPeriodicKeyword_1; }
	}
	public class DataSourceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.mit.gamma.environment.language.EnvironmentLanguage.DataSource");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cInfluxDBParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cPythonSimulationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//DataSource StochasticModel::DataSource:
		//	InfluxDB | PythonSimulation;
		@Override public ParserRule getRule() { return rule; }
		
		//InfluxDB | PythonSimulation
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//InfluxDB
		public RuleCall getInfluxDBParserRuleCall_0() { return cInfluxDBParserRuleCall_0; }
		
		//PythonSimulation
		public RuleCall getPythonSimulationParserRuleCall_1() { return cPythonSimulationParserRuleCall_1; }
	}
	public class InfluxDBElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.mit.gamma.environment.language.EnvironmentLanguage.InfluxDB");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cInfluxDBKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cDbKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cDbnameAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cDbnameSTRINGTerminalRuleCall_4_0 = (RuleCall)cDbnameAssignment_4.eContents().get(0);
		private final Keyword cCommaKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cIpKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cColonKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cIpAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cIpSTRINGTerminalRuleCall_8_0 = (RuleCall)cIpAssignment_8.eContents().get(0);
		private final Keyword cCommaKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Keyword cPortKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Keyword cColonKeyword_11 = (Keyword)cGroup.eContents().get(11);
		private final Assignment cPortAssignment_12 = (Assignment)cGroup.eContents().get(12);
		private final RuleCall cPortSTRINGTerminalRuleCall_12_0 = (RuleCall)cPortAssignment_12.eContents().get(0);
		private final Keyword cCommaKeyword_13 = (Keyword)cGroup.eContents().get(13);
		private final Keyword cQueryKeyword_14 = (Keyword)cGroup.eContents().get(14);
		private final Keyword cColonKeyword_15 = (Keyword)cGroup.eContents().get(15);
		private final Assignment cQueryAssignment_16 = (Assignment)cGroup.eContents().get(16);
		private final RuleCall cQuerySTRINGTerminalRuleCall_16_0 = (RuleCall)cQueryAssignment_16.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_17 = (Keyword)cGroup.eContents().get(17);
		
		//InfluxDB StochasticModel::InfluxDB:
		//	"InfluxDB" "(" "db" ":" dbname=STRING "," "ip" ":" ip=STRING "," "port" ":" port=STRING "," "query" ":" query=STRING
		//	")";
		@Override public ParserRule getRule() { return rule; }
		
		//"InfluxDB" "(" "db" ":" dbname=STRING "," "ip" ":" ip=STRING "," "port" ":" port=STRING "," "query" ":" query=STRING
		//")"
		public Group getGroup() { return cGroup; }
		
		//"InfluxDB"
		public Keyword getInfluxDBKeyword_0() { return cInfluxDBKeyword_0; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//"db"
		public Keyword getDbKeyword_2() { return cDbKeyword_2; }
		
		//":"
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }
		
		//dbname=STRING
		public Assignment getDbnameAssignment_4() { return cDbnameAssignment_4; }
		
		//STRING
		public RuleCall getDbnameSTRINGTerminalRuleCall_4_0() { return cDbnameSTRINGTerminalRuleCall_4_0; }
		
		//","
		public Keyword getCommaKeyword_5() { return cCommaKeyword_5; }
		
		//"ip"
		public Keyword getIpKeyword_6() { return cIpKeyword_6; }
		
		//":"
		public Keyword getColonKeyword_7() { return cColonKeyword_7; }
		
		//ip=STRING
		public Assignment getIpAssignment_8() { return cIpAssignment_8; }
		
		//STRING
		public RuleCall getIpSTRINGTerminalRuleCall_8_0() { return cIpSTRINGTerminalRuleCall_8_0; }
		
		//","
		public Keyword getCommaKeyword_9() { return cCommaKeyword_9; }
		
		//"port"
		public Keyword getPortKeyword_10() { return cPortKeyword_10; }
		
		//":"
		public Keyword getColonKeyword_11() { return cColonKeyword_11; }
		
		//port=STRING
		public Assignment getPortAssignment_12() { return cPortAssignment_12; }
		
		//STRING
		public RuleCall getPortSTRINGTerminalRuleCall_12_0() { return cPortSTRINGTerminalRuleCall_12_0; }
		
		//","
		public Keyword getCommaKeyword_13() { return cCommaKeyword_13; }
		
		//"query"
		public Keyword getQueryKeyword_14() { return cQueryKeyword_14; }
		
		//":"
		public Keyword getColonKeyword_15() { return cColonKeyword_15; }
		
		//query=STRING
		public Assignment getQueryAssignment_16() { return cQueryAssignment_16; }
		
		//STRING
		public RuleCall getQuerySTRINGTerminalRuleCall_16_0() { return cQuerySTRINGTerminalRuleCall_16_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_17() { return cRightParenthesisKeyword_17; }
	}
	public class PythonSimulationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.mit.gamma.environment.language.EnvironmentLanguage.PythonSimulation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPythonKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cScriptAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cScriptSTRINGTerminalRuleCall_2_0 = (RuleCall)cScriptAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//PythonSimulation StochasticModel::PythonSimulation:
		//	"Python" "(" script=STRING ")";
		@Override public ParserRule getRule() { return rule; }
		
		//"Python" "(" script=STRING ")"
		public Group getGroup() { return cGroup; }
		
		//"Python"
		public Keyword getPythonKeyword_0() { return cPythonKeyword_0; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//script=STRING
		public Assignment getScriptAssignment_2() { return cScriptAssignment_2; }
		
		//STRING
		public RuleCall getScriptSTRINGTerminalRuleCall_2_0() { return cScriptSTRINGTerminalRuleCall_2_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	
	
	private final PackageElements pPackage;
	private final ComponentElements pComponent;
	private final RequirementComponentElements pRequirementComponent;
	private final RequirementAspectElements pRequirementAspect;
	private final LowerThanElements pLowerThan;
	private final GreaterThanElements pGreaterThan;
	private final IsBetweenElements pIsBetween;
	private final AnalysisComponentElements pAnalysisComponent;
	private final AnalysisAspectElements pAnalysisAspect;
	private final MeanParameterElements pMeanParameter;
	private final ParameterDistributionElements pParameterDistribution;
	private final ProbabilityElements pProbability;
	private final TimedProbabilityElements pTimedProbability;
	private final TimeBoundedProbabilityElements pTimeBoundedProbability;
	private final MeanTimeElements pMeanTime;
	private final FrequencyElements pFrequency;
	private final AssumeRaisedElements pAssumeRaised;
	private final AssumeNotRaisedElements pAssumeNotRaised;
	private final AnalysisConditionElements pAnalysisCondition;
	private final ComponentPortEventReferenceElements pComponentPortEventReference;
	private final EnvironmentCompositeComponentElements pEnvironmentCompositeComponent;
	private final EnvironmentComponentInstanceElements pEnvironmentComponentInstance;
	private final ElementaryEnvironmentComponentInstanceElements pElementaryEnvironmentComponentInstance;
	private final EnvironmentCompositeComponentInstanceElements pEnvironmentCompositeComponentInstance;
	private final StochasticRuleElements pStochasticRule;
	private final FilterSimulationRuleElements pFilterSimulationRule;
	private final SwitchRuleElements pSwitchRule;
	private final DelayRuleElements pDelayRule;
	private final FilterElements pFilter;
	private final EventFilterElements pEventFilter;
	private final PortFilterElements pPortFilter;
	private final ComponentFilterElements pComponentFilter;
	private final SimulationRuleElements pSimulationRule;
	private final SimulationElements pSimulation;
	private final EnvironementEventSourceElements pEnvironementEventSource;
	private final PeriodicEnvironementEventSourceElements pPeriodicEnvironementEventSource;
	private final EnvironmentSwitchElements pEnvironmentSwitch;
	private final EnvironmentDelayElements pEnvironmentDelay;
	private final EnvironmentSampleElements pEnvironmentSample;
	private final EnvironmentExternSimulationElements pEnvironmentExternSimulation;
	private final StochasticModelElements pStochasticModel;
	private final StochasticProcessElements pStochasticProcess;
	private final RandomVariableElements pRandomVariable;
	private final ContinouosRandomVariableElements pContinouosRandomVariable;
	private final DiscreteRandomVariableElements pDiscreteRandomVariable;
	private final NormalRandomVariableElements pNormalRandomVariable;
	private final WeibullRandomVariableElements pWeibullRandomVariable;
	private final GammaRandomVariableElements pGammaRandomVariable;
	private final ExponentialRandomVariableElements pExponentialRandomVariable;
	private final BernoulliRandomVariableElements pBernoulliRandomVariable;
	private final FittedExponentialRandomVariableElements pFittedExponentialRandomVariable;
	private final FittedNormalRandomVariableElements pFittedNormalRandomVariable;
	private final FittedGammaRandomVariableElements pFittedGammaRandomVariable;
	private final CategoricalProbabailityElements pCategoricalProbabaility;
	private final DiracProcessElements pDiracProcess;
	private final FittedGaussianProcessElements pFittedGaussianProcess;
	private final KernelElements pKernel;
	private final SumKernelElements pSumKernel;
	private final BrownianKernelElements pBrownianKernel;
	private final RBFKernelElements pRBFKernel;
	private final LinearKernelElements pLinearKernel;
	private final PeriodicKernelElements pPeriodicKernel;
	private final DataSourceElements pDataSource;
	private final InfluxDBElements pInfluxDB;
	private final PythonSimulationElements pPythonSimulation;
	private final TerminalRule tDOUBLE;
	
	private final Grammar grammar;
	
	private final StatechartLanguageGrammarAccess gaStatechartLanguage;
	
	private final ActionLanguageGrammarAccess gaActionLanguage;
	
	private final ExpressionLanguageGrammarAccess gaExpressionLanguage;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public EnvironmentLanguageGrammarAccess(GrammarProvider grammarProvider,
			StatechartLanguageGrammarAccess gaStatechartLanguage,
			ActionLanguageGrammarAccess gaActionLanguage,
			ExpressionLanguageGrammarAccess gaExpressionLanguage,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaStatechartLanguage = gaStatechartLanguage;
		this.gaActionLanguage = gaActionLanguage;
		this.gaExpressionLanguage = gaExpressionLanguage;
		this.gaTerminals = gaTerminals;
		this.pPackage = new PackageElements();
		this.pComponent = new ComponentElements();
		this.pRequirementComponent = new RequirementComponentElements();
		this.pRequirementAspect = new RequirementAspectElements();
		this.pLowerThan = new LowerThanElements();
		this.pGreaterThan = new GreaterThanElements();
		this.pIsBetween = new IsBetweenElements();
		this.pAnalysisComponent = new AnalysisComponentElements();
		this.pAnalysisAspect = new AnalysisAspectElements();
		this.pMeanParameter = new MeanParameterElements();
		this.pParameterDistribution = new ParameterDistributionElements();
		this.pProbability = new ProbabilityElements();
		this.pTimedProbability = new TimedProbabilityElements();
		this.pTimeBoundedProbability = new TimeBoundedProbabilityElements();
		this.pMeanTime = new MeanTimeElements();
		this.pFrequency = new FrequencyElements();
		this.pAssumeRaised = new AssumeRaisedElements();
		this.pAssumeNotRaised = new AssumeNotRaisedElements();
		this.pAnalysisCondition = new AnalysisConditionElements();
		this.pComponentPortEventReference = new ComponentPortEventReferenceElements();
		this.pEnvironmentCompositeComponent = new EnvironmentCompositeComponentElements();
		this.pEnvironmentComponentInstance = new EnvironmentComponentInstanceElements();
		this.pElementaryEnvironmentComponentInstance = new ElementaryEnvironmentComponentInstanceElements();
		this.pEnvironmentCompositeComponentInstance = new EnvironmentCompositeComponentInstanceElements();
		this.pStochasticRule = new StochasticRuleElements();
		this.pFilterSimulationRule = new FilterSimulationRuleElements();
		this.pSwitchRule = new SwitchRuleElements();
		this.pDelayRule = new DelayRuleElements();
		this.pFilter = new FilterElements();
		this.pEventFilter = new EventFilterElements();
		this.pPortFilter = new PortFilterElements();
		this.pComponentFilter = new ComponentFilterElements();
		this.pSimulationRule = new SimulationRuleElements();
		this.pSimulation = new SimulationElements();
		this.pEnvironementEventSource = new EnvironementEventSourceElements();
		this.pPeriodicEnvironementEventSource = new PeriodicEnvironementEventSourceElements();
		this.pEnvironmentSwitch = new EnvironmentSwitchElements();
		this.pEnvironmentDelay = new EnvironmentDelayElements();
		this.pEnvironmentSample = new EnvironmentSampleElements();
		this.pEnvironmentExternSimulation = new EnvironmentExternSimulationElements();
		this.pStochasticModel = new StochasticModelElements();
		this.pStochasticProcess = new StochasticProcessElements();
		this.pRandomVariable = new RandomVariableElements();
		this.pContinouosRandomVariable = new ContinouosRandomVariableElements();
		this.pDiscreteRandomVariable = new DiscreteRandomVariableElements();
		this.pNormalRandomVariable = new NormalRandomVariableElements();
		this.pWeibullRandomVariable = new WeibullRandomVariableElements();
		this.pGammaRandomVariable = new GammaRandomVariableElements();
		this.pExponentialRandomVariable = new ExponentialRandomVariableElements();
		this.pBernoulliRandomVariable = new BernoulliRandomVariableElements();
		this.pFittedExponentialRandomVariable = new FittedExponentialRandomVariableElements();
		this.pFittedNormalRandomVariable = new FittedNormalRandomVariableElements();
		this.pFittedGammaRandomVariable = new FittedGammaRandomVariableElements();
		this.pCategoricalProbabaility = new CategoricalProbabailityElements();
		this.pDiracProcess = new DiracProcessElements();
		this.pFittedGaussianProcess = new FittedGaussianProcessElements();
		this.pKernel = new KernelElements();
		this.pSumKernel = new SumKernelElements();
		this.pBrownianKernel = new BrownianKernelElements();
		this.pRBFKernel = new RBFKernelElements();
		this.pLinearKernel = new LinearKernelElements();
		this.pPeriodicKernel = new PeriodicKernelElements();
		this.pDataSource = new DataSourceElements();
		this.pInfluxDB = new InfluxDBElements();
		this.pPythonSimulation = new PythonSimulationElements();
		this.tDOUBLE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "hu.mit.gamma.environment.language.EnvironmentLanguage.DOUBLE");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("hu.mit.gamma.environment.language.EnvironmentLanguage".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public StatechartLanguageGrammarAccess getStatechartLanguageGrammarAccess() {
		return gaStatechartLanguage;
	}
	
	public ActionLanguageGrammarAccess getActionLanguageGrammarAccess() {
		return gaActionLanguage;
	}
	
	public ExpressionLanguageGrammarAccess getExpressionLanguageGrammarAccess() {
		return gaExpressionLanguage;
	}
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//@Override
	//Package InterfaceModel::Package:
	//	'package' name=ID ('import' imports+=[InterfaceModel::Package|STRING])* (constantDeclarations+=ConstantDeclaration |
	//	functionDeclarations+=FunctionDeclaration | typeDeclarations+=TypeDeclaration | components+=Component |
	//	interfaces+=Interface)*;
	public PackageElements getPackageAccess() {
		return pPackage;
	}
	
	public ParserRule getPackageRule() {
		return getPackageAccess().getRule();
	}
	
	//@Override
	//Component InterfaceModel::Component:
	//	SynchronousComponent | EnvironmentCompositeComponent | AnalysisComponent | RequirementComponent;
	public ComponentElements getComponentAccess() {
		return pComponent;
	}
	
	public ParserRule getComponentRule() {
		return getComponentAccess().getRule();
	}
	
	////defining Analysis and Requirement models
	//RequirementComponent AnalysisModel::RequirementComponent:
	//	'requirement' name=ID ('(' (parameterDeclarations+=ParameterDeclaration (','
	//	parameterDeclarations+=ParameterDeclaration)*)? ')')?
	//	'{'
	//	'in' analyzedComponent=EnvironmentCompositeComponentInstance
	//	aspect=AnalysisAspect
	//	requirement+=RequirementAspect
	//	conditions+=AnalysisCondition*
	//	'}';
	public RequirementComponentElements getRequirementComponentAccess() {
		return pRequirementComponent;
	}
	
	public ParserRule getRequirementComponentRule() {
		return getRequirementComponentAccess().getRule();
	}
	
	//RequirementAspect AnalysisModel::RequirementAspect:
	//	LowerThan | GreaterThan | IsBetween;
	public RequirementAspectElements getRequirementAspectAccess() {
		return pRequirementAspect;
	}
	
	public ParserRule getRequirementAspectRule() {
		return getRequirementAspectAccess().getRule();
	}
	
	//LowerThan AnalysisModel::LowerThan:
	//	'lower than' value=DOUBLE ('description' description=STRING)?;
	public LowerThanElements getLowerThanAccess() {
		return pLowerThan;
	}
	
	public ParserRule getLowerThanRule() {
		return getLowerThanAccess().getRule();
	}
	
	//GreaterThan AnalysisModel::GreaterThan:
	//	'greater than' value=DOUBLE ('description' description=STRING)?;
	public GreaterThanElements getGreaterThanAccess() {
		return pGreaterThan;
	}
	
	public ParserRule getGreaterThanRule() {
		return getGreaterThanAccess().getRule();
	}
	
	//IsBetween AnalysisModel::IsBetween:
	//	'in' '[' lowerBound=DOUBLE ',' upperBound=DOUBLE ']' ('description' description=STRING)?;
	public IsBetweenElements getIsBetweenAccess() {
		return pIsBetween;
	}
	
	public ParserRule getIsBetweenRule() {
		return getIsBetweenAccess().getRule();
	}
	
	//AnalysisComponent AnalysisModel::AnalysisComponent:
	//	'analysis' name=ID ('(' (parameterDeclarations+=ParameterDeclaration (',' parameterDeclarations+=ParameterDeclaration)
	//	*)? ')')?
	//	'{'
	//	'in' analyzedComponent=EnvironmentCompositeComponentInstance
	//	aspect=AnalysisAspect ("simulation" "time" "=" simulationTime=DOUBLE)? ("simulation" "number" "="
	//	simulationNumber=INTEGER)?
	//	conditions+=AnalysisCondition*
	//	'}';
	public AnalysisComponentElements getAnalysisComponentAccess() {
		return pAnalysisComponent;
	}
	
	public ParserRule getAnalysisComponentRule() {
		return getAnalysisComponentAccess().getRule();
	}
	
	//AnalysisAspect AnalysisModel::AnalysisAspect:
	//	Probability | TimedProbability | TimeBoundedProbability | MeanTime | Frequency;
	public AnalysisAspectElements getAnalysisAspectAccess() {
		return pAnalysisAspect;
	}
	
	public ParserRule getAnalysisAspectRule() {
		return getAnalysisAspectAccess().getRule();
	}
	
	//MeanParameter AnalysisModel::MeanParameter:
	//	'mean' 'parameter' 'of' event=ComponentPortEventReference;
	public MeanParameterElements getMeanParameterAccess() {
		return pMeanParameter;
	}
	
	public ParserRule getMeanParameterRule() {
		return getMeanParameterAccess().getRule();
	}
	
	//ParameterDistribution AnalysisModel::ParameterDistribution:
	//	'parameter' 'distribution' 'of' event=ComponentPortEventReference;
	public ParameterDistributionElements getParameterDistributionAccess() {
		return pParameterDistribution;
	}
	
	public ParserRule getParameterDistributionRule() {
		return getParameterDistributionAccess().getRule();
	}
	
	//Probability AnalysisModel::Probability:
	//	'probability' 'of' event=ComponentPortEventReference;
	public ProbabilityElements getProbabilityAccess() {
		return pProbability;
	}
	
	public ParserRule getProbabilityRule() {
		return getProbabilityAccess().getRule();
	}
	
	//TimedProbability AnalysisModel::TimedProbability:
	//	'probability' 'of' event=ComponentPortEventReference 'until' timeLimit=DOUBLE;
	public TimedProbabilityElements getTimedProbabilityAccess() {
		return pTimedProbability;
	}
	
	public ParserRule getTimedProbabilityRule() {
		return getTimedProbabilityAccess().getRule();
	}
	
	//TimeBoundedProbability AnalysisModel::TimeBoundedProbability:
	//	'probability' 'of' event=ComponentPortEventReference 'from' lowerBound=DOUBLE 'to' upperBound=DOUBLE;
	public TimeBoundedProbabilityElements getTimeBoundedProbabilityAccess() {
		return pTimeBoundedProbability;
	}
	
	public ParserRule getTimeBoundedProbabilityRule() {
		return getTimeBoundedProbabilityAccess().getRule();
	}
	
	//MeanTime AnalysisModel::MeanTime:
	//	'mean' 'time' 'of' event=ComponentPortEventReference;
	public MeanTimeElements getMeanTimeAccess() {
		return pMeanTime;
	}
	
	public ParserRule getMeanTimeRule() {
		return getMeanTimeAccess().getRule();
	}
	
	//Frequency AnalysisModel::Frequency:
	//	'frequency' 'of' event=ComponentPortEventReference;
	public FrequencyElements getFrequencyAccess() {
		return pFrequency;
	}
	
	public ParserRule getFrequencyRule() {
		return getFrequencyAccess().getRule();
	}
	
	//AssumeRaised AnalysisModel::AssumeRaised:
	//	'assume' event=ComponentPortEventReference 'raised';
	public AssumeRaisedElements getAssumeRaisedAccess() {
		return pAssumeRaised;
	}
	
	public ParserRule getAssumeRaisedRule() {
		return getAssumeRaisedAccess().getRule();
	}
	
	//AssumeNotRaised AnalysisModel::AssumeNotRaised:
	//	'assume' event=ComponentPortEventReference 'not' 'raised';
	public AssumeNotRaisedElements getAssumeNotRaisedAccess() {
		return pAssumeNotRaised;
	}
	
	public ParserRule getAssumeNotRaisedRule() {
		return getAssumeNotRaisedAccess().getRule();
	}
	
	//AnalysisCondition AnalysisModel::AnalysisCondition:
	//	AssumeRaised | AssumeNotRaised;
	public AnalysisConditionElements getAnalysisConditionAccess() {
		return pAnalysisCondition;
	}
	
	public ParserRule getAnalysisConditionRule() {
		return getAnalysisConditionAccess().getRule();
	}
	
	//ComponentPortEventReference AnalysisModel::ComponentPortEventReference:
	//	'event' '[' component=[EnvironmentModel::EnvironmentCompositeComponentInstance] '.' port=[InterfaceModel::Port] '.'
	//	event=[InterfaceModel::Event] ']';
	public ComponentPortEventReferenceElements getComponentPortEventReferenceAccess() {
		return pComponentPortEventReference;
	}
	
	public ParserRule getComponentPortEventReferenceRule() {
		return getComponentPortEventReferenceAccess().getRule();
	}
	
	////defining Environment models
	//EnvironmentCompositeComponent EnvironmentModel::EnvironmentCompositeComponent:
	//	'environment' name=ID ('(' (parameterDeclarations+=ParameterDeclaration (','
	//	parameterDeclarations+=ParameterDeclaration)*)? ')')? ('[' (ports+=Port (','? ports+=Port)*)? ']')?
	//	'{' (components+=SynchronousComponentInstance | environmentComponents+=EnvironmentComponentInstance |
	//	portBindings+=PortBinding | channels+=Channel |
	//	'failure' 'propagation' executionList+=[CompositeModel::SynchronousComponentInstance] (','
	//	executionList+=[CompositeModel::SynchronousComponentInstance])*)*
	//	'}';
	public EnvironmentCompositeComponentElements getEnvironmentCompositeComponentAccess() {
		return pEnvironmentCompositeComponent;
	}
	
	public ParserRule getEnvironmentCompositeComponentRule() {
		return getEnvironmentCompositeComponentAccess().getRule();
	}
	
	///* 
	// * @Override
	// * Package returns StatechartModel::Package:
	// * 	super
	// ;*/
	//// Composition language 
	//EnvironmentComponentInstance EnvironmentModel::EnvironmentComponentInstance:
	//	ElementaryEnvironmentComponentInstance | EnvironmentCompositeComponentInstance;
	public EnvironmentComponentInstanceElements getEnvironmentComponentInstanceAccess() {
		return pEnvironmentComponentInstance;
	}
	
	public ParserRule getEnvironmentComponentInstanceRule() {
		return getEnvironmentComponentInstanceAccess().getRule();
	}
	
	//ElementaryEnvironmentComponentInstance EnvironmentModel::ElementaryEnvironmentComponentInstance:
	//	EnvironementEventSource | PeriodicEnvironementEventSource | EnvironmentDelay | EnvironmentSample | EnvironmentSwitch
	//	| EnvironmentExternSimulation;
	public ElementaryEnvironmentComponentInstanceElements getElementaryEnvironmentComponentInstanceAccess() {
		return pElementaryEnvironmentComponentInstance;
	}
	
	public ParserRule getElementaryEnvironmentComponentInstanceRule() {
		return getElementaryEnvironmentComponentInstanceAccess().getRule();
	}
	
	//EnvironmentCompositeComponentInstance EnvironmentModel::EnvironmentCompositeComponentInstance:
	//	'environment' 'component' name=ID ':' type=[EnvironmentModel::EnvironmentCompositeComponent] ('('
	//	arguments+=Expression (',' arguments+=Expression)* ')')?;
	public EnvironmentCompositeComponentInstanceElements getEnvironmentCompositeComponentInstanceAccess() {
		return pEnvironmentCompositeComponentInstance;
	}
	
	public ParserRule getEnvironmentCompositeComponentInstanceRule() {
		return getEnvironmentCompositeComponentInstanceAccess().getRule();
	}
	
	//StochasticRule EnvironmentModel::StochasticRule:
	//	(filter+=Filter ",")* filter+=Filter ":" stochasticModel=StochasticModel;
	public StochasticRuleElements getStochasticRuleAccess() {
		return pStochasticRule;
	}
	
	public ParserRule getStochasticRuleRule() {
		return getStochasticRuleAccess().getRule();
	}
	
	//FilterSimulationRule EnvironmentModel::SimulationRule:
	//	(filter+=Filter ",")* filter+=Filter ":" simulation=Simulation;
	public FilterSimulationRuleElements getFilterSimulationRuleAccess() {
		return pFilterSimulationRule;
	}
	
	public ParserRule getFilterSimulationRuleRule() {
		return getFilterSimulationRuleAccess().getRule();
	}
	
	//SwitchRule EnvironmentModel::StochasticRule:
	//	filter+=PortFilter ':' stochasticModel=CategoricalProbabaility;
	public SwitchRuleElements getSwitchRuleAccess() {
		return pSwitchRule;
	}
	
	public ParserRule getSwitchRuleRule() {
		return getSwitchRuleAccess().getRule();
	}
	
	//DelayRule EnvironmentModel::StochasticRule:
	//	(filter+=PortFilter | filter+=ComponentFilter) ':' (stochasticModel=ContinouosRandomVariable |
	//	stochasticModel=StochasticProcess);
	public DelayRuleElements getDelayRuleAccess() {
		return pDelayRule;
	}
	
	public ParserRule getDelayRuleRule() {
		return getDelayRuleAccess().getRule();
	}
	
	//Filter EnvironmentModel::Filter:
	//	EventFilter | PortFilter | ComponentFilter;
	public FilterElements getFilterAccess() {
		return pFilter;
	}
	
	public ParserRule getFilterRule() {
		return getFilterAccess().getRule();
	}
	
	//EventFilter EnvironmentModel::EventFilter:
	//	event=PortEventReference;
	public EventFilterElements getEventFilterAccess() {
		return pEventFilter;
	}
	
	public ParserRule getEventFilterRule() {
		return getEventFilterAccess().getRule();
	}
	
	//PortFilter EnvironmentModel::PortFilter:
	//	port=[InterfaceModel::Port] "." "*";
	public PortFilterElements getPortFilterAccess() {
		return pPortFilter;
	}
	
	public ParserRule getPortFilterRule() {
		return getPortFilterAccess().getRule();
	}
	
	//ComponentFilter EnvironmentModel::ComponentFilter:
	//	{EnvironmentModel::ComponentFilter} "*" "." "*";
	public ComponentFilterElements getComponentFilterAccess() {
		return pComponentFilter;
	}
	
	public ParserRule getComponentFilterRule() {
		return getComponentFilterAccess().getRule();
	}
	
	//SimulationRule EnvironmentModel::SimulationRule:
	//	simulation=Simulation;
	public SimulationRuleElements getSimulationRuleAccess() {
		return pSimulationRule;
	}
	
	public ParserRule getSimulationRuleRule() {
		return getSimulationRuleAccess().getRule();
	}
	
	//Simulation EnvironmentModel::Simulation:
	//	"class" "=" simulationClassName=STRING;
	public SimulationElements getSimulationAccess() {
		return pSimulation;
	}
	
	public ParserRule getSimulationRule() {
		return getSimulationAccess().getRule();
	}
	
	//EnvironementEventSource EnvironmentModel::EnvironmentEventSource:
	//	'source' name=ID (outports+=Port ",")* outports+=Port "{" (behaviorRules+=StochasticRule ";")+
	//	"}";
	public EnvironementEventSourceElements getEnvironementEventSourceAccess() {
		return pEnvironementEventSource;
	}
	
	public ParserRule getEnvironementEventSourceRule() {
		return getEnvironementEventSourceAccess().getRule();
	}
	
	//PeriodicEnvironementEventSource EnvironmentModel::EnvironmentPeriodicEventSource:
	//	'periodic' 'source' name=ID (outports+=Port ",")* outports+=Port "{" (behaviorRules+=(StochasticRule |
	//	FilterSimulationRule) ";")+
	//	"}";
	public PeriodicEnvironementEventSourceElements getPeriodicEnvironementEventSourceAccess() {
		return pPeriodicEnvironementEventSource;
	}
	
	public ParserRule getPeriodicEnvironementEventSourceRule() {
		return getPeriodicEnvironementEventSourceAccess().getRule();
	}
	
	//EnvironmentSwitch EnvironmentModel::EnvironmentSwitch:
	//	'switch' name=ID inports+=Port "->" (outports+=Port ",")* outports+=Port "{" (behaviorRules+=SwitchRule ";")+
	//	"}";
	public EnvironmentSwitchElements getEnvironmentSwitchAccess() {
		return pEnvironmentSwitch;
	}
	
	public ParserRule getEnvironmentSwitchRule() {
		return getEnvironmentSwitchAccess().getRule();
	}
	
	//EnvironmentDelay EnvironmentModel::EnvironmentDelay:
	//	'delay' name=ID inports+=Port "->" outports+=Port "{" (behaviorRules+=(DelayRule | FilterSimulationRule) ";")+
	//	"}";
	public EnvironmentDelayElements getEnvironmentDelayAccess() {
		return pEnvironmentDelay;
	}
	
	public ParserRule getEnvironmentDelayRule() {
		return getEnvironmentDelayAccess().getRule();
	}
	
	//EnvironmentSample EnvironmentModel::EnvironmentSample:
	//	'sample' name=ID inports+=Port "->" outports+=Port "{" (behaviorRules+=(StochasticRule | FilterSimulationRule) ";")+
	//	"}";
	public EnvironmentSampleElements getEnvironmentSampleAccess() {
		return pEnvironmentSample;
	}
	
	public ParserRule getEnvironmentSampleRule() {
		return getEnvironmentSampleAccess().getRule();
	}
	
	//EnvironmentExternSimulation EnvironmentModel::EnvironmentExternSimulation:
	//	'simulation' name=ID ((inports+=Port ",")* inports+=Port "<->" | "|->") (outports+=Port ",")* outports+=Port "with"
	//	behaviorRules+=SimulationRule;
	public EnvironmentExternSimulationElements getEnvironmentExternSimulationAccess() {
		return pEnvironmentExternSimulation;
	}
	
	public ParserRule getEnvironmentExternSimulationRule() {
		return getEnvironmentExternSimulationAccess().getRule();
	}
	
	//StochasticModel StochasticModel::StochasticModel:
	//	StochasticProcess | RandomVariable;
	public StochasticModelElements getStochasticModelAccess() {
		return pStochasticModel;
	}
	
	public ParserRule getStochasticModelRule() {
		return getStochasticModelAccess().getRule();
	}
	
	//StochasticProcess StochasticModel::StochasticProcess:
	//	FittedGaussianProcess | DiracProcess;
	public StochasticProcessElements getStochasticProcessAccess() {
		return pStochasticProcess;
	}
	
	public ParserRule getStochasticProcessRule() {
		return getStochasticProcessAccess().getRule();
	}
	
	//RandomVariable StochasticModel::RandomVariable:
	//	ContinouosRandomVariable | DiscreteRandomVariable;
	public RandomVariableElements getRandomVariableAccess() {
		return pRandomVariable;
	}
	
	public ParserRule getRandomVariableRule() {
		return getRandomVariableAccess().getRule();
	}
	
	//ContinouosRandomVariable StochasticModel::ContinouosRandomVariable:
	//	NormalRandomVariable | ExponentialRandomVariable | WeibullRandomVariable | GammaRandomVariable |
	//	FittedExponentialRandomVariable | FittedGammaRandomVariable | FittedNormalRandomVariable;
	public ContinouosRandomVariableElements getContinouosRandomVariableAccess() {
		return pContinouosRandomVariable;
	}
	
	public ParserRule getContinouosRandomVariableRule() {
		return getContinouosRandomVariableAccess().getRule();
	}
	
	//DiscreteRandomVariable StochasticModel::DiscreteRandomVariable:
	//	BernoulliRandomVariable;
	public DiscreteRandomVariableElements getDiscreteRandomVariableAccess() {
		return pDiscreteRandomVariable;
	}
	
	public ParserRule getDiscreteRandomVariableRule() {
		return getDiscreteRandomVariableAccess().getRule();
	}
	
	//NormalRandomVariable StochasticModel::NormalRandomVariable:
	//	'normal' 'mean' '=' mean=DOUBLE ',' 'scale' '=' scale=DOUBLE;
	public NormalRandomVariableElements getNormalRandomVariableAccess() {
		return pNormalRandomVariable;
	}
	
	public ParserRule getNormalRandomVariableRule() {
		return getNormalRandomVariableAccess().getRule();
	}
	
	//WeibullRandomVariable StochasticModel::WeibullRandomVariable:
	//	('Weibull' | 'weibull') 'scale' '=' scale=DOUBLE ',' 'shape' '=' shape=DOUBLE;
	public WeibullRandomVariableElements getWeibullRandomVariableAccess() {
		return pWeibullRandomVariable;
	}
	
	public ParserRule getWeibullRandomVariableRule() {
		return getWeibullRandomVariableAccess().getRule();
	}
	
	//GammaRandomVariable StochasticModel::GammaRandomVariable:
	//	'gamma' 'scale' '=' scale=DOUBLE ',' 'shape' '=' shape=DOUBLE;
	public GammaRandomVariableElements getGammaRandomVariableAccess() {
		return pGammaRandomVariable;
	}
	
	public ParserRule getGammaRandomVariableRule() {
		return getGammaRandomVariableAccess().getRule();
	}
	
	//ExponentialRandomVariable StochasticModel::ExponentialRandomVariable:
	//	'exponential' 'rate=' rate=DOUBLE;
	public ExponentialRandomVariableElements getExponentialRandomVariableAccess() {
		return pExponentialRandomVariable;
	}
	
	public ParserRule getExponentialRandomVariableRule() {
		return getExponentialRandomVariableAccess().getRule();
	}
	
	//BernoulliRandomVariable StochasticModel::BernoulliRandomVariable:
	//	'bernoulli' 'prob=' probability=DOUBLE;
	public BernoulliRandomVariableElements getBernoulliRandomVariableAccess() {
		return pBernoulliRandomVariable;
	}
	
	public ParserRule getBernoulliRandomVariableRule() {
		return getBernoulliRandomVariableAccess().getRule();
	}
	
	//FittedExponentialRandomVariable StochasticModel::FittedExponentialRandomVariable:
	//	'fitted' 'exponential' 'lr' '=' lr=DOUBLE ',' 'source' '=' source=DataSource;
	public FittedExponentialRandomVariableElements getFittedExponentialRandomVariableAccess() {
		return pFittedExponentialRandomVariable;
	}
	
	public ParserRule getFittedExponentialRandomVariableRule() {
		return getFittedExponentialRandomVariableAccess().getRule();
	}
	
	//FittedNormalRandomVariable StochasticModel::FittedNormalRandomVariable:
	//	'fitted' 'normal' 'lr' '=' lr=DOUBLE ',' 'source' '=' source=DataSource;
	public FittedNormalRandomVariableElements getFittedNormalRandomVariableAccess() {
		return pFittedNormalRandomVariable;
	}
	
	public ParserRule getFittedNormalRandomVariableRule() {
		return getFittedNormalRandomVariableAccess().getRule();
	}
	
	//FittedGammaRandomVariable StochasticModel::FittedGammaRandomVariable:
	//	'fitted' 'gamma' 'lr' '=' lr=DOUBLE ',' 'source' '=' source=DataSource;
	public FittedGammaRandomVariableElements getFittedGammaRandomVariableAccess() {
		return pFittedGammaRandomVariable;
	}
	
	public ParserRule getFittedGammaRandomVariableRule() {
		return getFittedGammaRandomVariableAccess().getRule();
	}
	
	//CategoricalProbabaility StochasticModel::CategoricalProbabaility:
	//	probability=DOUBLE;
	public CategoricalProbabailityElements getCategoricalProbabailityAccess() {
		return pCategoricalProbabaility;
	}
	
	public ParserRule getCategoricalProbabailityRule() {
		return getCategoricalProbabailityAccess().getRule();
	}
	
	//DiracProcess StochasticModel::DiracProcess:
	//	"Dirac" "source" "=" source=DataSource;
	public DiracProcessElements getDiracProcessAccess() {
		return pDiracProcess;
	}
	
	public ParserRule getDiracProcessRule() {
		return getDiracProcessAccess().getRule();
	}
	
	//FittedGaussianProcess StochasticModel::FittedGaussianProcess:
	//	("GP" | "Gauss" "Process") "kernel" "=" kernel=Kernel ("," "lr" "=" lr=DOUBLE)? "," "source" "=" source=DataSource;
	public FittedGaussianProcessElements getFittedGaussianProcessAccess() {
		return pFittedGaussianProcess;
	}
	
	public ParserRule getFittedGaussianProcessRule() {
		return getFittedGaussianProcessAccess().getRule();
	}
	
	//Kernel StochasticModel::Kernel:
	//	BrownianKernel | LinearKernel | RBFKernel | PeriodicKernel | SumKernel;
	public KernelElements getKernelAccess() {
		return pKernel;
	}
	
	public ParserRule getKernelRule() {
		return getKernelAccess().getRule();
	}
	
	//SumKernel StochasticModel::SumKernel:
	//	"(" kernels+=Kernel "+" kernels+=Kernel ")";
	public SumKernelElements getSumKernelAccess() {
		return pSumKernel;
	}
	
	public ParserRule getSumKernelRule() {
		return getSumKernelAccess().getRule();
	}
	
	//BrownianKernel StochasticModel::BrownianKernel:
	//	{StochasticModel::BrownianKernel} "Brownian";
	public BrownianKernelElements getBrownianKernelAccess() {
		return pBrownianKernel;
	}
	
	public ParserRule getBrownianKernelRule() {
		return getBrownianKernelAccess().getRule();
	}
	
	//RBFKernel StochasticModel::RBFKernel:
	//	{StochasticModel::RBFKernel} "RBF";
	public RBFKernelElements getRBFKernelAccess() {
		return pRBFKernel;
	}
	
	public ParserRule getRBFKernelRule() {
		return getRBFKernelAccess().getRule();
	}
	
	//LinearKernel StochasticModel::LinearKernel:
	//	{StochasticModel::LinearKernel} "Linear";
	public LinearKernelElements getLinearKernelAccess() {
		return pLinearKernel;
	}
	
	public ParserRule getLinearKernelRule() {
		return getLinearKernelAccess().getRule();
	}
	
	//PeriodicKernel StochasticModel::PeriodicKernel:
	//	{StochasticModel::PeriodicKernel} "Periodic";
	public PeriodicKernelElements getPeriodicKernelAccess() {
		return pPeriodicKernel;
	}
	
	public ParserRule getPeriodicKernelRule() {
		return getPeriodicKernelAccess().getRule();
	}
	
	//DataSource StochasticModel::DataSource:
	//	InfluxDB | PythonSimulation;
	public DataSourceElements getDataSourceAccess() {
		return pDataSource;
	}
	
	public ParserRule getDataSourceRule() {
		return getDataSourceAccess().getRule();
	}
	
	//InfluxDB StochasticModel::InfluxDB:
	//	"InfluxDB" "(" "db" ":" dbname=STRING "," "ip" ":" ip=STRING "," "port" ":" port=STRING "," "query" ":" query=STRING
	//	")";
	public InfluxDBElements getInfluxDBAccess() {
		return pInfluxDB;
	}
	
	public ParserRule getInfluxDBRule() {
		return getInfluxDBAccess().getRule();
	}
	
	//PythonSimulation StochasticModel::PythonSimulation:
	//	"Python" "(" script=STRING ")";
	public PythonSimulationElements getPythonSimulationAccess() {
		return pPythonSimulation;
	}
	
	public ParserRule getPythonSimulationRule() {
		return getPythonSimulationAccess().getRule();
	}
	
	//terminal DOUBLE returns Ecore::EDouble:
	//	'0'..'9'+ ('.' '0'..'9'+);
	public TerminalRule getDOUBLERule() {
		return tDOUBLE;
	}
	
	//TimeoutDeclaration:
	//	'timeout' name=ID;
	public StatechartLanguageGrammarAccess.TimeoutDeclarationElements getTimeoutDeclarationAccess() {
		return gaStatechartLanguage.getTimeoutDeclarationAccess();
	}
	
	public ParserRule getTimeoutDeclarationRule() {
		return getTimeoutDeclarationAccess().getRule();
	}
	
	//enum And returns BinaryType:
	//	AND='&&';
	public StatechartLanguageGrammarAccess.AndElements getAndAccess() {
		return gaStatechartLanguage.getAndAccess();
	}
	
	public EnumRule getAndRule() {
		return getAndAccess().getRule();
	}
	
	//enum Or returns BinaryType:
	//	OR='||';
	public StatechartLanguageGrammarAccess.OrElements getOrAccess() {
		return gaStatechartLanguage.getOrAccess();
	}
	
	public EnumRule getOrRule() {
		return getOrAccess().getRule();
	}
	
	//enum Equal returns BinaryType:
	//	EQUAL='==';
	public StatechartLanguageGrammarAccess.EqualElements getEqualAccess() {
		return gaStatechartLanguage.getEqualAccess();
	}
	
	public EnumRule getEqualRule() {
		return getEqualAccess().getRule();
	}
	
	//enum Xor returns BinaryType:
	//	XOR='^';
	public StatechartLanguageGrammarAccess.XorElements getXorAccess() {
		return gaStatechartLanguage.getXorAccess();
	}
	
	public EnumRule getXorRule() {
		return getXorAccess().getRule();
	}
	
	//enum Imply returns BinaryType:
	//	IMPLY='->';
	public StatechartLanguageGrammarAccess.ImplyElements getImplyAccess() {
		return gaStatechartLanguage.getImplyAccess();
	}
	
	public EnumRule getImplyRule() {
		return getImplyAccess().getRule();
	}
	
	//Trigger InterfaceModel::Trigger:
	//	OnCycleTrigger | AnyTrigger | ComplexTrigger;
	public StatechartLanguageGrammarAccess.TriggerElements getTriggerAccess() {
		return gaStatechartLanguage.getTriggerAccess();
	}
	
	public ParserRule getTriggerRule() {
		return getTriggerAccess().getRule();
	}
	
	///**
	// * Used by ControlSpecification.
	// * The other trigger rules have precedence rules and defined according to left recursion.
	// */
	//SimpleTrigger InterfaceModel::SimpleTrigger:
	//	OnCycleTrigger | AnyTrigger | OpaqueTrigger | EventTrigger;
	public StatechartLanguageGrammarAccess.SimpleTriggerElements getSimpleTriggerAccess() {
		return gaStatechartLanguage.getSimpleTriggerAccess();
	}
	
	public ParserRule getSimpleTriggerRule() {
		return getSimpleTriggerAccess().getRule();
	}
	
	//ComplexTrigger InterfaceModel::Trigger:
	//	BinaryTrigger;
	public StatechartLanguageGrammarAccess.ComplexTriggerElements getComplexTriggerAccess() {
		return gaStatechartLanguage.getComplexTriggerAccess();
	}
	
	public ParserRule getComplexTriggerRule() {
		return getComplexTriggerAccess().getRule();
	}
	
	//BinaryTrigger InterfaceModel::Trigger:
	//	EqualTrigger;
	public StatechartLanguageGrammarAccess.BinaryTriggerElements getBinaryTriggerAccess() {
		return gaStatechartLanguage.getBinaryTriggerAccess();
	}
	
	public ParserRule getBinaryTriggerRule() {
		return getBinaryTriggerAccess().getRule();
	}
	
	//EqualTrigger InterfaceModel::Trigger:
	//	ImplyTrigger ({BinaryTrigger.leftOperand=current} type=Equal rightOperand=EqualTrigger)?;
	public StatechartLanguageGrammarAccess.EqualTriggerElements getEqualTriggerAccess() {
		return gaStatechartLanguage.getEqualTriggerAccess();
	}
	
	public ParserRule getEqualTriggerRule() {
		return getEqualTriggerAccess().getRule();
	}
	
	//ImplyTrigger InterfaceModel::Trigger:
	//	OrTrigger ({BinaryTrigger.leftOperand=current} type=Imply rightOperand=ImplyTrigger)?;
	public StatechartLanguageGrammarAccess.ImplyTriggerElements getImplyTriggerAccess() {
		return gaStatechartLanguage.getImplyTriggerAccess();
	}
	
	public ParserRule getImplyTriggerRule() {
		return getImplyTriggerAccess().getRule();
	}
	
	//OrTrigger InterfaceModel::Trigger:
	//	XorTrigger ({BinaryTrigger.leftOperand=current} type=Or rightOperand=OrTrigger)?;
	public StatechartLanguageGrammarAccess.OrTriggerElements getOrTriggerAccess() {
		return gaStatechartLanguage.getOrTriggerAccess();
	}
	
	public ParserRule getOrTriggerRule() {
		return getOrTriggerAccess().getRule();
	}
	
	//XorTrigger InterfaceModel::Trigger:
	//	AndTrigger ({BinaryTrigger.leftOperand=current} type=Xor rightOperand=XorTrigger)?;
	public StatechartLanguageGrammarAccess.XorTriggerElements getXorTriggerAccess() {
		return gaStatechartLanguage.getXorTriggerAccess();
	}
	
	public ParserRule getXorTriggerRule() {
		return getXorTriggerAccess().getRule();
	}
	
	//AndTrigger InterfaceModel::Trigger:
	//	BinaryOperand ({BinaryTrigger.leftOperand=current} type=And rightOperand=AndTrigger)?;
	public StatechartLanguageGrammarAccess.AndTriggerElements getAndTriggerAccess() {
		return gaStatechartLanguage.getAndTriggerAccess();
	}
	
	public ParserRule getAndTriggerRule() {
		return getAndTriggerAccess().getRule();
	}
	
	//BinaryOperand InterfaceModel::Trigger:
	//	UnaryTrigger | ParenthesesTrigger;
	public StatechartLanguageGrammarAccess.BinaryOperandElements getBinaryOperandAccess() {
		return gaStatechartLanguage.getBinaryOperandAccess();
	}
	
	public ParserRule getBinaryOperandRule() {
		return getBinaryOperandAccess().getRule();
	}
	
	//enum Not returns UnaryType:
	//	NOT='!';
	public StatechartLanguageGrammarAccess.NotElements getNotAccess() {
		return gaStatechartLanguage.getNotAccess();
	}
	
	public EnumRule getNotRule() {
		return getNotAccess().getRule();
	}
	
	//UnaryTrigger InterfaceModel::Trigger:
	//	NotTrigger | EventTrigger | OpaqueTrigger;
	public StatechartLanguageGrammarAccess.UnaryTriggerElements getUnaryTriggerAccess() {
		return gaStatechartLanguage.getUnaryTriggerAccess();
	}
	
	public ParserRule getUnaryTriggerRule() {
		return getUnaryTriggerAccess().getRule();
	}
	
	//NotTrigger UnaryTrigger:
	//	type=Not operand=ParenthesesTrigger;
	public StatechartLanguageGrammarAccess.NotTriggerElements getNotTriggerAccess() {
		return gaStatechartLanguage.getNotTriggerAccess();
	}
	
	public ParserRule getNotTriggerRule() {
		return getNotTriggerAccess().getRule();
	}
	
	//ParenthesesTrigger InterfaceModel::Trigger:
	//	'(' EqualTrigger ')';
	public StatechartLanguageGrammarAccess.ParenthesesTriggerElements getParenthesesTriggerAccess() {
		return gaStatechartLanguage.getParenthesesTriggerAccess();
	}
	
	public ParserRule getParenthesesTriggerRule() {
		return getParenthesesTriggerAccess().getRule();
	}
	
	//OnCycleTrigger:
	//	{OnCycleTrigger} 'cycle';
	public StatechartLanguageGrammarAccess.OnCycleTriggerElements getOnCycleTriggerAccess() {
		return gaStatechartLanguage.getOnCycleTriggerAccess();
	}
	
	public ParserRule getOnCycleTriggerRule() {
		return getOnCycleTriggerAccess().getRule();
	}
	
	//AnyTrigger InterfaceModel::AnyTrigger:
	//	{InterfaceModel::AnyTrigger} 'any';
	public StatechartLanguageGrammarAccess.AnyTriggerElements getAnyTriggerAccess() {
		return gaStatechartLanguage.getAnyTriggerAccess();
	}
	
	public ParserRule getAnyTriggerRule() {
		return getAnyTriggerAccess().getRule();
	}
	
	//OpaqueTrigger:
	//	trigger=STRING;
	public StatechartLanguageGrammarAccess.OpaqueTriggerElements getOpaqueTriggerAccess() {
		return gaStatechartLanguage.getOpaqueTriggerAccess();
	}
	
	public ParserRule getOpaqueTriggerRule() {
		return getOpaqueTriggerAccess().getRule();
	}
	
	//EventTrigger InterfaceModel::EventTrigger:
	//	eventReference=EventReference;
	public StatechartLanguageGrammarAccess.EventTriggerElements getEventTriggerAccess() {
		return gaStatechartLanguage.getEventTriggerAccess();
	}
	
	public ParserRule getEventTriggerRule() {
		return getEventTriggerAccess().getRule();
	}
	
	//EventReference InterfaceModel::EventReference:
	//	ClockTickReference | TimeoutEventReference | AnyPortEventReference | PortEventReference;
	public StatechartLanguageGrammarAccess.EventReferenceElements getEventReferenceAccess() {
		return gaStatechartLanguage.getEventReferenceAccess();
	}
	
	public ParserRule getEventReferenceRule() {
		return getEventReferenceAccess().getRule();
	}
	
	//ClockTickReference:
	//	clock=[InterfaceModel::Clock];
	public StatechartLanguageGrammarAccess.ClockTickReferenceElements getClockTickReferenceAccess() {
		return gaStatechartLanguage.getClockTickReferenceAccess();
	}
	
	public ParserRule getClockTickReferenceRule() {
		return getClockTickReferenceAccess().getRule();
	}
	
	//TimeoutEventReference:
	//	'timeout' timeout=[TimeoutDeclaration];
	public StatechartLanguageGrammarAccess.TimeoutEventReferenceElements getTimeoutEventReferenceAccess() {
		return gaStatechartLanguage.getTimeoutEventReferenceAccess();
	}
	
	public ParserRule getTimeoutEventReferenceRule() {
		return getTimeoutEventReferenceAccess().getRule();
	}
	
	//AnyPortEventReference:
	//	port=[InterfaceModel::Port] '.' 'any';
	public StatechartLanguageGrammarAccess.AnyPortEventReferenceElements getAnyPortEventReferenceAccess() {
		return gaStatechartLanguage.getAnyPortEventReferenceAccess();
	}
	
	public ParserRule getAnyPortEventReferenceRule() {
		return getAnyPortEventReferenceAccess().getRule();
	}
	
	//PortEventReference:
	//	port=[InterfaceModel::Port] '.' event=[InterfaceModel::Event];
	public StatechartLanguageGrammarAccess.PortEventReferenceElements getPortEventReferenceAccess() {
		return gaStatechartLanguage.getPortEventReferenceAccess();
	}
	
	public ParserRule getPortEventReferenceRule() {
		return getPortEventReferenceAccess().getRule();
	}
	
	//Port InterfaceModel::Port:
	//	'port' name=ID ':' interfaceRealization=InterfaceRealization;
	public StatechartLanguageGrammarAccess.PortElements getPortAccess() {
		return gaStatechartLanguage.getPortAccess();
	}
	
	public ParserRule getPortRule() {
		return getPortAccess().getRule();
	}
	
	//InterfaceRealization InterfaceModel::InterfaceRealization:
	//	realizationMode=RealizationMode interface=[InterfaceModel::Interface];
	public StatechartLanguageGrammarAccess.InterfaceRealizationElements getInterfaceRealizationAccess() {
		return gaStatechartLanguage.getInterfaceRealizationAccess();
	}
	
	public ParserRule getInterfaceRealizationRule() {
		return getInterfaceRealizationAccess().getRule();
	}
	
	//enum RealizationMode returns InterfaceModel::RealizationMode:
	//	PROVIDED='provides' | REQUIRED='requires';
	public StatechartLanguageGrammarAccess.RealizationModeElements getRealizationModeAccess() {
		return gaStatechartLanguage.getRealizationModeAccess();
	}
	
	public EnumRule getRealizationModeRule() {
		return getRealizationModeAccess().getRule();
	}
	
	//StatechartDefinition:
	//	( ('@RegionSchedule' '=' schedulingOrder=SchedulingOrder)? & ('@OrthogonalRegionSchedule' '='
	//	orthogonalRegionSchedulingOrder=OrthogonalRegionSchedulingOrder)? & ('@TransitionPriority' '='
	//	transitionPriority=TransitionPriority)? & ('@GuardEvaluation' '=' guardEvaluation=GuardEvaluation)?
	//	& annotation=StatechartContractAnnotation?
	//	)
	//	'statechart' name=ID ('(' (parameterDeclarations+=ParameterDeclaration (','
	//	parameterDeclarations+=ParameterDeclaration)*)? ')')? ('[' (ports+=Port (','? ports+=Port)*)? ']')? '{'
	//	(variableDeclarations+=VariableDeclaration | timeoutDeclarations+=TimeoutDeclaration | transitions+=Transition)*
	//	regions+=Region (variableDeclarations+=VariableDeclaration | timeoutDeclarations+=TimeoutDeclaration |
	//	transitions+=Transition | regions+=Region)*
	//	functionDeclarations+=FunctionDeclaration*
	//	'}';
	public StatechartLanguageGrammarAccess.StatechartDefinitionElements getStatechartDefinitionAccess() {
		return gaStatechartLanguage.getStatechartDefinitionAccess();
	}
	
	public ParserRule getStatechartDefinitionRule() {
		return getStatechartDefinitionAccess().getRule();
	}
	
	//enum SchedulingOrder:
	//	TOP_DOWN='top-down' | BOTTOM_UP='bottom-up';
	public StatechartLanguageGrammarAccess.SchedulingOrderElements getSchedulingOrderAccess() {
		return gaStatechartLanguage.getSchedulingOrderAccess();
	}
	
	public EnumRule getSchedulingOrderRule() {
		return getSchedulingOrderAccess().getRule();
	}
	
	//enum OrthogonalRegionSchedulingOrder:
	//	SEQUENTIAL='sequential' | RANDOM='random';
	public StatechartLanguageGrammarAccess.OrthogonalRegionSchedulingOrderElements getOrthogonalRegionSchedulingOrderAccess() {
		return gaStatechartLanguage.getOrthogonalRegionSchedulingOrderAccess();
	}
	
	public EnumRule getOrthogonalRegionSchedulingOrderRule() {
		return getOrthogonalRegionSchedulingOrderAccess().getRule();
	}
	
	//enum TransitionPriority:
	//	OFF='off' | ORDER_BASED='order-based' | VALUE_BASED='value-based';
	public StatechartLanguageGrammarAccess.TransitionPriorityElements getTransitionPriorityAccess() {
		return gaStatechartLanguage.getTransitionPriorityAccess();
	}
	
	public EnumRule getTransitionPriorityRule() {
		return getTransitionPriorityAccess().getRule();
	}
	
	//enum GuardEvaluation:
	//	ON_THE_FLY='on-the-fly' | BEGINNING_OF_STEP='beginning-of-step';
	public StatechartLanguageGrammarAccess.GuardEvaluationElements getGuardEvaluationAccess() {
		return gaStatechartLanguage.getGuardEvaluationAccess();
	}
	
	public EnumRule getGuardEvaluationRule() {
		return getGuardEvaluationAccess().getRule();
	}
	
	//StatechartContractAnnotation StatechartAnnotation:
	//	ScenarioContractAnnotation | AdaptiveContractAnnotation | MissionPhaseAnnotation;
	public StatechartLanguageGrammarAccess.StatechartContractAnnotationElements getStatechartContractAnnotationAccess() {
		return gaStatechartLanguage.getStatechartContractAnnotationAccess();
	}
	
	public ParserRule getStatechartContractAnnotationRule() {
		return getStatechartContractAnnotationAccess().getRule();
	}
	
	//ScenarioContractAnnotation ContractModel::ScenarioContractAnnotation:
	//	'@ScenarioContractStatechart' '=' monitoredComponent=[InterfaceModel::Component] '('
	//	scenarioType=NotDefinedEventMode ')';
	public StatechartLanguageGrammarAccess.ScenarioContractAnnotationElements getScenarioContractAnnotationAccess() {
		return gaStatechartLanguage.getScenarioContractAnnotationAccess();
	}
	
	public ParserRule getScenarioContractAnnotationRule() {
		return getScenarioContractAnnotationAccess().getRule();
	}
	
	//enum NotDefinedEventMode returns ContractModel::NotDefinedEventMode:
	//	PERMISSIVE='permissive' | STRICT='strict';
	public StatechartLanguageGrammarAccess.NotDefinedEventModeElements getNotDefinedEventModeAccess() {
		return gaStatechartLanguage.getNotDefinedEventModeAccess();
	}
	
	public EnumRule getNotDefinedEventModeRule() {
		return getNotDefinedEventModeAccess().getRule();
	}
	
	//AdaptiveContractAnnotation ContractModel::AdaptiveContractAnnotation:
	//	'@AdaptiveContractStatechart' '=' monitoredComponent=[InterfaceModel::Component];
	public StatechartLanguageGrammarAccess.AdaptiveContractAnnotationElements getAdaptiveContractAnnotationAccess() {
		return gaStatechartLanguage.getAdaptiveContractAnnotationAccess();
	}
	
	public ParserRule getAdaptiveContractAnnotationRule() {
		return getAdaptiveContractAnnotationAccess().getRule();
	}
	
	//MissionPhaseAnnotation PhaseModel::MissionPhaseAnnotation:
	//	{PhaseModel::MissionPhaseAnnotation} '@PhaseStatechart';
	public StatechartLanguageGrammarAccess.MissionPhaseAnnotationElements getMissionPhaseAnnotationAccess() {
		return gaStatechartLanguage.getMissionPhaseAnnotationAccess();
	}
	
	public ParserRule getMissionPhaseAnnotationRule() {
		return getMissionPhaseAnnotationAccess().getRule();
	}
	
	//StatechartReference:
	//	{StatechartReference}
	//	'reference' reference=[CompositeModel::SynchronousComponent] ('(' (arguments+=Expression (',' arguments+=Expression)*)
	//	? ')')?;
	public StatechartLanguageGrammarAccess.StatechartReferenceElements getStatechartReferenceAccess() {
		return gaStatechartLanguage.getStatechartReferenceAccess();
	}
	
	public ParserRule getStatechartReferenceRule() {
		return getStatechartReferenceAccess().getRule();
	}
	
	//Region:
	//	'region' name=ID '{'
	//	stateNodes+=StateNode*
	//	'}';
	public StatechartLanguageGrammarAccess.RegionElements getRegionAccess() {
		return gaStatechartLanguage.getRegionAccess();
	}
	
	public ParserRule getRegionRule() {
		return getRegionAccess().getRule();
	}
	
	//Transition:
	//	annotations+=TransitionAnnotation*
	//	'transition' ('(' priority=INTEGER ')')?
	//	'from' sourceState=[StateNode] 'to' targetState=[StateNode] (('when' trigger=Trigger)? ('[' guard=Expression ']')? (
	//	'/' => effects+=Action*)?);
	public StatechartLanguageGrammarAccess.TransitionElements getTransitionAccess() {
		return gaStatechartLanguage.getTransitionAccess();
	}
	
	public ParserRule getTransitionRule() {
		return getTransitionAccess().getRule();
	}
	
	//TransitionAnnotation:
	//	TransitionIdAnnotation;
	public StatechartLanguageGrammarAccess.TransitionAnnotationElements getTransitionAnnotationAccess() {
		return gaStatechartLanguage.getTransitionAnnotationAccess();
	}
	
	public ParserRule getTransitionAnnotationRule() {
		return getTransitionAnnotationAccess().getRule();
	}
	
	//TransitionIdAnnotation:
	//	'@' '(' name=ID ')';
	public StatechartLanguageGrammarAccess.TransitionIdAnnotationElements getTransitionIdAnnotationAccess() {
		return gaStatechartLanguage.getTransitionIdAnnotationAccess();
	}
	
	public ParserRule getTransitionIdAnnotationRule() {
		return getTransitionIdAnnotationAccess().getRule();
	}
	
	//StateNode:
	//	State | PseudoState;
	public StatechartLanguageGrammarAccess.StateNodeElements getStateNodeAccess() {
		return gaStatechartLanguage.getStateNodeAccess();
	}
	
	public ParserRule getStateNodeRule() {
		return getStateNodeAccess().getRule();
	}
	
	//State:
	//	annotation=StateAnnotation?
	//	'state' name=ID ('{' ((('invariant' invariants+=Expression)* ('entry' '/' => entryActions+=Action*)? ('exit' '/'
	//	=> exitActions+=Action*)?) regions+=Region*)
	//	'}')?;
	public StatechartLanguageGrammarAccess.StateElements getStateAccess() {
		return gaStatechartLanguage.getStateAccess();
	}
	
	public ParserRule getStateRule() {
		return getStateAccess().getRule();
	}
	
	//StateAnnotation:
	//	StateContractAnnotation | MissionPhaseStateAnnotation;
	public StatechartLanguageGrammarAccess.StateAnnotationElements getStateAnnotationAccess() {
		return gaStatechartLanguage.getStateAnnotationAccess();
	}
	
	public ParserRule getStateAnnotationRule() {
		return getStateAnnotationAccess().getRule();
	}
	
	//StateContractAnnotation ContractModel::StateContractAnnotation:
	//	'@StatechartContract' '=' contractStatecharts+=[StatechartDefinition] (','
	//	contractStatecharts+=[StatechartDefinition])*;
	public StatechartLanguageGrammarAccess.StateContractAnnotationElements getStateContractAnnotationAccess() {
		return gaStatechartLanguage.getStateContractAnnotationAccess();
	}
	
	public ParserRule getStateContractAnnotationRule() {
		return getStateContractAnnotationAccess().getRule();
	}
	
	//MissionPhaseStateAnnotation PhaseModel::MissionPhaseStateAnnotation:
	//	{PhaseModel::MissionPhaseStateAnnotation} '@Phase' '=' '['
	//	stateDefinitions+=StateDefinition*
	//	']';
	public StatechartLanguageGrammarAccess.MissionPhaseStateAnnotationElements getMissionPhaseStateAnnotationAccess() {
		return gaStatechartLanguage.getMissionPhaseStateAnnotationAccess();
	}
	
	public ParserRule getMissionPhaseStateAnnotationRule() {
		return getMissionPhaseStateAnnotationAccess().getRule();
	}
	
	//StateDefinition PhaseModel::MissionPhaseStateDefinition:
	//	history=History component=SynchronousComponentInstance '{'
	//	portBindings+=PortBinding*
	//	variableBindings+=VariableBinding*
	//	'}';
	public StatechartLanguageGrammarAccess.StateDefinitionElements getStateDefinitionAccess() {
		return gaStatechartLanguage.getStateDefinitionAccess();
	}
	
	public ParserRule getStateDefinitionRule() {
		return getStateDefinitionAccess().getRule();
	}
	
	//VariableBinding PhaseModel::VariableBinding:
	//	'tie' statechartVariable=[ConstraintModel::VariableDeclaration] '->'
	//	instanceVariableReference=InstanceVariableReference;
	public StatechartLanguageGrammarAccess.VariableBindingElements getVariableBindingAccess() {
		return gaStatechartLanguage.getVariableBindingAccess();
	}
	
	public ParserRule getVariableBindingRule() {
		return getVariableBindingAccess().getRule();
	}
	
	//InstanceVariableReference PhaseModel::InstanceVariableReference:
	//	instance=[CompositeModel::SynchronousComponentInstance] '.' variable=[ConstraintModel::VariableDeclaration];
	public StatechartLanguageGrammarAccess.InstanceVariableReferenceElements getInstanceVariableReferenceAccess() {
		return gaStatechartLanguage.getInstanceVariableReferenceAccess();
	}
	
	public ParserRule getInstanceVariableReferenceRule() {
		return getInstanceVariableReferenceAccess().getRule();
	}
	
	//enum History returns PhaseModel::History:
	//	NO_HISTORY='no history' | SHALLOW_HISTORY='shallow' | DEEP_HISTORY='deep';
	public StatechartLanguageGrammarAccess.HistoryElements getHistoryAccess() {
		return gaStatechartLanguage.getHistoryAccess();
	}
	
	public EnumRule getHistoryRule() {
		return getHistoryAccess().getRule();
	}
	
	//PseudoState:
	//	EntryState | ForkState | JoinState | ChoiceState | MergeState;
	public StatechartLanguageGrammarAccess.PseudoStateElements getPseudoStateAccess() {
		return gaStatechartLanguage.getPseudoStateAccess();
	}
	
	public ParserRule getPseudoStateRule() {
		return getPseudoStateAccess().getRule();
	}
	
	//MergeState:
	//	'merge' name=ID;
	public StatechartLanguageGrammarAccess.MergeStateElements getMergeStateAccess() {
		return gaStatechartLanguage.getMergeStateAccess();
	}
	
	public ParserRule getMergeStateRule() {
		return getMergeStateAccess().getRule();
	}
	
	//ChoiceState:
	//	'choice' name=ID;
	public StatechartLanguageGrammarAccess.ChoiceStateElements getChoiceStateAccess() {
		return gaStatechartLanguage.getChoiceStateAccess();
	}
	
	public ParserRule getChoiceStateRule() {
		return getChoiceStateAccess().getRule();
	}
	
	//JoinState:
	//	'join' name=ID;
	public StatechartLanguageGrammarAccess.JoinStateElements getJoinStateAccess() {
		return gaStatechartLanguage.getJoinStateAccess();
	}
	
	public ParserRule getJoinStateRule() {
		return getJoinStateAccess().getRule();
	}
	
	//ForkState:
	//	'fork' name=ID;
	public StatechartLanguageGrammarAccess.ForkStateElements getForkStateAccess() {
		return gaStatechartLanguage.getForkStateAccess();
	}
	
	public ParserRule getForkStateRule() {
		return getForkStateAccess().getRule();
	}
	
	//EntryState:
	//	InitialState | ShallowHistoryState | DeepHistoryState;
	public StatechartLanguageGrammarAccess.EntryStateElements getEntryStateAccess() {
		return gaStatechartLanguage.getEntryStateAccess();
	}
	
	public ParserRule getEntryStateRule() {
		return getEntryStateAccess().getRule();
	}
	
	//InitialState:
	//	'initial' name=ID;
	public StatechartLanguageGrammarAccess.InitialStateElements getInitialStateAccess() {
		return gaStatechartLanguage.getInitialStateAccess();
	}
	
	public ParserRule getInitialStateRule() {
		return getInitialStateAccess().getRule();
	}
	
	//ShallowHistoryState:
	//	'shallow' 'history' name=ID;
	public StatechartLanguageGrammarAccess.ShallowHistoryStateElements getShallowHistoryStateAccess() {
		return gaStatechartLanguage.getShallowHistoryStateAccess();
	}
	
	public ParserRule getShallowHistoryStateRule() {
		return getShallowHistoryStateAccess().getRule();
	}
	
	//DeepHistoryState:
	//	'deep' 'history' name=ID;
	public StatechartLanguageGrammarAccess.DeepHistoryStateElements getDeepHistoryStateAccess() {
		return gaStatechartLanguage.getDeepHistoryStateAccess();
	}
	
	public ParserRule getDeepHistoryStateRule() {
		return getDeepHistoryStateAccess().getRule();
	}
	
	//SynchronousComponent CompositeModel::SynchronousComponent:
	//	StatechartDefinition | AbstractSynchronousComponent;
	public StatechartLanguageGrammarAccess.SynchronousComponentElements getSynchronousComponentAccess() {
		return gaStatechartLanguage.getSynchronousComponentAccess();
	}
	
	public ParserRule getSynchronousComponentRule() {
		return getSynchronousComponentAccess().getRule();
	}
	
	//AbstractSynchronousComponent CompositeModel::AbstractSynchronousCompositeComponent:
	//	CascadeCompositeComponent | SynchronousCompositeComponent;
	public StatechartLanguageGrammarAccess.AbstractSynchronousComponentElements getAbstractSynchronousComponentAccess() {
		return gaStatechartLanguage.getAbstractSynchronousComponentAccess();
	}
	
	public ParserRule getAbstractSynchronousComponentRule() {
		return getAbstractSynchronousComponentAccess().getRule();
	}
	
	//CascadeCompositeComponent CompositeModel::CascadeCompositeComponent:
	//	'cascade' name=ID ('(' (parameterDeclarations+=ParameterDeclaration (',' parameterDeclarations+=ParameterDeclaration)*
	//	)? ')')? ('[' (ports+=Port (','? ports+=Port)*)? ']')?
	//	'{' (components+=SynchronousComponentInstance | portBindings+=PortBinding | channels+=Channel |
	//	'execute' executionList+=[CompositeModel::SynchronousComponentInstance] (','
	//	executionList+=[CompositeModel::SynchronousComponentInstance])*)*
	//	'}';
	public StatechartLanguageGrammarAccess.CascadeCompositeComponentElements getCascadeCompositeComponentAccess() {
		return gaStatechartLanguage.getCascadeCompositeComponentAccess();
	}
	
	public ParserRule getCascadeCompositeComponentRule() {
		return getCascadeCompositeComponentAccess().getRule();
	}
	
	//SynchronousCompositeComponent CompositeModel::SynchronousCompositeComponent:
	//	'sync' name=ID ('(' (parameterDeclarations+=ParameterDeclaration (',' parameterDeclarations+=ParameterDeclaration)*)?
	//	')')? ('[' (ports+=Port (','? ports+=Port)*)? ']')?
	//	'{' (components+=SynchronousComponentInstance | portBindings+=PortBinding | channels+=Channel)*
	//	'}';
	public StatechartLanguageGrammarAccess.SynchronousCompositeComponentElements getSynchronousCompositeComponentAccess() {
		return gaStatechartLanguage.getSynchronousCompositeComponentAccess();
	}
	
	public ParserRule getSynchronousCompositeComponentRule() {
		return getSynchronousCompositeComponentAccess().getRule();
	}
	
	//AsynchronousComponent CompositeModel::AsynchronousComponent:
	//	AsynchronousCompositeComponent | AsynchronousAdapter// TODO scheduled asynchronous composite component
	//;
	public StatechartLanguageGrammarAccess.AsynchronousComponentElements getAsynchronousComponentAccess() {
		return gaStatechartLanguage.getAsynchronousComponentAccess();
	}
	
	public ParserRule getAsynchronousComponentRule() {
		return getAsynchronousComponentAccess().getRule();
	}
	
	//AsynchronousCompositeComponent CompositeModel::AsynchronousCompositeComponent:
	//	'async' name=ID ('(' (parameterDeclarations+=ParameterDeclaration (',' parameterDeclarations+=ParameterDeclaration)*)?
	//	')')? ('[' (ports+=Port (','? ports+=Port)*)? ']')?
	//	'{' (components+=AsynchronousComponentInstance | portBindings+=PortBinding | channels+=Channel)*
	//	'}';
	public StatechartLanguageGrammarAccess.AsynchronousCompositeComponentElements getAsynchronousCompositeComponentAccess() {
		return gaStatechartLanguage.getAsynchronousCompositeComponentAccess();
	}
	
	public ParserRule getAsynchronousCompositeComponentRule() {
		return getAsynchronousCompositeComponentAccess().getRule();
	}
	
	//AsynchronousAdapter CompositeModel::AsynchronousAdapter:
	//	'adapter' name=ID ('(' (parameterDeclarations+=ParameterDeclaration (',' parameterDeclarations+=ParameterDeclaration)*
	//	)? ')')?
	//	'of' wrappedComponent=SynchronousComponentInstance ('[' (ports+=Port (','? ports+=Port)*)? ']')?
	//	'{' (clocks+=ClockDeclaration | controlSpecifications+=ControlSpecificaiton | messageQueues+=MessageQueue)*
	//	'}';
	public StatechartLanguageGrammarAccess.AsynchronousAdapterElements getAsynchronousAdapterAccess() {
		return gaStatechartLanguage.getAsynchronousAdapterAccess();
	}
	
	public ParserRule getAsynchronousAdapterRule() {
		return getAsynchronousAdapterAccess().getRule();
	}
	
	//ClockDeclaration InterfaceModel::Clock:
	//	'clock' name=ID '(' 'rate' '=' timeSpecification=TimeSpecification ')';
	public StatechartLanguageGrammarAccess.ClockDeclarationElements getClockDeclarationAccess() {
		return gaStatechartLanguage.getClockDeclarationAccess();
	}
	
	public ParserRule getClockDeclarationRule() {
		return getClockDeclarationAccess().getRule();
	}
	
	//TimeSpecification InterfaceModel::TimeSpecification:
	//	value=AdditiveExpression unit=TimeUnit;
	public StatechartLanguageGrammarAccess.TimeSpecificationElements getTimeSpecificationAccess() {
		return gaStatechartLanguage.getTimeSpecificationAccess();
	}
	
	public ParserRule getTimeSpecificationRule() {
		return getTimeSpecificationAccess().getRule();
	}
	
	//enum TimeUnit returns InterfaceModel::TimeUnit:
	//	MILLISECOND='ms' | SECOND='s';
	public StatechartLanguageGrammarAccess.TimeUnitElements getTimeUnitAccess() {
		return gaStatechartLanguage.getTimeUnitAccess();
	}
	
	public EnumRule getTimeUnitRule() {
		return getTimeUnitAccess().getRule();
	}
	
	//ControlSpecificaiton CompositeModel::ControlSpecification:
	//	'when' trigger=SimpleTrigger '/' controlFunction=ControlFunction;
	public StatechartLanguageGrammarAccess.ControlSpecificaitonElements getControlSpecificaitonAccess() {
		return gaStatechartLanguage.getControlSpecificaitonAccess();
	}
	
	public ParserRule getControlSpecificaitonRule() {
		return getControlSpecificaitonAccess().getRule();
	}
	
	//enum ControlFunction returns CompositeModel::ControlFunction:
	//	RUN_ONCE='run' | RUN_TO_COMPLETION='full step' | RESET='reset';
	public StatechartLanguageGrammarAccess.ControlFunctionElements getControlFunctionAccess() {
		return gaStatechartLanguage.getControlFunctionAccess();
	}
	
	public EnumRule getControlFunctionRule() {
		return getControlFunctionAccess().getRule();
	}
	
	//MessageQueue CompositeModel::MessageQueue:
	//	'queue' name=ID '(' ('priority' '=' priority=INTEGER) (',' 'capacity' '=' capacity=Expression) (',' 'discard' '='
	//	eventDiscardStrategy=DiscardStrategy)? ')' '{'
	//	// TODO message retrieval count
	//	eventReference+=EventReference (',' eventReference+=EventReference)*
	//	'}';
	public StatechartLanguageGrammarAccess.MessageQueueElements getMessageQueueAccess() {
		return gaStatechartLanguage.getMessageQueueAccess();
	}
	
	public ParserRule getMessageQueueRule() {
		return getMessageQueueAccess().getRule();
	}
	
	//enum DiscardStrategy returns CompositeModel::DiscardStrategy:
	//	INCOMING='incoming' | OLDEST='oldest';
	public StatechartLanguageGrammarAccess.DiscardStrategyElements getDiscardStrategyAccess() {
		return gaStatechartLanguage.getDiscardStrategyAccess();
	}
	
	public EnumRule getDiscardStrategyRule() {
		return getDiscardStrategyAccess().getRule();
	}
	
	//PortBinding CompositeModel::PortBinding:
	//	'bind' compositeSystemPort=[InterfaceModel::Port] '->' instancePortReference=InstancePortReference;
	public StatechartLanguageGrammarAccess.PortBindingElements getPortBindingAccess() {
		return gaStatechartLanguage.getPortBindingAccess();
	}
	
	public ParserRule getPortBindingRule() {
		return getPortBindingAccess().getRule();
	}
	
	//InstancePortReference CompositeModel::InstancePortReference:
	//	instance=[CompositeModel::ComponentInstance] '.' port=[InterfaceModel::Port];
	public StatechartLanguageGrammarAccess.InstancePortReferenceElements getInstancePortReferenceAccess() {
		return gaStatechartLanguage.getInstancePortReferenceAccess();
	}
	
	public ParserRule getInstancePortReferenceRule() {
		return getInstancePortReferenceAccess().getRule();
	}
	
	//ComponentInstance CompositeModel::ComponentInstance:
	//	SynchronousComponentInstance | AsynchronousComponentInstance;
	public StatechartLanguageGrammarAccess.ComponentInstanceElements getComponentInstanceAccess() {
		return gaStatechartLanguage.getComponentInstanceAccess();
	}
	
	public ParserRule getComponentInstanceRule() {
		return getComponentInstanceAccess().getRule();
	}
	
	//// Subgrammars can use this
	//ComponentInstanceReference CompositeModel::ComponentInstanceReference:
	//	componentInstanceHierarchy+=[CompositeModel::ComponentInstance] ('->'
	//	componentInstanceHierarchy+=[CompositeModel::ComponentInstance])*;
	public StatechartLanguageGrammarAccess.ComponentInstanceReferenceElements getComponentInstanceReferenceAccess() {
		return gaStatechartLanguage.getComponentInstanceReferenceAccess();
	}
	
	public ParserRule getComponentInstanceReferenceRule() {
		return getComponentInstanceReferenceAccess().getRule();
	}
	
	//SynchronousComponentInstance CompositeModel::SynchronousComponentInstance:
	//	'component' name=ID ':' type=[CompositeModel::SynchronousComponent] ('(' arguments+=Expression (','
	//	arguments+=Expression)* ')')?;
	public StatechartLanguageGrammarAccess.SynchronousComponentInstanceElements getSynchronousComponentInstanceAccess() {
		return gaStatechartLanguage.getSynchronousComponentInstanceAccess();
	}
	
	public ParserRule getSynchronousComponentInstanceRule() {
		return getSynchronousComponentInstanceAccess().getRule();
	}
	
	//AsynchronousComponentInstance CompositeModel::AsynchronousComponentInstance:
	//	'component' name=ID ':' type=[CompositeModel::AsynchronousComponent] ('(' arguments+=Expression (','
	//	arguments+=Expression)* ')')?;
	public StatechartLanguageGrammarAccess.AsynchronousComponentInstanceElements getAsynchronousComponentInstanceAccess() {
		return gaStatechartLanguage.getAsynchronousComponentInstanceAccess();
	}
	
	public ParserRule getAsynchronousComponentInstanceRule() {
		return getAsynchronousComponentInstanceAccess().getRule();
	}
	
	//Channel CompositeModel::Channel:
	//	SimpleChannel | BroadcastChannel;
	public StatechartLanguageGrammarAccess.ChannelElements getChannelAccess() {
		return gaStatechartLanguage.getChannelAccess();
	}
	
	public ParserRule getChannelRule() {
		return getChannelAccess().getRule();
	}
	
	//SimpleChannel CompositeModel::SimpleChannel:
	//	// This is the channel's point of view: input is the input of the channel, i.e. the out port signals of statecharts
	//	'channel' '[' providedPort=InstancePortReference ']' '-o)-' '[' requiredPort=InstancePortReference ']';
	public StatechartLanguageGrammarAccess.SimpleChannelElements getSimpleChannelAccess() {
		return gaStatechartLanguage.getSimpleChannelAccess();
	}
	
	public ParserRule getSimpleChannelRule() {
		return getSimpleChannelAccess().getRule();
	}
	
	//BroadcastChannel CompositeModel::BroadcastChannel:
	//	// This is the channel's point of view: input is the input of the channel, i.e. the out port signals of statecharts
	//	'channel' '[' providedPort=InstancePortReference ']' '-o)-' '[' requiredPorts+=InstancePortReference (','
	//	requiredPorts+=InstancePortReference)+ ']';
	public StatechartLanguageGrammarAccess.BroadcastChannelElements getBroadcastChannelAccess() {
		return gaStatechartLanguage.getBroadcastChannelAccess();
	}
	
	public ParserRule getBroadcastChannelRule() {
		return getBroadcastChannelAccess().getRule();
	}
	
	//// Interface
	//Interface InterfaceModel::Interface:
	//	{InterfaceModel::Interface}
	//	'interface' name=ID ('extends' parents+=[InterfaceModel::Interface] (',' parents+=[InterfaceModel::Interface])*)?
	//	'{'
	//	events+=EventDeclaration*
	//	'}';
	public StatechartLanguageGrammarAccess.InterfaceElements getInterfaceAccess() {
		return gaStatechartLanguage.getInterfaceAccess();
	}
	
	public ParserRule getInterfaceRule() {
		return getInterfaceAccess().getRule();
	}
	
	//enum EventDirection returns InterfaceModel::EventDirection:
	//	IN='in' | OUT='out' | INOUT='inout';
	public StatechartLanguageGrammarAccess.EventDirectionElements getEventDirectionAccess() {
		return gaStatechartLanguage.getEventDirectionAccess();
	}
	
	public EnumRule getEventDirectionRule() {
		return getEventDirectionAccess().getRule();
	}
	
	//EventDeclaration InterfaceModel::EventDeclaration:
	//	{InterfaceModel::EventDeclaration} direction=EventDirection event=Event;
	public StatechartLanguageGrammarAccess.EventDeclarationElements getEventDeclarationAccess() {
		return gaStatechartLanguage.getEventDeclarationAccess();
	}
	
	public ParserRule getEventDeclarationRule() {
		return getEventDeclarationAccess().getRule();
	}
	
	//Event InterfaceModel::Event:
	//	{InterfaceModel::Event} persistency=Persistency? 'event' name=ID ('(' parameterDeclarations+=ParameterDeclaration (
	//	','parameterDeclarations+=ParameterDeclaration)* ')')? ('priority' '=' priority=INTEGER)?;
	public StatechartLanguageGrammarAccess.EventElements getEventAccess() {
		return gaStatechartLanguage.getEventAccess();
	}
	
	public ParserRule getEventRule() {
		return getEventAccess().getRule();
	}
	
	//enum Persistency returns InterfaceModel::Persistency:
	//	PERSISTENT='persistent' | TRANSIENT='transient';
	public StatechartLanguageGrammarAccess.PersistencyElements getPersistencyAccess() {
		return gaStatechartLanguage.getPersistencyAccess();
	}
	
	public EnumRule getPersistencyRule() {
		return getPersistencyAccess().getRule();
	}
	
	//@Override
	//PrimaryExpression ConstraintModel::Expression:
	//	super | EventParameterReferenceExpression | StateReferenceExpression;
	public StatechartLanguageGrammarAccess.PrimaryExpressionElements getPrimaryExpressionAccess() {
		return gaStatechartLanguage.getPrimaryExpressionAccess();
	}
	
	public ParserRule getPrimaryExpressionRule() {
		return getPrimaryExpressionAccess().getRule();
	}
	
	//StateReferenceExpression:
	//	'in-state' '(' region=[Region] '.' state=[State] ')';
	public StatechartLanguageGrammarAccess.StateReferenceExpressionElements getStateReferenceExpressionAccess() {
		return gaStatechartLanguage.getStateReferenceExpressionAccess();
	}
	
	public ParserRule getStateReferenceExpressionRule() {
		return getStateReferenceExpressionAccess().getRule();
	}
	
	//EventParameterReferenceExpression InterfaceModel::EventParameterReferenceExpression:
	//	port=[InterfaceModel::Port] '.' event=[InterfaceModel::Event] '::'
	//	parameter=[ConstraintModel::ParameterDeclaration];
	public StatechartLanguageGrammarAccess.EventParameterReferenceExpressionElements getEventParameterReferenceExpressionAccess() {
		return gaStatechartLanguage.getEventParameterReferenceExpressionAccess();
	}
	
	public ParserRule getEventParameterReferenceExpressionRule() {
		return getEventParameterReferenceExpressionAccess().getRule();
	}
	
	//@Override
	//InlineStatement ActionModel::Statement:
	//	(VariableDeclarationStatement | ConstantDeclarationStatement | ReturnStatement | BreakStatement |
	//	=> AssignmentStatement | RaiseEventAction | SetTimeoutAction | AssertionStatement | ExpressionStatement) ';';
	public StatechartLanguageGrammarAccess.InlineStatementElements getInlineStatementAccess() {
		return gaStatechartLanguage.getInlineStatementAccess();
	}
	
	public ParserRule getInlineStatementRule() {
		return getInlineStatementAccess().getRule();
	}
	
	//RaiseEventAction:
	//	'raise' port=[InterfaceModel::Port] '.' event=[InterfaceModel::Event] ('(' arguments+=Expression (','
	//	arguments+=Expression)* ')')?;
	public StatechartLanguageGrammarAccess.RaiseEventActionElements getRaiseEventActionAccess() {
		return gaStatechartLanguage.getRaiseEventActionAccess();
	}
	
	public ParserRule getRaiseEventActionRule() {
		return getRaiseEventActionAccess().getRule();
	}
	
	//SetTimeoutAction:
	//	'set' timeoutDeclaration=[TimeoutDeclaration] ':=' time=TimeSpecification;
	public StatechartLanguageGrammarAccess.SetTimeoutActionElements getSetTimeoutActionAccess() {
		return gaStatechartLanguage.getSetTimeoutActionAccess();
	}
	
	public ParserRule getSetTimeoutActionRule() {
		return getSetTimeoutActionAccess().getRule();
	}
	
	//DeactivateTimeoutAction:
	//	'deactivate' timeoutDeclaration=[TimeoutDeclaration];
	public StatechartLanguageGrammarAccess.DeactivateTimeoutActionElements getDeactivateTimeoutActionAccess() {
		return gaStatechartLanguage.getDeactivateTimeoutActionAccess();
	}
	
	public ParserRule getDeactivateTimeoutActionRule() {
		return getDeactivateTimeoutActionAccess().getRule();
	}
	
	//Action ActionModel::Action:
	//	Block | Statement;
	public ActionLanguageGrammarAccess.ActionElements getActionAccess() {
		return gaActionLanguage.getActionAccess();
	}
	
	public ParserRule getActionRule() {
		return getActionAccess().getRule();
	}
	
	//@Override
	//FunctionDeclaration ConstraintModel::FunctionDeclaration:
	//	LambdaDeclaration | ProcedureDeclaration;
	public ActionLanguageGrammarAccess.FunctionDeclarationElements getFunctionDeclarationAccess() {
		return gaActionLanguage.getFunctionDeclarationAccess();
	}
	
	public ParserRule getFunctionDeclarationRule() {
		return getFunctionDeclarationAccess().getRule();
	}
	
	//ProcedureDeclaration ActionModel::ProcedureDeclaration:
	//	'procedure' name=ID ('(' (parameterDeclarations+=ParameterDeclaration (',' parameterDeclarations+=ParameterDeclaration
	//	)*)? ')')? ':' type=Type
	//	body=Block;
	public ActionLanguageGrammarAccess.ProcedureDeclarationElements getProcedureDeclarationAccess() {
		return gaActionLanguage.getProcedureDeclarationAccess();
	}
	
	public ParserRule getProcedureDeclarationRule() {
		return getProcedureDeclarationAccess().getRule();
	}
	
	//Block ActionModel::Block:
	//	{ActionModel::Block}
	//	'{'
	//	actions+=Action*
	//	'}';
	public ActionLanguageGrammarAccess.BlockElements getBlockAccess() {
		return gaActionLanguage.getBlockAccess();
	}
	
	public ParserRule getBlockRule() {
		return getBlockAccess().getRule();
	}
	
	//Statement ActionModel::Statement:
	//	super::InlineStatement | MultilineStatement;
	public ActionLanguageGrammarAccess.StatementElements getStatementAccess() {
		return gaActionLanguage.getStatementAccess();
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}
	
	//MultilineStatement ActionModel::Statement:
	//	IfStatement | SwitchStatement | ForStatement | ChoiceStatement;
	public ActionLanguageGrammarAccess.MultilineStatementElements getMultilineStatementAccess() {
		return gaActionLanguage.getMultilineStatementAccess();
	}
	
	public ParserRule getMultilineStatementRule() {
		return getMultilineStatementAccess().getRule();
	}
	
	//VariableDeclarationStatement ActionModel::VariableDeclarationStatement:
	//	variableDeclaration=VariableDeclaration;
	public ActionLanguageGrammarAccess.VariableDeclarationStatementElements getVariableDeclarationStatementAccess() {
		return gaActionLanguage.getVariableDeclarationStatementAccess();
	}
	
	public ParserRule getVariableDeclarationStatementRule() {
		return getVariableDeclarationStatementAccess().getRule();
	}
	
	//ConstantDeclarationStatement ActionModel::ConstantDeclarationStatement:
	//	constantDeclaration=ConstantDeclaration;
	public ActionLanguageGrammarAccess.ConstantDeclarationStatementElements getConstantDeclarationStatementAccess() {
		return gaActionLanguage.getConstantDeclarationStatementAccess();
	}
	
	public ParserRule getConstantDeclarationStatementRule() {
		return getConstantDeclarationStatementAccess().getRule();
	}
	
	//ExpressionStatement ActionModel::ExpressionStatement:
	//	expression=Expression;
	public ActionLanguageGrammarAccess.ExpressionStatementElements getExpressionStatementAccess() {
		return gaActionLanguage.getExpressionStatementAccess();
	}
	
	public ParserRule getExpressionStatementRule() {
		return getExpressionStatementAccess().getRule();
	}
	
	//IfBranch ActionModel::Branch:
	//	'(' guard=Expression ')'
	//	action=Action;
	public ActionLanguageGrammarAccess.IfBranchElements getIfBranchAccess() {
		return gaActionLanguage.getIfBranchAccess();
	}
	
	public ParserRule getIfBranchRule() {
		return getIfBranchAccess().getRule();
	}
	
	//ElseBranch ActionModel::Branch:
	//	guard=ElseExpression
	//	action=Action;
	public ActionLanguageGrammarAccess.ElseBranchElements getElseBranchAccess() {
		return gaActionLanguage.getElseBranchAccess();
	}
	
	public ParserRule getElseBranchRule() {
		return getElseBranchAccess().getRule();
	}
	
	//SwitchBranch ActionModel::Branch:
	//	guard=Expression ':'
	//	action=Action;
	public ActionLanguageGrammarAccess.SwitchBranchElements getSwitchBranchAccess() {
		return gaActionLanguage.getSwitchBranchAccess();
	}
	
	public ParserRule getSwitchBranchRule() {
		return getSwitchBranchAccess().getRule();
	}
	
	//DefaultBranch ActionModel::Branch:
	//	guard=DefaultExpression ':'
	//	action=Action;
	public ActionLanguageGrammarAccess.DefaultBranchElements getDefaultBranchAccess() {
		return gaActionLanguage.getDefaultBranchAccess();
	}
	
	public ParserRule getDefaultBranchRule() {
		return getDefaultBranchAccess().getRule();
	}
	
	//ChoiceBranch ActionModel::Branch:
	//	'[' guard=Expression ']'
	//	action=Action;
	public ActionLanguageGrammarAccess.ChoiceBranchElements getChoiceBranchAccess() {
		return gaActionLanguage.getChoiceBranchAccess();
	}
	
	public ParserRule getChoiceBranchRule() {
		return getChoiceBranchAccess().getRule();
	}
	
	//// Xtext bug - DefaultExpression had to be introduced to tackle the problem in the generated StatechartLanguageSemanticSequencer class
	//// DefaultExpression has the same semantics as ElseExpression (but it is used in DefaultBranch)
	//DefaultExpression ConstraintModel::DefaultExpression:
	//	{ConstraintModel::DefaultExpression} 'default';
	public ActionLanguageGrammarAccess.DefaultExpressionElements getDefaultExpressionAccess() {
		return gaActionLanguage.getDefaultExpressionAccess();
	}
	
	public ParserRule getDefaultExpressionRule() {
		return getDefaultExpressionAccess().getRule();
	}
	
	//IfStatement ActionModel::IfStatement:
	//	{ActionModel::IfStatement}
	//	'if' conditionals+=IfBranch (=> 'elseif' conditionals+=IfBranch)*
	//	=> conditionals+=ElseBranch?;
	public ActionLanguageGrammarAccess.IfStatementElements getIfStatementAccess() {
		return gaActionLanguage.getIfStatementAccess();
	}
	
	public ParserRule getIfStatementRule() {
		return getIfStatementAccess().getRule();
	}
	
	//SwitchStatement ActionModel::SwitchStatement:
	//	'switch' '(' controlExpression=Expression ')'
	//	'{' ('case' cases+=SwitchBranch ('case' cases+=SwitchBranch)*) cases+=DefaultBranch?
	//	'}';
	public ActionLanguageGrammarAccess.SwitchStatementElements getSwitchStatementAccess() {
		return gaActionLanguage.getSwitchStatementAccess();
	}
	
	public ParserRule getSwitchStatementRule() {
		return getSwitchStatementAccess().getRule();
	}
	
	//ForStatement ActionModel::ForStatement:
	//	'for' '(' parameter=ParameterDeclaration 'in' range=Expression ')'
	//	=> body=Action;
	public ActionLanguageGrammarAccess.ForStatementElements getForStatementAccess() {
		return gaActionLanguage.getForStatementAccess();
	}
	
	public ParserRule getForStatementRule() {
		return getForStatementAccess().getRule();
	}
	
	//ReturnStatement ActionModel::ReturnStatement:
	//	{ActionModel::ReturnStatement} 'return' expression=Expression?;
	public ActionLanguageGrammarAccess.ReturnStatementElements getReturnStatementAccess() {
		return gaActionLanguage.getReturnStatementAccess();
	}
	
	public ParserRule getReturnStatementRule() {
		return getReturnStatementAccess().getRule();
	}
	
	//BreakStatement ActionModel::BreakStatement:
	//	{ActionModel::BreakStatement}
	//	'break';
	public ActionLanguageGrammarAccess.BreakStatementElements getBreakStatementAccess() {
		return gaActionLanguage.getBreakStatementAccess();
	}
	
	public ParserRule getBreakStatementRule() {
		return getBreakStatementAccess().getRule();
	}
	
	//ChoiceStatement ActionModel::ChoiceStatement:
	//	'choice'
	//	'{' ('branch' branches+=ChoiceBranch ('branch' branches+=ChoiceBranch)*)
	//	'}';
	public ActionLanguageGrammarAccess.ChoiceStatementElements getChoiceStatementAccess() {
		return gaActionLanguage.getChoiceStatementAccess();
	}
	
	public ParserRule getChoiceStatementRule() {
		return getChoiceStatementAccess().getRule();
	}
	
	//AssignmentStatement ActionModel::AssignmentStatement:
	//	lhs=AssignableAccessExpression ':=' rhs=Expression;
	public ActionLanguageGrammarAccess.AssignmentStatementElements getAssignmentStatementAccess() {
		return gaActionLanguage.getAssignmentStatementAccess();
	}
	
	public ParserRule getAssignmentStatementRule() {
		return getAssignmentStatementAccess().getRule();
	}
	
	//AssertionStatement ActionModel::AssertionStatement:
	//	'assert' '(' assertion=Expression ')';
	public ActionLanguageGrammarAccess.AssertionStatementElements getAssertionStatementAccess() {
		return gaActionLanguage.getAssertionStatementAccess();
	}
	
	public ParserRule getAssertionStatementRule() {
		return getAssertionStatementAccess().getRule();
	}
	
	////Lvalue expression rules based on the constraint model
	//AssignableAccessExpression ConstraintModel::ReferenceExpression:
	//	AssignablePrimaryExpression ({ConstraintModel::ArrayAccessExpression.operand=current} '[' index=Expression ']' |
	//	{ConstraintModel::RecordAccessExpression.operand=current} '.' fieldReference=FieldReferenceExpression)*;
	public ActionLanguageGrammarAccess.AssignableAccessExpressionElements getAssignableAccessExpressionAccess() {
		return gaActionLanguage.getAssignableAccessExpressionAccess();
	}
	
	public ParserRule getAssignableAccessExpressionRule() {
		return getAssignableAccessExpressionAccess().getRule();
	}
	
	//AssignablePrimaryExpression ConstraintModel::ReferenceExpression:
	//	AssignableDirectReferenceExpression |
	//	'(' AssignableAccessExpression ')';
	public ActionLanguageGrammarAccess.AssignablePrimaryExpressionElements getAssignablePrimaryExpressionAccess() {
		return gaActionLanguage.getAssignablePrimaryExpressionAccess();
	}
	
	public ParserRule getAssignablePrimaryExpressionRule() {
		return getAssignablePrimaryExpressionAccess().getRule();
	}
	
	//AssignableDirectReferenceExpression ConstraintModel::ReferenceExpression:
	//	{ConstraintModel::DirectReferenceExpression} declaration=[ConstraintModel::ValueDeclaration];
	public ActionLanguageGrammarAccess.AssignableDirectReferenceExpressionElements getAssignableDirectReferenceExpressionAccess() {
		return gaActionLanguage.getAssignableDirectReferenceExpressionAccess();
	}
	
	public ParserRule getAssignableDirectReferenceExpressionRule() {
		return getAssignableDirectReferenceExpressionAccess().getRule();
	}
	
	/////////////////////////////////////////////
	//ExpressionPackage:
	//	"specification" name=ID ('(' (parameterDeclarations+=ParameterDeclaration (','
	//	parameterDeclarations+=ParameterDeclaration)*)? ')')? '{' (typeDeclarations+=TypeDeclaration |
	//	constantDeclarations+=ConstantDeclaration | functionDeclarations+=super::FunctionDeclaration |
	//	basicConstraintDefinitions+=BasicConstraintDefinition)*
	//	'}';
	public ExpressionLanguageGrammarAccess.ExpressionPackageElements getExpressionPackageAccess() {
		return gaExpressionLanguage.getExpressionPackageAccess();
	}
	
	public ParserRule getExpressionPackageRule() {
		return getExpressionPackageAccess().getRule();
	}
	
	/////////////////////////////////////////////
	//ParameterDeclaration:
	//	{ParameterDeclaration} name=ID ':' type=Type;
	public ExpressionLanguageGrammarAccess.ParameterDeclarationElements getParameterDeclarationAccess() {
		return gaExpressionLanguage.getParameterDeclarationAccess();
	}
	
	public ParserRule getParameterDeclarationRule() {
		return getParameterDeclarationAccess().getRule();
	}
	
	//FieldDeclaration:
	//	{FieldDeclaration} name=ID ':' type=Type;
	public ExpressionLanguageGrammarAccess.FieldDeclarationElements getFieldDeclarationAccess() {
		return gaExpressionLanguage.getFieldDeclarationAccess();
	}
	
	public ParserRule getFieldDeclarationRule() {
		return getFieldDeclarationAccess().getRule();
	}
	
	//ConstantDeclaration:
	//	'const' name=ID ':' type=Type (':=' expression=Expression)?;
	public ExpressionLanguageGrammarAccess.ConstantDeclarationElements getConstantDeclarationAccess() {
		return gaExpressionLanguage.getConstantDeclarationAccess();
	}
	
	public ParserRule getConstantDeclarationRule() {
		return getConstantDeclarationAccess().getRule();
	}
	
	//// Referred in the statechart language
	//VariableDeclaration:
	//	'var' name=ID ':' type=Type (':=' expression=Expression)?;
	public ExpressionLanguageGrammarAccess.VariableDeclarationElements getVariableDeclarationAccess() {
		return gaExpressionLanguage.getVariableDeclarationAccess();
	}
	
	public ParserRule getVariableDeclarationRule() {
		return getVariableDeclarationAccess().getRule();
	}
	
	//LambdaDeclaration:
	//	'lambda' name=ID ('(' (parameterDeclarations+=ParameterDeclaration (',' parameterDeclarations+=ParameterDeclaration)*)
	//	? ')')? ':' type=Type (':=' expression=Expression)?;
	public ExpressionLanguageGrammarAccess.LambdaDeclarationElements getLambdaDeclarationAccess() {
		return gaExpressionLanguage.getLambdaDeclarationAccess();
	}
	
	public ParserRule getLambdaDeclarationRule() {
		return getLambdaDeclarationAccess().getRule();
	}
	
	//////////////////////////////////////////
	//// Type language
	//////////////////////////////////////////
	//Type:
	//	TypeReference | TypeDefinition;
	public ExpressionLanguageGrammarAccess.TypeElements getTypeAccess() {
		return gaExpressionLanguage.getTypeAccess();
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}
	
	//TypeDeclaration:
	//	'type' name=ID ':' type=Type;
	public ExpressionLanguageGrammarAccess.TypeDeclarationElements getTypeDeclarationAccess() {
		return gaExpressionLanguage.getTypeDeclarationAccess();
	}
	
	public ParserRule getTypeDeclarationRule() {
		return getTypeDeclarationAccess().getRule();
	}
	
	//TypeReference:
	//	reference=[TypeDeclaration];
	public ExpressionLanguageGrammarAccess.TypeReferenceElements getTypeReferenceAccess() {
		return gaExpressionLanguage.getTypeReferenceAccess();
	}
	
	public ParserRule getTypeReferenceRule() {
		return getTypeReferenceAccess().getRule();
	}
	
	//TypeDefinition:
	//	VoidTypeDefinition | IntegerTypeDefinition | BooleanTypeDefinition | DecimalTypeDefinition | RationalTypeDefinition
	//	| ArrayTypeDefinition | IntegerRangeTypeDefinition | EnumerationTypeDefinition | RecordTypeDefinition |
	//	SubrangeTypeDefinition | FunctionTypeDefinition;
	public ExpressionLanguageGrammarAccess.TypeDefinitionElements getTypeDefinitionAccess() {
		return gaExpressionLanguage.getTypeDefinitionAccess();
	}
	
	public ParserRule getTypeDefinitionRule() {
		return getTypeDefinitionAccess().getRule();
	}
	
	//VoidTypeDefinition:
	//	{VoidTypeDefinition} 'void';
	public ExpressionLanguageGrammarAccess.VoidTypeDefinitionElements getVoidTypeDefinitionAccess() {
		return gaExpressionLanguage.getVoidTypeDefinitionAccess();
	}
	
	public ParserRule getVoidTypeDefinitionRule() {
		return getVoidTypeDefinitionAccess().getRule();
	}
	
	//IntegerTypeDefinition:
	//	{IntegerTypeDefinition} 'integer';
	public ExpressionLanguageGrammarAccess.IntegerTypeDefinitionElements getIntegerTypeDefinitionAccess() {
		return gaExpressionLanguage.getIntegerTypeDefinitionAccess();
	}
	
	public ParserRule getIntegerTypeDefinitionRule() {
		return getIntegerTypeDefinitionAccess().getRule();
	}
	
	//BooleanTypeDefinition:
	//	{BooleanTypeDefinition} 'boolean';
	public ExpressionLanguageGrammarAccess.BooleanTypeDefinitionElements getBooleanTypeDefinitionAccess() {
		return gaExpressionLanguage.getBooleanTypeDefinitionAccess();
	}
	
	public ParserRule getBooleanTypeDefinitionRule() {
		return getBooleanTypeDefinitionAccess().getRule();
	}
	
	//DecimalTypeDefinition:
	//	{DecimalTypeDefinition} 'decimal';
	public ExpressionLanguageGrammarAccess.DecimalTypeDefinitionElements getDecimalTypeDefinitionAccess() {
		return gaExpressionLanguage.getDecimalTypeDefinitionAccess();
	}
	
	public ParserRule getDecimalTypeDefinitionRule() {
		return getDecimalTypeDefinitionAccess().getRule();
	}
	
	//RationalTypeDefinition:
	//	{RationalTypeDefinition} 'rational';
	public ExpressionLanguageGrammarAccess.RationalTypeDefinitionElements getRationalTypeDefinitionAccess() {
		return gaExpressionLanguage.getRationalTypeDefinitionAccess();
	}
	
	public ParserRule getRationalTypeDefinitionRule() {
		return getRationalTypeDefinitionAccess().getRule();
	}
	
	//ArrayTypeDefinition:
	//	'[' size=Expression ']' elementType=Type;
	public ExpressionLanguageGrammarAccess.ArrayTypeDefinitionElements getArrayTypeDefinitionAccess() {
		return gaExpressionLanguage.getArrayTypeDefinitionAccess();
	}
	
	public ParserRule getArrayTypeDefinitionRule() {
		return getArrayTypeDefinitionAccess().getRule();
	}
	
	//IntegerRangeTypeDefinition:
	//	{IntegerRangeTypeDefinition} 'integer' 'range';
	public ExpressionLanguageGrammarAccess.IntegerRangeTypeDefinitionElements getIntegerRangeTypeDefinitionAccess() {
		return gaExpressionLanguage.getIntegerRangeTypeDefinitionAccess();
	}
	
	public ParserRule getIntegerRangeTypeDefinitionRule() {
		return getIntegerRangeTypeDefinitionAccess().getRule();
	}
	
	//EnumerationTypeDefinition:
	//	'enum' '{' literals+=EnumerationLiteralDefinition (',' literals+=EnumerationLiteralDefinition)* '}';
	public ExpressionLanguageGrammarAccess.EnumerationTypeDefinitionElements getEnumerationTypeDefinitionAccess() {
		return gaExpressionLanguage.getEnumerationTypeDefinitionAccess();
	}
	
	public ParserRule getEnumerationTypeDefinitionRule() {
		return getEnumerationTypeDefinitionAccess().getRule();
	}
	
	//EnumerationLiteralDefinition:
	//	name=ID;
	public ExpressionLanguageGrammarAccess.EnumerationLiteralDefinitionElements getEnumerationLiteralDefinitionAccess() {
		return gaExpressionLanguage.getEnumerationLiteralDefinitionAccess();
	}
	
	public ParserRule getEnumerationLiteralDefinitionRule() {
		return getEnumerationLiteralDefinitionAccess().getRule();
	}
	
	//RecordTypeDefinition:
	//	'record' '{' fieldDeclarations+=FieldDeclaration (',' fieldDeclarations+=FieldDeclaration)* '}';
	public ExpressionLanguageGrammarAccess.RecordTypeDefinitionElements getRecordTypeDefinitionAccess() {
		return gaExpressionLanguage.getRecordTypeDefinitionAccess();
	}
	
	public ParserRule getRecordTypeDefinitionRule() {
		return getRecordTypeDefinitionAccess().getRule();
	}
	
	//SubrangeTypeDefinition:
	//	{SubrangeTypeDefinition} '#[' ('-' 'inf' | lowerBound=Expression) 'to' ('inf' | upperBound=Expression) ']';
	public ExpressionLanguageGrammarAccess.SubrangeTypeDefinitionElements getSubrangeTypeDefinitionAccess() {
		return gaExpressionLanguage.getSubrangeTypeDefinitionAccess();
	}
	
	public ParserRule getSubrangeTypeDefinitionRule() {
		return getSubrangeTypeDefinitionAccess().getRule();
	}
	
	//FunctionTypeDefinition:
	//	'function' '(' (parameterTypes+=Type (',' parameterTypes+=Type)*)? ')' ':' returnType=Type;
	public ExpressionLanguageGrammarAccess.FunctionTypeDefinitionElements getFunctionTypeDefinitionAccess() {
		return gaExpressionLanguage.getFunctionTypeDefinitionAccess();
	}
	
	public ParserRule getFunctionTypeDefinitionRule() {
		return getFunctionTypeDefinitionAccess().getRule();
	}
	
	//////////////////////////////////////////
	//// Expression language
	//////////////////////////////////////////
	//Expression:
	//	IfThenElseExpression | ElseExpression;
	public ExpressionLanguageGrammarAccess.ExpressionElements getExpressionAccess() {
		return gaExpressionLanguage.getExpressionAccess();
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}
	
	//ElseExpression:
	//	{ElseExpression}
	//	'else';
	public ExpressionLanguageGrammarAccess.ElseExpressionElements getElseExpressionAccess() {
		return gaExpressionLanguage.getElseExpressionAccess();
	}
	
	public ParserRule getElseExpressionRule() {
		return getElseExpressionAccess().getRule();
	}
	
	////ternary, right-associative
	//IfThenElseExpression Expression:
	//	ImplyExpression ({IfThenElseExpression.condition=current} '?' then=Expression (=> ':' else=Expression))?;
	public ExpressionLanguageGrammarAccess.IfThenElseExpressionElements getIfThenElseExpressionAccess() {
		return gaExpressionLanguage.getIfThenElseExpressionAccess();
	}
	
	public ParserRule getIfThenElseExpressionRule() {
		return getIfThenElseExpressionAccess().getRule();
	}
	
	////binary, right-associative
	//ImplyExpression Expression:
	//	OrExpression ({ImplyExpression.leftOperand=current} 'imply' rightOperand=ImplyExpression)?;
	public ExpressionLanguageGrammarAccess.ImplyExpressionElements getImplyExpressionAccess() {
		return gaExpressionLanguage.getImplyExpressionAccess();
	}
	
	public ParserRule getImplyExpressionRule() {
		return getImplyExpressionAccess().getRule();
	}
	
	////multiary
	//OrExpression Expression:
	//	XorExpression ({OrExpression.operands+= current} ('or' operands+=XorExpression)+)?;
	public ExpressionLanguageGrammarAccess.OrExpressionElements getOrExpressionAccess() {
		return gaExpressionLanguage.getOrExpressionAccess();
	}
	
	public ParserRule getOrExpressionRule() {
		return getOrExpressionAccess().getRule();
	}
	
	////multiary
	//XorExpression Expression:
	//	AndExpression ({XorExpression.operands+= current} ('xor' operands+=AndExpression)+)?;
	public ExpressionLanguageGrammarAccess.XorExpressionElements getXorExpressionAccess() {
		return gaExpressionLanguage.getXorExpressionAccess();
	}
	
	public ParserRule getXorExpressionRule() {
		return getXorExpressionAccess().getRule();
	}
	
	////multiary
	//AndExpression Expression:
	//	UnaryLogicExpression ({AndExpression.operands+= current} ('and' operands+=UnaryLogicExpression)+)?;
	public ExpressionLanguageGrammarAccess.AndExpressionElements getAndExpressionAccess() {
		return gaExpressionLanguage.getAndExpressionAccess();
	}
	
	public ParserRule getAndExpressionRule() {
		return getAndExpressionAccess().getRule();
	}
	
	////prefix unary, right-associative
	//UnaryLogicExpression Expression:
	//	NotExpression | ForallExpression | ExistsExpression | EquivalenceExpression;
	public ExpressionLanguageGrammarAccess.UnaryLogicExpressionElements getUnaryLogicExpressionAccess() {
		return gaExpressionLanguage.getUnaryLogicExpressionAccess();
	}
	
	public ParserRule getUnaryLogicExpressionRule() {
		return getUnaryLogicExpressionAccess().getRule();
	}
	
	//NotExpression Expression:
	//	{NotExpression} => ('not' | '!') operand=UnaryLogicExpression;
	public ExpressionLanguageGrammarAccess.NotExpressionElements getNotExpressionAccess() {
		return gaExpressionLanguage.getNotExpressionAccess();
	}
	
	public ParserRule getNotExpressionRule() {
		return getNotExpressionAccess().getRule();
	}
	
	//ForallExpression Expression:
	//	{ForallExpression} => 'forall' '(' (parameterDeclarations+=ParameterDeclaration (','
	//	parameterDeclarations+=ParameterDeclaration)*)? ')' ':' operand=UnaryLogicExpression;
	public ExpressionLanguageGrammarAccess.ForallExpressionElements getForallExpressionAccess() {
		return gaExpressionLanguage.getForallExpressionAccess();
	}
	
	public ParserRule getForallExpressionRule() {
		return getForallExpressionAccess().getRule();
	}
	
	//ExistsExpression Expression:
	//	{ExistsExpression} => 'exists' '(' (parameterDeclarations+=ParameterDeclaration (','
	//	parameterDeclarations+=ParameterDeclaration)*)? ')' ':' operand=UnaryLogicExpression;
	public ExpressionLanguageGrammarAccess.ExistsExpressionElements getExistsExpressionAccess() {
		return gaExpressionLanguage.getExistsExpressionAccess();
	}
	
	public ParserRule getExistsExpressionRule() {
		return getExistsExpressionAccess().getRule();
	}
	
	////binary, non-associative
	//EquivalenceExpression Expression:
	//	ComparisionExpression ({EqualityExpression.leftOperand=current} ('=' | '==') rightOperand=ComparisionExpression |
	//	{InequalityExpression.leftOperand=current} ('/=' | '!=') rightOperand=ComparisionExpression)?;
	public ExpressionLanguageGrammarAccess.EquivalenceExpressionElements getEquivalenceExpressionAccess() {
		return gaExpressionLanguage.getEquivalenceExpressionAccess();
	}
	
	public ParserRule getEquivalenceExpressionRule() {
		return getEquivalenceExpressionAccess().getRule();
	}
	
	////binary, non-associative
	//ComparisionExpression Expression:
	//	AdditiveExpression (({GreaterExpression.leftOperand=current} '>' | {GreaterEqualExpression.leftOperand=current} '>='
	//	| {LessExpression.leftOperand=current} '<' | {LessEqualExpression.leftOperand=current} '<=')
	//	rightOperand=AdditiveExpression)*;
	public ExpressionLanguageGrammarAccess.ComparisionExpressionElements getComparisionExpressionAccess() {
		return gaExpressionLanguage.getComparisionExpressionAccess();
	}
	
	public ParserRule getComparisionExpressionRule() {
		return getComparisionExpressionAccess().getRule();
	}
	
	////binary, left-associative
	//AdditiveExpression Expression:
	//	MultiplicativeExpression ({AddExpression.operands+= current} => ('+' operands+=MultiplicativeExpression)+ |
	//	{SubtractExpression.leftOperand=current} '-' rightOperand=MultiplicativeExpression)*;
	public ExpressionLanguageGrammarAccess.AdditiveExpressionElements getAdditiveExpressionAccess() {
		return gaExpressionLanguage.getAdditiveExpressionAccess();
	}
	
	public ParserRule getAdditiveExpressionRule() {
		return getAdditiveExpressionAccess().getRule();
	}
	
	////binary, left-associative
	//MultiplicativeExpression Expression:
	//	SignumExpression ({MultiplyExpression.operands+= current} => ('*' operands+=SignumExpression)+ | (
	//	{DivideExpression.leftOperand=current} '/' | {DivExpression.leftOperand=current} 'div' |
	//	{ModExpression.leftOperand=current} 'mod') rightOperand=SignumExpression)*;
	public ExpressionLanguageGrammarAccess.MultiplicativeExpressionElements getMultiplicativeExpressionAccess() {
		return gaExpressionLanguage.getMultiplicativeExpressionAccess();
	}
	
	public ParserRule getMultiplicativeExpressionRule() {
		return getMultiplicativeExpressionAccess().getRule();
	}
	
	////prefix unary, right-associative
	//SignumExpression Expression:
	//	{UnaryMinusExpression} => '-' operand=SignumExpression | {UnaryPlusExpression} => '+' operand=SignumExpression |
	//	AccessExpression;
	public ExpressionLanguageGrammarAccess.SignumExpressionElements getSignumExpressionAccess() {
		return gaExpressionLanguage.getSignumExpressionAccess();
	}
	
	public ParserRule getSignumExpressionRule() {
		return getSignumExpressionAccess().getRule();
	}
	
	//AccessExpression Expression:
	//	super::PrimaryExpression ({ArrayAccessExpression.operand=current} '[' index=Expression ']' |
	//	{FunctionAccessExpression.operand=current} '(' (arguments+=Expression (',' arguments+=Expression)*)? ')' |
	//	{RecordAccessExpression.operand=current} '.' fieldReference=FieldReferenceExpression |
	//	{SelectExpression.operand=current} '->' 'select')*;
	public ExpressionLanguageGrammarAccess.AccessExpressionElements getAccessExpressionAccess() {
		return gaExpressionLanguage.getAccessExpressionAccess();
	}
	
	public ParserRule getAccessExpressionRule() {
		return getAccessExpressionAccess().getRule();
	}
	
	//FieldReferenceExpression:
	//	{FieldReferenceExpression} fieldDeclaration=[FieldDeclaration];
	public ExpressionLanguageGrammarAccess.FieldReferenceExpressionElements getFieldReferenceExpressionAccess() {
		return gaExpressionLanguage.getFieldReferenceExpressionAccess();
	}
	
	public ParserRule getFieldReferenceExpressionRule() {
		return getFieldReferenceExpressionAccess().getRule();
	}
	
	//PrimaryExpression Expression:
	//	DirectReferenceExpression | LiteralExpression |
	//	'(' Expression ')';
	public ExpressionLanguageGrammarAccess.PrimaryExpressionElements getExpressionLanguagePrimaryExpressionAccess() {
		return gaExpressionLanguage.getPrimaryExpressionAccess();
	}
	
	public ParserRule getExpressionLanguagePrimaryExpressionRule() {
		return getExpressionLanguagePrimaryExpressionAccess().getRule();
	}
	
	//DirectReferenceExpression:
	//	{DirectReferenceExpression} declaration=[ValueDeclaration];
	public ExpressionLanguageGrammarAccess.DirectReferenceExpressionElements getDirectReferenceExpressionAccess() {
		return gaExpressionLanguage.getDirectReferenceExpressionAccess();
	}
	
	public ParserRule getDirectReferenceExpressionRule() {
		return getDirectReferenceExpressionAccess().getRule();
	}
	
	//LiteralExpression Expression:
	//	IntegerLiteralExpression | DecimalLiteralExpression | RationalLiteralExpression | BooleanLiteralExpression |
	//	ArrayLiteralExpression | RecordLiteralExpression | EnumerationLiteralExpression | IntegerRangeLiteralExpression |
	//	OpaqueExpression;
	public ExpressionLanguageGrammarAccess.LiteralExpressionElements getLiteralExpressionAccess() {
		return gaExpressionLanguage.getLiteralExpressionAccess();
	}
	
	public ParserRule getLiteralExpressionRule() {
		return getLiteralExpressionAccess().getRule();
	}
	
	//IntegerLiteralExpression:
	//	value=INTEGER;
	public ExpressionLanguageGrammarAccess.IntegerLiteralExpressionElements getIntegerLiteralExpressionAccess() {
		return gaExpressionLanguage.getIntegerLiteralExpressionAccess();
	}
	
	public ParserRule getIntegerLiteralExpressionRule() {
		return getIntegerLiteralExpressionAccess().getRule();
	}
	
	//DecimalLiteralExpression:
	//	value=DECIMAL;
	public ExpressionLanguageGrammarAccess.DecimalLiteralExpressionElements getDecimalLiteralExpressionAccess() {
		return gaExpressionLanguage.getDecimalLiteralExpressionAccess();
	}
	
	public ParserRule getDecimalLiteralExpressionRule() {
		return getDecimalLiteralExpressionAccess().getRule();
	}
	
	//RationalLiteralExpression:
	//	numerator=INTEGER '%' denominator=INTEGER;
	public ExpressionLanguageGrammarAccess.RationalLiteralExpressionElements getRationalLiteralExpressionAccess() {
		return gaExpressionLanguage.getRationalLiteralExpressionAccess();
	}
	
	public ParserRule getRationalLiteralExpressionRule() {
		return getRationalLiteralExpressionAccess().getRule();
	}
	
	//BooleanLiteralExpression:
	//	TrueExpression | FalseExpression;
	public ExpressionLanguageGrammarAccess.BooleanLiteralExpressionElements getBooleanLiteralExpressionAccess() {
		return gaExpressionLanguage.getBooleanLiteralExpressionAccess();
	}
	
	public ParserRule getBooleanLiteralExpressionRule() {
		return getBooleanLiteralExpressionAccess().getRule();
	}
	
	//TrueExpression:
	//	{TrueExpression} 'true';
	public ExpressionLanguageGrammarAccess.TrueExpressionElements getTrueExpressionAccess() {
		return gaExpressionLanguage.getTrueExpressionAccess();
	}
	
	public ParserRule getTrueExpressionRule() {
		return getTrueExpressionAccess().getRule();
	}
	
	//FalseExpression:
	//	{FalseExpression} 'false';
	public ExpressionLanguageGrammarAccess.FalseExpressionElements getFalseExpressionAccess() {
		return gaExpressionLanguage.getFalseExpressionAccess();
	}
	
	public ParserRule getFalseExpressionRule() {
		return getFalseExpressionAccess().getRule();
	}
	
	//RecordLiteralExpression:
	//	'#' typeDeclaration=[TypeDeclaration] '{' fieldAssignments+=FieldAssignment (',' fieldAssignments+=FieldAssignment)*
	//	'}';
	public ExpressionLanguageGrammarAccess.RecordLiteralExpressionElements getRecordLiteralExpressionAccess() {
		return gaExpressionLanguage.getRecordLiteralExpressionAccess();
	}
	
	public ParserRule getRecordLiteralExpressionRule() {
		return getRecordLiteralExpressionAccess().getRule();
	}
	
	//FieldAssignment:
	//	reference=FieldReferenceExpression ':=' value=Expression;
	public ExpressionLanguageGrammarAccess.FieldAssignmentElements getFieldAssignmentAccess() {
		return gaExpressionLanguage.getFieldAssignmentAccess();
	}
	
	public ParserRule getFieldAssignmentRule() {
		return getFieldAssignmentAccess().getRule();
	}
	
	//EnumerationLiteralExpression:
	//	typeReference=TypeReference '::' reference=[EnumerationLiteralDefinition];
	public ExpressionLanguageGrammarAccess.EnumerationLiteralExpressionElements getEnumerationLiteralExpressionAccess() {
		return gaExpressionLanguage.getEnumerationLiteralExpressionAccess();
	}
	
	public ParserRule getEnumerationLiteralExpressionRule() {
		return getEnumerationLiteralExpressionAccess().getRule();
	}
	
	//OpaqueExpression:
	//	expression=STRING;
	public ExpressionLanguageGrammarAccess.OpaqueExpressionElements getOpaqueExpressionAccess() {
		return gaExpressionLanguage.getOpaqueExpressionAccess();
	}
	
	public ParserRule getOpaqueExpressionRule() {
		return getOpaqueExpressionAccess().getRule();
	}
	
	//ArrayLiteralExpression:
	//	'#[' operands+=Expression (',' operands+=Expression)* ']';
	public ExpressionLanguageGrammarAccess.ArrayLiteralExpressionElements getArrayLiteralExpressionAccess() {
		return gaExpressionLanguage.getArrayLiteralExpressionAccess();
	}
	
	public ParserRule getArrayLiteralExpressionRule() {
		return getArrayLiteralExpressionAccess().getRule();
	}
	
	//IntegerRangeLiteralExpression:
	//	{IntegerRangeLiteralExpression} (leftInclusive?='<+' | '<-') leftOperand=Expression '..' rightOperand=Expression
	//	(rightInclusive?='+>' | '->');
	public ExpressionLanguageGrammarAccess.IntegerRangeLiteralExpressionElements getIntegerRangeLiteralExpressionAccess() {
		return gaExpressionLanguage.getIntegerRangeLiteralExpressionAccess();
	}
	
	public ParserRule getIntegerRangeLiteralExpressionRule() {
		return getIntegerRangeLiteralExpressionAccess().getRule();
	}
	
	/////////////////////////////////
	//// Basic Constraint
	/////////////////////////////////
	//BasicConstraintDefinition:
	//	'constraint' expression=Expression;
	public ExpressionLanguageGrammarAccess.BasicConstraintDefinitionElements getBasicConstraintDefinitionAccess() {
		return gaExpressionLanguage.getBasicConstraintDefinitionAccess();
	}
	
	public ParserRule getBasicConstraintDefinitionRule() {
		return getBasicConstraintDefinitionAccess().getRule();
	}
	
	//@Override
	//terminal INT returns Ecore::EInt:
	//	'INT has been deactivated';
	public TerminalRule getINTRule() {
		return gaExpressionLanguage.getINTRule();
	}
	
	//terminal INTEGER returns Ecore::EBigInteger:
	//	'-'? '0'..'9'+;
	public TerminalRule getINTEGERRule() {
		return gaExpressionLanguage.getINTEGERRule();
	}
	
	//terminal DECIMAL returns Ecore::EBigDecimal:
	//	'-'? '0'..'9'+ '.' '0'..'9'+;
	public TerminalRule getDECIMALRule() {
		return gaExpressionLanguage.getDECIMALRule();
	}
	
	//BOOLEAN Ecore::EBoolean: // Terminal would not work due to the enshadowing of ID
	//	'true' | 'false';
	public ExpressionLanguageGrammarAccess.BOOLEANElements getBOOLEANAccess() {
		return gaExpressionLanguage.getBOOLEANAccess();
	}
	
	public ParserRule getBOOLEANRule() {
		return getBOOLEANAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}

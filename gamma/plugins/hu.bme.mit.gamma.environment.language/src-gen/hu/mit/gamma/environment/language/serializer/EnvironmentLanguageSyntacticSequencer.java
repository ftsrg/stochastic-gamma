/*
 * generated by Xtext 2.24.0
 */
package hu.mit.gamma.environment.language.serializer;

import com.google.inject.Inject;
import hu.mit.gamma.environment.language.services.EnvironmentLanguageGrammarAccess;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AlternativeAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.GroupAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;

@SuppressWarnings("all")
public class EnvironmentLanguageSyntacticSequencer extends AbstractSyntacticSequencer {

	protected EnvironmentLanguageGrammarAccess grammarAccess;
	protected AbstractElementAlias match_AnalysisComponent___LeftParenthesisKeyword_2_0_RightParenthesisKeyword_2_2__q;
	protected AbstractElementAlias match_AssignablePrimaryExpression_LeftParenthesisKeyword_1_0_a;
	protected AbstractElementAlias match_AssignablePrimaryExpression_LeftParenthesisKeyword_1_0_p;
	protected AbstractElementAlias match_AsynchronousAdapter_CommaKeyword_5_1_1_0_q;
	protected AbstractElementAlias match_AsynchronousAdapter___LeftParenthesisKeyword_2_0_RightParenthesisKeyword_2_2__q;
	protected AbstractElementAlias match_AsynchronousAdapter___LeftSquareBracketKeyword_5_0_RightSquareBracketKeyword_5_2__q;
	protected AbstractElementAlias match_AsynchronousCompositeComponent_CommaKeyword_3_1_1_0_q;
	protected AbstractElementAlias match_AsynchronousCompositeComponent___LeftParenthesisKeyword_2_0_RightParenthesisKeyword_2_2__q;
	protected AbstractElementAlias match_AsynchronousCompositeComponent___LeftSquareBracketKeyword_3_0_RightSquareBracketKeyword_3_2__q;
	protected AbstractElementAlias match_CascadeCompositeComponent_CommaKeyword_3_1_1_0_q;
	protected AbstractElementAlias match_CascadeCompositeComponent___LeftParenthesisKeyword_2_0_RightParenthesisKeyword_2_2__q;
	protected AbstractElementAlias match_CascadeCompositeComponent___LeftSquareBracketKeyword_3_0_RightSquareBracketKeyword_3_2__q;
	protected AbstractElementAlias match_EnvironmentCompositeComponent_CommaKeyword_3_1_1_0_q;
	protected AbstractElementAlias match_EnvironmentCompositeComponent___LeftParenthesisKeyword_2_0_RightParenthesisKeyword_2_2__q;
	protected AbstractElementAlias match_EnvironmentCompositeComponent___LeftSquareBracketKeyword_3_0_RightSquareBracketKeyword_3_2__q;
	protected AbstractElementAlias match_EquivalenceExpression_EqualsSignEqualsSignKeyword_1_0_1_1_or_EqualsSignKeyword_1_0_1_0;
	protected AbstractElementAlias match_EquivalenceExpression_ExclamationMarkEqualsSignKeyword_1_1_1_1_or_SolidusEqualsSignKeyword_1_1_1_0;
	protected AbstractElementAlias match_ExpressionLanguagePrimaryExpression_LeftParenthesisKeyword_2_0_a;
	protected AbstractElementAlias match_ExpressionLanguagePrimaryExpression_LeftParenthesisKeyword_2_0_p;
	protected AbstractElementAlias match_ExpressionPackage___LeftParenthesisKeyword_2_0_RightParenthesisKeyword_2_2__q;
	protected AbstractElementAlias match_FittedGaussianProcess_GPKeyword_0_0_or___GaussKeyword_0_1_0_ProcessKeyword_0_1_1__;
	protected AbstractElementAlias match_LambdaDeclaration___LeftParenthesisKeyword_2_0_RightParenthesisKeyword_2_2__q;
	protected AbstractElementAlias match_NotExpression_ExclamationMarkKeyword_1_0_1_or_NotKeyword_1_0_0;
	protected AbstractElementAlias match_ParenthesesTrigger_LeftParenthesisKeyword_0_a;
	protected AbstractElementAlias match_ParenthesesTrigger_LeftParenthesisKeyword_0_p;
	protected AbstractElementAlias match_ProcedureDeclaration___LeftParenthesisKeyword_2_0_RightParenthesisKeyword_2_2__q;
	protected AbstractElementAlias match_RequirementComponent___LeftParenthesisKeyword_2_0_RightParenthesisKeyword_2_2__q;
	protected AbstractElementAlias match_State___EntryKeyword_3_1_0_1_0_SolidusKeyword_3_1_0_1_1__q;
	protected AbstractElementAlias match_State___ExitKeyword_3_1_0_2_0_SolidusKeyword_3_1_0_2_1__q;
	protected AbstractElementAlias match_State___LeftCurlyBracketKeyword_3_0___EntryKeyword_3_1_0_1_0_SolidusKeyword_3_1_0_1_1__q___ExitKeyword_3_1_0_2_0_SolidusKeyword_3_1_0_2_1__q_RightCurlyBracketKeyword_3_2__q;
	protected AbstractElementAlias match_StatechartDefinition_CommaKeyword_4_1_1_0_q;
	protected AbstractElementAlias match_StatechartDefinition___LeftParenthesisKeyword_3_0_RightParenthesisKeyword_3_2__q;
	protected AbstractElementAlias match_StatechartDefinition___LeftSquareBracketKeyword_4_0_RightSquareBracketKeyword_4_2__q;
	protected AbstractElementAlias match_StatechartReference___LeftParenthesisKeyword_3_0_RightParenthesisKeyword_3_2__q;
	protected AbstractElementAlias match_SynchronousCompositeComponent_CommaKeyword_3_1_1_0_q;
	protected AbstractElementAlias match_SynchronousCompositeComponent___LeftParenthesisKeyword_2_0_RightParenthesisKeyword_2_2__q;
	protected AbstractElementAlias match_SynchronousCompositeComponent___LeftSquareBracketKeyword_3_0_RightSquareBracketKeyword_3_2__q;
	protected AbstractElementAlias match_Transition_SolidusKeyword_7_2_0_q;
	protected AbstractElementAlias match_WeibullRandomVariable_WeibullKeyword_0_0_or_WeibullKeyword_0_1;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (EnvironmentLanguageGrammarAccess) access;
		match_AnalysisComponent___LeftParenthesisKeyword_2_0_RightParenthesisKeyword_2_2__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getAnalysisComponentAccess().getLeftParenthesisKeyword_2_0()), new TokenAlias(false, false, grammarAccess.getAnalysisComponentAccess().getRightParenthesisKeyword_2_2()));
		match_AssignablePrimaryExpression_LeftParenthesisKeyword_1_0_a = new TokenAlias(true, true, grammarAccess.getAssignablePrimaryExpressionAccess().getLeftParenthesisKeyword_1_0());
		match_AssignablePrimaryExpression_LeftParenthesisKeyword_1_0_p = new TokenAlias(true, false, grammarAccess.getAssignablePrimaryExpressionAccess().getLeftParenthesisKeyword_1_0());
		match_AsynchronousAdapter_CommaKeyword_5_1_1_0_q = new TokenAlias(false, true, grammarAccess.getAsynchronousAdapterAccess().getCommaKeyword_5_1_1_0());
		match_AsynchronousAdapter___LeftParenthesisKeyword_2_0_RightParenthesisKeyword_2_2__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getAsynchronousAdapterAccess().getLeftParenthesisKeyword_2_0()), new TokenAlias(false, false, grammarAccess.getAsynchronousAdapterAccess().getRightParenthesisKeyword_2_2()));
		match_AsynchronousAdapter___LeftSquareBracketKeyword_5_0_RightSquareBracketKeyword_5_2__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getAsynchronousAdapterAccess().getLeftSquareBracketKeyword_5_0()), new TokenAlias(false, false, grammarAccess.getAsynchronousAdapterAccess().getRightSquareBracketKeyword_5_2()));
		match_AsynchronousCompositeComponent_CommaKeyword_3_1_1_0_q = new TokenAlias(false, true, grammarAccess.getAsynchronousCompositeComponentAccess().getCommaKeyword_3_1_1_0());
		match_AsynchronousCompositeComponent___LeftParenthesisKeyword_2_0_RightParenthesisKeyword_2_2__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getAsynchronousCompositeComponentAccess().getLeftParenthesisKeyword_2_0()), new TokenAlias(false, false, grammarAccess.getAsynchronousCompositeComponentAccess().getRightParenthesisKeyword_2_2()));
		match_AsynchronousCompositeComponent___LeftSquareBracketKeyword_3_0_RightSquareBracketKeyword_3_2__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getAsynchronousCompositeComponentAccess().getLeftSquareBracketKeyword_3_0()), new TokenAlias(false, false, grammarAccess.getAsynchronousCompositeComponentAccess().getRightSquareBracketKeyword_3_2()));
		match_CascadeCompositeComponent_CommaKeyword_3_1_1_0_q = new TokenAlias(false, true, grammarAccess.getCascadeCompositeComponentAccess().getCommaKeyword_3_1_1_0());
		match_CascadeCompositeComponent___LeftParenthesisKeyword_2_0_RightParenthesisKeyword_2_2__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getCascadeCompositeComponentAccess().getLeftParenthesisKeyword_2_0()), new TokenAlias(false, false, grammarAccess.getCascadeCompositeComponentAccess().getRightParenthesisKeyword_2_2()));
		match_CascadeCompositeComponent___LeftSquareBracketKeyword_3_0_RightSquareBracketKeyword_3_2__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getCascadeCompositeComponentAccess().getLeftSquareBracketKeyword_3_0()), new TokenAlias(false, false, grammarAccess.getCascadeCompositeComponentAccess().getRightSquareBracketKeyword_3_2()));
		match_EnvironmentCompositeComponent_CommaKeyword_3_1_1_0_q = new TokenAlias(false, true, grammarAccess.getEnvironmentCompositeComponentAccess().getCommaKeyword_3_1_1_0());
		match_EnvironmentCompositeComponent___LeftParenthesisKeyword_2_0_RightParenthesisKeyword_2_2__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getEnvironmentCompositeComponentAccess().getLeftParenthesisKeyword_2_0()), new TokenAlias(false, false, grammarAccess.getEnvironmentCompositeComponentAccess().getRightParenthesisKeyword_2_2()));
		match_EnvironmentCompositeComponent___LeftSquareBracketKeyword_3_0_RightSquareBracketKeyword_3_2__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getEnvironmentCompositeComponentAccess().getLeftSquareBracketKeyword_3_0()), new TokenAlias(false, false, grammarAccess.getEnvironmentCompositeComponentAccess().getRightSquareBracketKeyword_3_2()));
		match_EquivalenceExpression_EqualsSignEqualsSignKeyword_1_0_1_1_or_EqualsSignKeyword_1_0_1_0 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getEquivalenceExpressionAccess().getEqualsSignEqualsSignKeyword_1_0_1_1()), new TokenAlias(false, false, grammarAccess.getEquivalenceExpressionAccess().getEqualsSignKeyword_1_0_1_0()));
		match_EquivalenceExpression_ExclamationMarkEqualsSignKeyword_1_1_1_1_or_SolidusEqualsSignKeyword_1_1_1_0 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getEquivalenceExpressionAccess().getExclamationMarkEqualsSignKeyword_1_1_1_1()), new TokenAlias(false, false, grammarAccess.getEquivalenceExpressionAccess().getSolidusEqualsSignKeyword_1_1_1_0()));
		match_ExpressionLanguagePrimaryExpression_LeftParenthesisKeyword_2_0_a = new TokenAlias(true, true, grammarAccess.getExpressionLanguagePrimaryExpressionAccess().getLeftParenthesisKeyword_2_0());
		match_ExpressionLanguagePrimaryExpression_LeftParenthesisKeyword_2_0_p = new TokenAlias(true, false, grammarAccess.getExpressionLanguagePrimaryExpressionAccess().getLeftParenthesisKeyword_2_0());
		match_ExpressionPackage___LeftParenthesisKeyword_2_0_RightParenthesisKeyword_2_2__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getExpressionPackageAccess().getLeftParenthesisKeyword_2_0()), new TokenAlias(false, false, grammarAccess.getExpressionPackageAccess().getRightParenthesisKeyword_2_2()));
		match_FittedGaussianProcess_GPKeyword_0_0_or___GaussKeyword_0_1_0_ProcessKeyword_0_1_1__ = new AlternativeAlias(false, false, new GroupAlias(false, false, new TokenAlias(false, false, grammarAccess.getFittedGaussianProcessAccess().getGaussKeyword_0_1_0()), new TokenAlias(false, false, grammarAccess.getFittedGaussianProcessAccess().getProcessKeyword_0_1_1())), new TokenAlias(false, false, grammarAccess.getFittedGaussianProcessAccess().getGPKeyword_0_0()));
		match_LambdaDeclaration___LeftParenthesisKeyword_2_0_RightParenthesisKeyword_2_2__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getLambdaDeclarationAccess().getLeftParenthesisKeyword_2_0()), new TokenAlias(false, false, grammarAccess.getLambdaDeclarationAccess().getRightParenthesisKeyword_2_2()));
		match_NotExpression_ExclamationMarkKeyword_1_0_1_or_NotKeyword_1_0_0 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getNotExpressionAccess().getExclamationMarkKeyword_1_0_1()), new TokenAlias(false, false, grammarAccess.getNotExpressionAccess().getNotKeyword_1_0_0()));
		match_ParenthesesTrigger_LeftParenthesisKeyword_0_a = new TokenAlias(true, true, grammarAccess.getParenthesesTriggerAccess().getLeftParenthesisKeyword_0());
		match_ParenthesesTrigger_LeftParenthesisKeyword_0_p = new TokenAlias(true, false, grammarAccess.getParenthesesTriggerAccess().getLeftParenthesisKeyword_0());
		match_ProcedureDeclaration___LeftParenthesisKeyword_2_0_RightParenthesisKeyword_2_2__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getProcedureDeclarationAccess().getLeftParenthesisKeyword_2_0()), new TokenAlias(false, false, grammarAccess.getProcedureDeclarationAccess().getRightParenthesisKeyword_2_2()));
		match_RequirementComponent___LeftParenthesisKeyword_2_0_RightParenthesisKeyword_2_2__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getRequirementComponentAccess().getLeftParenthesisKeyword_2_0()), new TokenAlias(false, false, grammarAccess.getRequirementComponentAccess().getRightParenthesisKeyword_2_2()));
		match_State___EntryKeyword_3_1_0_1_0_SolidusKeyword_3_1_0_1_1__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getStateAccess().getEntryKeyword_3_1_0_1_0()), new TokenAlias(false, false, grammarAccess.getStateAccess().getSolidusKeyword_3_1_0_1_1()));
		match_State___ExitKeyword_3_1_0_2_0_SolidusKeyword_3_1_0_2_1__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getStateAccess().getExitKeyword_3_1_0_2_0()), new TokenAlias(false, false, grammarAccess.getStateAccess().getSolidusKeyword_3_1_0_2_1()));
		match_State___LeftCurlyBracketKeyword_3_0___EntryKeyword_3_1_0_1_0_SolidusKeyword_3_1_0_1_1__q___ExitKeyword_3_1_0_2_0_SolidusKeyword_3_1_0_2_1__q_RightCurlyBracketKeyword_3_2__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getStateAccess().getLeftCurlyBracketKeyword_3_0()), new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getStateAccess().getEntryKeyword_3_1_0_1_0()), new TokenAlias(false, false, grammarAccess.getStateAccess().getSolidusKeyword_3_1_0_1_1())), new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getStateAccess().getExitKeyword_3_1_0_2_0()), new TokenAlias(false, false, grammarAccess.getStateAccess().getSolidusKeyword_3_1_0_2_1())), new TokenAlias(false, false, grammarAccess.getStateAccess().getRightCurlyBracketKeyword_3_2()));
		match_StatechartDefinition_CommaKeyword_4_1_1_0_q = new TokenAlias(false, true, grammarAccess.getStatechartDefinitionAccess().getCommaKeyword_4_1_1_0());
		match_StatechartDefinition___LeftParenthesisKeyword_3_0_RightParenthesisKeyword_3_2__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getStatechartDefinitionAccess().getLeftParenthesisKeyword_3_0()), new TokenAlias(false, false, grammarAccess.getStatechartDefinitionAccess().getRightParenthesisKeyword_3_2()));
		match_StatechartDefinition___LeftSquareBracketKeyword_4_0_RightSquareBracketKeyword_4_2__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getStatechartDefinitionAccess().getLeftSquareBracketKeyword_4_0()), new TokenAlias(false, false, grammarAccess.getStatechartDefinitionAccess().getRightSquareBracketKeyword_4_2()));
		match_StatechartReference___LeftParenthesisKeyword_3_0_RightParenthesisKeyword_3_2__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getStatechartReferenceAccess().getLeftParenthesisKeyword_3_0()), new TokenAlias(false, false, grammarAccess.getStatechartReferenceAccess().getRightParenthesisKeyword_3_2()));
		match_SynchronousCompositeComponent_CommaKeyword_3_1_1_0_q = new TokenAlias(false, true, grammarAccess.getSynchronousCompositeComponentAccess().getCommaKeyword_3_1_1_0());
		match_SynchronousCompositeComponent___LeftParenthesisKeyword_2_0_RightParenthesisKeyword_2_2__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getSynchronousCompositeComponentAccess().getLeftParenthesisKeyword_2_0()), new TokenAlias(false, false, grammarAccess.getSynchronousCompositeComponentAccess().getRightParenthesisKeyword_2_2()));
		match_SynchronousCompositeComponent___LeftSquareBracketKeyword_3_0_RightSquareBracketKeyword_3_2__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getSynchronousCompositeComponentAccess().getLeftSquareBracketKeyword_3_0()), new TokenAlias(false, false, grammarAccess.getSynchronousCompositeComponentAccess().getRightSquareBracketKeyword_3_2()));
		match_Transition_SolidusKeyword_7_2_0_q = new TokenAlias(false, true, grammarAccess.getTransitionAccess().getSolidusKeyword_7_2_0());
		match_WeibullRandomVariable_WeibullKeyword_0_0_or_WeibullKeyword_0_1 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getWeibullRandomVariableAccess().getWeibullKeyword_0_0()), new TokenAlias(false, false, grammarAccess.getWeibullRandomVariableAccess().getWeibullKeyword_0_1()));
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		return "";
	}
	
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_AnalysisComponent___LeftParenthesisKeyword_2_0_RightParenthesisKeyword_2_2__q.equals(syntax))
				emit_AnalysisComponent___LeftParenthesisKeyword_2_0_RightParenthesisKeyword_2_2__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_AssignablePrimaryExpression_LeftParenthesisKeyword_1_0_a.equals(syntax))
				emit_AssignablePrimaryExpression_LeftParenthesisKeyword_1_0_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_AssignablePrimaryExpression_LeftParenthesisKeyword_1_0_p.equals(syntax))
				emit_AssignablePrimaryExpression_LeftParenthesisKeyword_1_0_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_AsynchronousAdapter_CommaKeyword_5_1_1_0_q.equals(syntax))
				emit_AsynchronousAdapter_CommaKeyword_5_1_1_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_AsynchronousAdapter___LeftParenthesisKeyword_2_0_RightParenthesisKeyword_2_2__q.equals(syntax))
				emit_AsynchronousAdapter___LeftParenthesisKeyword_2_0_RightParenthesisKeyword_2_2__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_AsynchronousAdapter___LeftSquareBracketKeyword_5_0_RightSquareBracketKeyword_5_2__q.equals(syntax))
				emit_AsynchronousAdapter___LeftSquareBracketKeyword_5_0_RightSquareBracketKeyword_5_2__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_AsynchronousCompositeComponent_CommaKeyword_3_1_1_0_q.equals(syntax))
				emit_AsynchronousCompositeComponent_CommaKeyword_3_1_1_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_AsynchronousCompositeComponent___LeftParenthesisKeyword_2_0_RightParenthesisKeyword_2_2__q.equals(syntax))
				emit_AsynchronousCompositeComponent___LeftParenthesisKeyword_2_0_RightParenthesisKeyword_2_2__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_AsynchronousCompositeComponent___LeftSquareBracketKeyword_3_0_RightSquareBracketKeyword_3_2__q.equals(syntax))
				emit_AsynchronousCompositeComponent___LeftSquareBracketKeyword_3_0_RightSquareBracketKeyword_3_2__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_CascadeCompositeComponent_CommaKeyword_3_1_1_0_q.equals(syntax))
				emit_CascadeCompositeComponent_CommaKeyword_3_1_1_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_CascadeCompositeComponent___LeftParenthesisKeyword_2_0_RightParenthesisKeyword_2_2__q.equals(syntax))
				emit_CascadeCompositeComponent___LeftParenthesisKeyword_2_0_RightParenthesisKeyword_2_2__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_CascadeCompositeComponent___LeftSquareBracketKeyword_3_0_RightSquareBracketKeyword_3_2__q.equals(syntax))
				emit_CascadeCompositeComponent___LeftSquareBracketKeyword_3_0_RightSquareBracketKeyword_3_2__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_EnvironmentCompositeComponent_CommaKeyword_3_1_1_0_q.equals(syntax))
				emit_EnvironmentCompositeComponent_CommaKeyword_3_1_1_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_EnvironmentCompositeComponent___LeftParenthesisKeyword_2_0_RightParenthesisKeyword_2_2__q.equals(syntax))
				emit_EnvironmentCompositeComponent___LeftParenthesisKeyword_2_0_RightParenthesisKeyword_2_2__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_EnvironmentCompositeComponent___LeftSquareBracketKeyword_3_0_RightSquareBracketKeyword_3_2__q.equals(syntax))
				emit_EnvironmentCompositeComponent___LeftSquareBracketKeyword_3_0_RightSquareBracketKeyword_3_2__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_EquivalenceExpression_EqualsSignEqualsSignKeyword_1_0_1_1_or_EqualsSignKeyword_1_0_1_0.equals(syntax))
				emit_EquivalenceExpression_EqualsSignEqualsSignKeyword_1_0_1_1_or_EqualsSignKeyword_1_0_1_0(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_EquivalenceExpression_ExclamationMarkEqualsSignKeyword_1_1_1_1_or_SolidusEqualsSignKeyword_1_1_1_0.equals(syntax))
				emit_EquivalenceExpression_ExclamationMarkEqualsSignKeyword_1_1_1_1_or_SolidusEqualsSignKeyword_1_1_1_0(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ExpressionLanguagePrimaryExpression_LeftParenthesisKeyword_2_0_a.equals(syntax))
				emit_ExpressionLanguagePrimaryExpression_LeftParenthesisKeyword_2_0_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ExpressionLanguagePrimaryExpression_LeftParenthesisKeyword_2_0_p.equals(syntax))
				emit_ExpressionLanguagePrimaryExpression_LeftParenthesisKeyword_2_0_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ExpressionPackage___LeftParenthesisKeyword_2_0_RightParenthesisKeyword_2_2__q.equals(syntax))
				emit_ExpressionPackage___LeftParenthesisKeyword_2_0_RightParenthesisKeyword_2_2__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_FittedGaussianProcess_GPKeyword_0_0_or___GaussKeyword_0_1_0_ProcessKeyword_0_1_1__.equals(syntax))
				emit_FittedGaussianProcess_GPKeyword_0_0_or___GaussKeyword_0_1_0_ProcessKeyword_0_1_1__(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_LambdaDeclaration___LeftParenthesisKeyword_2_0_RightParenthesisKeyword_2_2__q.equals(syntax))
				emit_LambdaDeclaration___LeftParenthesisKeyword_2_0_RightParenthesisKeyword_2_2__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_NotExpression_ExclamationMarkKeyword_1_0_1_or_NotKeyword_1_0_0.equals(syntax))
				emit_NotExpression_ExclamationMarkKeyword_1_0_1_or_NotKeyword_1_0_0(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ParenthesesTrigger_LeftParenthesisKeyword_0_a.equals(syntax))
				emit_ParenthesesTrigger_LeftParenthesisKeyword_0_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ParenthesesTrigger_LeftParenthesisKeyword_0_p.equals(syntax))
				emit_ParenthesesTrigger_LeftParenthesisKeyword_0_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ProcedureDeclaration___LeftParenthesisKeyword_2_0_RightParenthesisKeyword_2_2__q.equals(syntax))
				emit_ProcedureDeclaration___LeftParenthesisKeyword_2_0_RightParenthesisKeyword_2_2__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_RequirementComponent___LeftParenthesisKeyword_2_0_RightParenthesisKeyword_2_2__q.equals(syntax))
				emit_RequirementComponent___LeftParenthesisKeyword_2_0_RightParenthesisKeyword_2_2__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_State___EntryKeyword_3_1_0_1_0_SolidusKeyword_3_1_0_1_1__q.equals(syntax))
				emit_State___EntryKeyword_3_1_0_1_0_SolidusKeyword_3_1_0_1_1__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_State___ExitKeyword_3_1_0_2_0_SolidusKeyword_3_1_0_2_1__q.equals(syntax))
				emit_State___ExitKeyword_3_1_0_2_0_SolidusKeyword_3_1_0_2_1__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_State___LeftCurlyBracketKeyword_3_0___EntryKeyword_3_1_0_1_0_SolidusKeyword_3_1_0_1_1__q___ExitKeyword_3_1_0_2_0_SolidusKeyword_3_1_0_2_1__q_RightCurlyBracketKeyword_3_2__q.equals(syntax))
				emit_State___LeftCurlyBracketKeyword_3_0___EntryKeyword_3_1_0_1_0_SolidusKeyword_3_1_0_1_1__q___ExitKeyword_3_1_0_2_0_SolidusKeyword_3_1_0_2_1__q_RightCurlyBracketKeyword_3_2__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_StatechartDefinition_CommaKeyword_4_1_1_0_q.equals(syntax))
				emit_StatechartDefinition_CommaKeyword_4_1_1_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_StatechartDefinition___LeftParenthesisKeyword_3_0_RightParenthesisKeyword_3_2__q.equals(syntax))
				emit_StatechartDefinition___LeftParenthesisKeyword_3_0_RightParenthesisKeyword_3_2__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_StatechartDefinition___LeftSquareBracketKeyword_4_0_RightSquareBracketKeyword_4_2__q.equals(syntax))
				emit_StatechartDefinition___LeftSquareBracketKeyword_4_0_RightSquareBracketKeyword_4_2__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_StatechartReference___LeftParenthesisKeyword_3_0_RightParenthesisKeyword_3_2__q.equals(syntax))
				emit_StatechartReference___LeftParenthesisKeyword_3_0_RightParenthesisKeyword_3_2__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_SynchronousCompositeComponent_CommaKeyword_3_1_1_0_q.equals(syntax))
				emit_SynchronousCompositeComponent_CommaKeyword_3_1_1_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_SynchronousCompositeComponent___LeftParenthesisKeyword_2_0_RightParenthesisKeyword_2_2__q.equals(syntax))
				emit_SynchronousCompositeComponent___LeftParenthesisKeyword_2_0_RightParenthesisKeyword_2_2__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_SynchronousCompositeComponent___LeftSquareBracketKeyword_3_0_RightSquareBracketKeyword_3_2__q.equals(syntax))
				emit_SynchronousCompositeComponent___LeftSquareBracketKeyword_3_0_RightSquareBracketKeyword_3_2__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Transition_SolidusKeyword_7_2_0_q.equals(syntax))
				emit_Transition_SolidusKeyword_7_2_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_WeibullRandomVariable_WeibullKeyword_0_0_or_WeibullKeyword_0_1.equals(syntax))
				emit_WeibullRandomVariable_WeibullKeyword_0_0_or_WeibullKeyword_0_1(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * Ambiguous syntax:
	 *     ('(' ')')?
	 *
	 * This ambiguous syntax occurs at:
	 *     name=ID (ambiguity) '{' 'in' analyzedComponent=EnvironmentCompositeComponentInstance
	 */
	protected void emit_AnalysisComponent___LeftParenthesisKeyword_2_0_RightParenthesisKeyword_2_2__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '('*
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) declaration=[ValueDeclaration|ID]
	 *     (rule start) (ambiguity) {ArrayAccessExpression.operand=}
	 *     (rule start) (ambiguity) {RecordAccessExpression.operand=}
	 */
	protected void emit_AssignablePrimaryExpression_LeftParenthesisKeyword_1_0_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '('+
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) {ArrayAccessExpression.operand=}
	 *     (rule start) (ambiguity) {RecordAccessExpression.operand=}
	 */
	protected void emit_AssignablePrimaryExpression_LeftParenthesisKeyword_1_0_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ','?
	 *
	 * This ambiguous syntax occurs at:
	 *     ports+=Port (ambiguity) ports+=Port
	 */
	protected void emit_AsynchronousAdapter_CommaKeyword_5_1_1_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('(' ')')?
	 *
	 * This ambiguous syntax occurs at:
	 *     name=ID (ambiguity) 'of' wrappedComponent=SynchronousComponentInstance
	 */
	protected void emit_AsynchronousAdapter___LeftParenthesisKeyword_2_0_RightParenthesisKeyword_2_2__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('[' ']')?
	 *
	 * This ambiguous syntax occurs at:
	 *     wrappedComponent=SynchronousComponentInstance (ambiguity) '{' '}' (rule end)
	 *     wrappedComponent=SynchronousComponentInstance (ambiguity) '{' clocks+=ClockDeclaration
	 *     wrappedComponent=SynchronousComponentInstance (ambiguity) '{' controlSpecifications+=ControlSpecificaiton
	 *     wrappedComponent=SynchronousComponentInstance (ambiguity) '{' messageQueues+=MessageQueue
	 */
	protected void emit_AsynchronousAdapter___LeftSquareBracketKeyword_5_0_RightSquareBracketKeyword_5_2__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ','?
	 *
	 * This ambiguous syntax occurs at:
	 *     ports+=Port (ambiguity) ports+=Port
	 */
	protected void emit_AsynchronousCompositeComponent_CommaKeyword_3_1_1_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('(' ')')?
	 *
	 * This ambiguous syntax occurs at:
	 *     name=ID (ambiguity) '[' ports+=Port
	 *     name=ID (ambiguity) ('[' ']')? '{' '}' (rule end)
	 *     name=ID (ambiguity) ('[' ']')? '{' channels+=Channel
	 *     name=ID (ambiguity) ('[' ']')? '{' components+=AsynchronousComponentInstance
	 *     name=ID (ambiguity) ('[' ']')? '{' portBindings+=PortBinding
	 */
	protected void emit_AsynchronousCompositeComponent___LeftParenthesisKeyword_2_0_RightParenthesisKeyword_2_2__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('[' ']')?
	 *
	 * This ambiguous syntax occurs at:
	 *     name=ID ('(' ')')? (ambiguity) '{' '}' (rule end)
	 *     name=ID ('(' ')')? (ambiguity) '{' channels+=Channel
	 *     name=ID ('(' ')')? (ambiguity) '{' components+=AsynchronousComponentInstance
	 *     name=ID ('(' ')')? (ambiguity) '{' portBindings+=PortBinding
	 *     parameterDeclarations+=ParameterDeclaration ')' (ambiguity) '{' '}' (rule end)
	 *     parameterDeclarations+=ParameterDeclaration ')' (ambiguity) '{' channels+=Channel
	 *     parameterDeclarations+=ParameterDeclaration ')' (ambiguity) '{' components+=AsynchronousComponentInstance
	 *     parameterDeclarations+=ParameterDeclaration ')' (ambiguity) '{' portBindings+=PortBinding
	 */
	protected void emit_AsynchronousCompositeComponent___LeftSquareBracketKeyword_3_0_RightSquareBracketKeyword_3_2__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ','?
	 *
	 * This ambiguous syntax occurs at:
	 *     ports+=Port (ambiguity) ports+=Port
	 */
	protected void emit_CascadeCompositeComponent_CommaKeyword_3_1_1_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('(' ')')?
	 *
	 * This ambiguous syntax occurs at:
	 *     name=ID (ambiguity) '[' ports+=Port
	 *     name=ID (ambiguity) ('[' ']')? '{' 'execute' executionList+=[SynchronousComponentInstance|ID]
	 *     name=ID (ambiguity) ('[' ']')? '{' '}' (rule end)
	 *     name=ID (ambiguity) ('[' ']')? '{' channels+=Channel
	 *     name=ID (ambiguity) ('[' ']')? '{' components+=SynchronousComponentInstance
	 *     name=ID (ambiguity) ('[' ']')? '{' portBindings+=PortBinding
	 */
	protected void emit_CascadeCompositeComponent___LeftParenthesisKeyword_2_0_RightParenthesisKeyword_2_2__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('[' ']')?
	 *
	 * This ambiguous syntax occurs at:
	 *     name=ID ('(' ')')? (ambiguity) '{' 'execute' executionList+=[SynchronousComponentInstance|ID]
	 *     name=ID ('(' ')')? (ambiguity) '{' '}' (rule end)
	 *     name=ID ('(' ')')? (ambiguity) '{' channels+=Channel
	 *     name=ID ('(' ')')? (ambiguity) '{' components+=SynchronousComponentInstance
	 *     name=ID ('(' ')')? (ambiguity) '{' portBindings+=PortBinding
	 *     parameterDeclarations+=ParameterDeclaration ')' (ambiguity) '{' 'execute' executionList+=[SynchronousComponentInstance|ID]
	 *     parameterDeclarations+=ParameterDeclaration ')' (ambiguity) '{' '}' (rule end)
	 *     parameterDeclarations+=ParameterDeclaration ')' (ambiguity) '{' channels+=Channel
	 *     parameterDeclarations+=ParameterDeclaration ')' (ambiguity) '{' components+=SynchronousComponentInstance
	 *     parameterDeclarations+=ParameterDeclaration ')' (ambiguity) '{' portBindings+=PortBinding
	 */
	protected void emit_CascadeCompositeComponent___LeftSquareBracketKeyword_3_0_RightSquareBracketKeyword_3_2__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ','?
	 *
	 * This ambiguous syntax occurs at:
	 *     ports+=Port (ambiguity) ports+=Port
	 */
	protected void emit_EnvironmentCompositeComponent_CommaKeyword_3_1_1_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('(' ')')?
	 *
	 * This ambiguous syntax occurs at:
	 *     name=ID (ambiguity) '[' ports+=Port
	 *     name=ID (ambiguity) ('[' ']')? '{' 'failure' 'propagation' executionList+=[SynchronousComponentInstance|ID]
	 *     name=ID (ambiguity) ('[' ']')? '{' '}' (rule end)
	 *     name=ID (ambiguity) ('[' ']')? '{' channels+=Channel
	 *     name=ID (ambiguity) ('[' ']')? '{' components+=SynchronousComponentInstance
	 *     name=ID (ambiguity) ('[' ']')? '{' environmentComponents+=EnvironmentComponentInstance
	 *     name=ID (ambiguity) ('[' ']')? '{' portBindings+=PortBinding
	 */
	protected void emit_EnvironmentCompositeComponent___LeftParenthesisKeyword_2_0_RightParenthesisKeyword_2_2__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('[' ']')?
	 *
	 * This ambiguous syntax occurs at:
	 *     name=ID ('(' ')')? (ambiguity) '{' 'failure' 'propagation' executionList+=[SynchronousComponentInstance|ID]
	 *     name=ID ('(' ')')? (ambiguity) '{' '}' (rule end)
	 *     name=ID ('(' ')')? (ambiguity) '{' channels+=Channel
	 *     name=ID ('(' ')')? (ambiguity) '{' components+=SynchronousComponentInstance
	 *     name=ID ('(' ')')? (ambiguity) '{' environmentComponents+=EnvironmentComponentInstance
	 *     name=ID ('(' ')')? (ambiguity) '{' portBindings+=PortBinding
	 *     parameterDeclarations+=ParameterDeclaration ')' (ambiguity) '{' 'failure' 'propagation' executionList+=[SynchronousComponentInstance|ID]
	 *     parameterDeclarations+=ParameterDeclaration ')' (ambiguity) '{' '}' (rule end)
	 *     parameterDeclarations+=ParameterDeclaration ')' (ambiguity) '{' channels+=Channel
	 *     parameterDeclarations+=ParameterDeclaration ')' (ambiguity) '{' components+=SynchronousComponentInstance
	 *     parameterDeclarations+=ParameterDeclaration ')' (ambiguity) '{' environmentComponents+=EnvironmentComponentInstance
	 *     parameterDeclarations+=ParameterDeclaration ')' (ambiguity) '{' portBindings+=PortBinding
	 */
	protected void emit_EnvironmentCompositeComponent___LeftSquareBracketKeyword_3_0_RightSquareBracketKeyword_3_2__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '=' | '=='
	 *
	 * This ambiguous syntax occurs at:
	 *     {EqualityExpression.leftOperand=} (ambiguity) rightOperand=ComparisionExpression
	 */
	protected void emit_EquivalenceExpression_EqualsSignEqualsSignKeyword_1_0_1_1_or_EqualsSignKeyword_1_0_1_0(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '/=' | '!='
	 *
	 * This ambiguous syntax occurs at:
	 *     {InequalityExpression.leftOperand=} (ambiguity) rightOperand=ComparisionExpression
	 */
	protected void emit_EquivalenceExpression_ExclamationMarkEqualsSignKeyword_1_1_1_1_or_SolidusEqualsSignKeyword_1_1_1_0(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '('*
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) '#' typeDeclaration=[TypeDeclaration|ID]
	 *     (rule start) (ambiguity) '#[' operands+=Expression
	 *     (rule start) (ambiguity) '+' operand=SignumExpression
	 *     (rule start) (ambiguity) '-' operand=SignumExpression
	 *     (rule start) (ambiguity) '<-' leftOperand=Expression
	 *     (rule start) (ambiguity) 'else' (rule start)
	 *     (rule start) (ambiguity) 'exists' '(' ')' ':' operand=UnaryLogicExpression
	 *     (rule start) (ambiguity) 'exists' '(' parameterDeclarations+=ParameterDeclaration
	 *     (rule start) (ambiguity) 'false' (rule start)
	 *     (rule start) (ambiguity) 'forall' '(' ')' ':' operand=UnaryLogicExpression
	 *     (rule start) (ambiguity) 'forall' '(' parameterDeclarations+=ParameterDeclaration
	 *     (rule start) (ambiguity) 'in-state' '(' region=[Region|ID]
	 *     (rule start) (ambiguity) 'true' (rule start)
	 *     (rule start) (ambiguity) ('not' | '!') operand=UnaryLogicExpression
	 *     (rule start) (ambiguity) declaration=[ValueDeclaration|ID]
	 *     (rule start) (ambiguity) expression=STRING
	 *     (rule start) (ambiguity) leftInclusive?='<+'
	 *     (rule start) (ambiguity) numerator=INTEGER
	 *     (rule start) (ambiguity) port=[Port|ID]
	 *     (rule start) (ambiguity) typeReference=TypeReference
	 *     (rule start) (ambiguity) value=DECIMAL
	 *     (rule start) (ambiguity) value=INTEGER
	 *     (rule start) (ambiguity) {AddExpression.operands+=}
	 *     (rule start) (ambiguity) {AndExpression.operands+=}
	 *     (rule start) (ambiguity) {ArrayAccessExpression.operand=}
	 *     (rule start) (ambiguity) {DivExpression.leftOperand=}
	 *     (rule start) (ambiguity) {DivideExpression.leftOperand=}
	 *     (rule start) (ambiguity) {EqualityExpression.leftOperand=}
	 *     (rule start) (ambiguity) {FunctionAccessExpression.operand=}
	 *     (rule start) (ambiguity) {GreaterEqualExpression.leftOperand=}
	 *     (rule start) (ambiguity) {GreaterExpression.leftOperand=}
	 *     (rule start) (ambiguity) {IfThenElseExpression.condition=}
	 *     (rule start) (ambiguity) {ImplyExpression.leftOperand=}
	 *     (rule start) (ambiguity) {InequalityExpression.leftOperand=}
	 *     (rule start) (ambiguity) {LessEqualExpression.leftOperand=}
	 *     (rule start) (ambiguity) {LessExpression.leftOperand=}
	 *     (rule start) (ambiguity) {ModExpression.leftOperand=}
	 *     (rule start) (ambiguity) {MultiplyExpression.operands+=}
	 *     (rule start) (ambiguity) {OrExpression.operands+=}
	 *     (rule start) (ambiguity) {RecordAccessExpression.operand=}
	 *     (rule start) (ambiguity) {SelectExpression.operand=}
	 *     (rule start) (ambiguity) {SubtractExpression.leftOperand=}
	 *     (rule start) (ambiguity) {XorExpression.operands+=}
	 */
	protected void emit_ExpressionLanguagePrimaryExpression_LeftParenthesisKeyword_2_0_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '('+
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) '+' operand=SignumExpression
	 *     (rule start) (ambiguity) '-' operand=SignumExpression
	 *     (rule start) (ambiguity) 'else' ')' (rule start)
	 *     (rule start) (ambiguity) 'exists' '(' ')' ':' operand=UnaryLogicExpression
	 *     (rule start) (ambiguity) 'exists' '(' parameterDeclarations+=ParameterDeclaration
	 *     (rule start) (ambiguity) 'forall' '(' ')' ':' operand=UnaryLogicExpression
	 *     (rule start) (ambiguity) 'forall' '(' parameterDeclarations+=ParameterDeclaration
	 *     (rule start) (ambiguity) 'in-state' '(' region=[Region|ID]
	 *     (rule start) (ambiguity) ('not' | '!') operand=UnaryLogicExpression
	 *     (rule start) (ambiguity) port=[Port|ID]
	 *     (rule start) (ambiguity) {AddExpression.operands+=}
	 *     (rule start) (ambiguity) {AndExpression.operands+=}
	 *     (rule start) (ambiguity) {ArrayAccessExpression.operand=}
	 *     (rule start) (ambiguity) {DivExpression.leftOperand=}
	 *     (rule start) (ambiguity) {DivideExpression.leftOperand=}
	 *     (rule start) (ambiguity) {EqualityExpression.leftOperand=}
	 *     (rule start) (ambiguity) {FunctionAccessExpression.operand=}
	 *     (rule start) (ambiguity) {GreaterEqualExpression.leftOperand=}
	 *     (rule start) (ambiguity) {GreaterExpression.leftOperand=}
	 *     (rule start) (ambiguity) {IfThenElseExpression.condition=}
	 *     (rule start) (ambiguity) {ImplyExpression.leftOperand=}
	 *     (rule start) (ambiguity) {InequalityExpression.leftOperand=}
	 *     (rule start) (ambiguity) {LessEqualExpression.leftOperand=}
	 *     (rule start) (ambiguity) {LessExpression.leftOperand=}
	 *     (rule start) (ambiguity) {ModExpression.leftOperand=}
	 *     (rule start) (ambiguity) {MultiplyExpression.operands+=}
	 *     (rule start) (ambiguity) {OrExpression.operands+=}
	 *     (rule start) (ambiguity) {RecordAccessExpression.operand=}
	 *     (rule start) (ambiguity) {SelectExpression.operand=}
	 *     (rule start) (ambiguity) {SubtractExpression.leftOperand=}
	 *     (rule start) (ambiguity) {XorExpression.operands+=}
	 */
	protected void emit_ExpressionLanguagePrimaryExpression_LeftParenthesisKeyword_2_0_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('(' ')')?
	 *
	 * This ambiguous syntax occurs at:
	 *     name=ID (ambiguity) '{' '}' (rule end)
	 *     name=ID (ambiguity) '{' basicConstraintDefinitions+=BasicConstraintDefinition
	 *     name=ID (ambiguity) '{' constantDeclarations+=ConstantDeclaration
	 *     name=ID (ambiguity) '{' functionDeclarations+=FunctionDeclaration
	 *     name=ID (ambiguity) '{' typeDeclarations+=TypeDeclaration
	 */
	protected void emit_ExpressionPackage___LeftParenthesisKeyword_2_0_RightParenthesisKeyword_2_2__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'GP' | ('Gauss' 'Process')
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) 'kernel' '=' kernel=Kernel
	 */
	protected void emit_FittedGaussianProcess_GPKeyword_0_0_or___GaussKeyword_0_1_0_ProcessKeyword_0_1_1__(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('(' ')')?
	 *
	 * This ambiguous syntax occurs at:
	 *     name=ID (ambiguity) ':' type=Type
	 */
	protected void emit_LambdaDeclaration___LeftParenthesisKeyword_2_0_RightParenthesisKeyword_2_2__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'not' | '!'
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) '('* (ambiguity) operand=UnaryLogicExpression
	 *     (rule start) '('+ (ambiguity) operand=UnaryLogicExpression
	 *     (rule start) (ambiguity) operand=UnaryLogicExpression
	 */
	protected void emit_NotExpression_ExclamationMarkKeyword_1_0_1_or_NotKeyword_1_0_0(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '('*
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) eventReference=EventReference
	 *     (rule start) (ambiguity) trigger=STRING
	 *     (rule start) (ambiguity) type=Not
	 *     (rule start) (ambiguity) {BinaryTrigger.leftOperand=}
	 */
	protected void emit_ParenthesesTrigger_LeftParenthesisKeyword_0_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '('+
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) eventReference=EventReference
	 *     (rule start) (ambiguity) trigger=STRING
	 *     (rule start) (ambiguity) type=Not
	 *     (rule start) (ambiguity) {BinaryTrigger.leftOperand=}
	 */
	protected void emit_ParenthesesTrigger_LeftParenthesisKeyword_0_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('(' ')')?
	 *
	 * This ambiguous syntax occurs at:
	 *     name=ID (ambiguity) ':' type=Type
	 */
	protected void emit_ProcedureDeclaration___LeftParenthesisKeyword_2_0_RightParenthesisKeyword_2_2__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('(' ')')?
	 *
	 * This ambiguous syntax occurs at:
	 *     name=ID (ambiguity) '{' 'in' analyzedComponent=EnvironmentCompositeComponentInstance
	 */
	protected void emit_RequirementComponent___LeftParenthesisKeyword_2_0_RightParenthesisKeyword_2_2__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('entry' '/')?
	 *
	 * This ambiguous syntax occurs at:
	 *     invariants+=Expression (ambiguity) 'exit' '/' exitActions+=Action
	 *     invariants+=Expression (ambiguity) ('exit' '/')? '}' (rule end)
	 *     invariants+=Expression (ambiguity) ('exit' '/')? regions+=Region
	 *     name=ID '{' (ambiguity) 'exit' '/' exitActions+=Action
	 *     name=ID '{' (ambiguity) ('exit' '/')? regions+=Region
	 */
	protected void emit_State___EntryKeyword_3_1_0_1_0_SolidusKeyword_3_1_0_1_1__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('exit' '/')?
	 *
	 * This ambiguous syntax occurs at:
	 *     entryActions+=Action (ambiguity) '}' (rule end)
	 *     entryActions+=Action (ambiguity) regions+=Region
	 *     invariants+=Expression ('entry' '/')? (ambiguity) '}' (rule end)
	 *     invariants+=Expression ('entry' '/')? (ambiguity) regions+=Region
	 *     name=ID '{' ('entry' '/')? (ambiguity) regions+=Region
	 */
	protected void emit_State___ExitKeyword_3_1_0_2_0_SolidusKeyword_3_1_0_2_1__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('{' ('entry' '/')? ('exit' '/')? '}')?
	 *
	 * This ambiguous syntax occurs at:
	 *     name=ID (ambiguity) (rule end)
	 */
	protected void emit_State___LeftCurlyBracketKeyword_3_0___EntryKeyword_3_1_0_1_0_SolidusKeyword_3_1_0_1_1__q___ExitKeyword_3_1_0_2_0_SolidusKeyword_3_1_0_2_1__q_RightCurlyBracketKeyword_3_2__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ','?
	 *
	 * This ambiguous syntax occurs at:
	 *     ports+=Port (ambiguity) ports+=Port
	 */
	protected void emit_StatechartDefinition_CommaKeyword_4_1_1_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('(' ')')?
	 *
	 * This ambiguous syntax occurs at:
	 *     name=ID (ambiguity) '[' ports+=Port
	 *     name=ID (ambiguity) ('[' ']')? '{' regions+=Region
	 *     name=ID (ambiguity) ('[' ']')? '{' timeoutDeclarations+=TimeoutDeclaration
	 *     name=ID (ambiguity) ('[' ']')? '{' transitions+=Transition
	 *     name=ID (ambiguity) ('[' ']')? '{' variableDeclarations+=VariableDeclaration
	 */
	protected void emit_StatechartDefinition___LeftParenthesisKeyword_3_0_RightParenthesisKeyword_3_2__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('[' ']')?
	 *
	 * This ambiguous syntax occurs at:
	 *     name=ID ('(' ')')? (ambiguity) '{' regions+=Region
	 *     name=ID ('(' ')')? (ambiguity) '{' timeoutDeclarations+=TimeoutDeclaration
	 *     name=ID ('(' ')')? (ambiguity) '{' transitions+=Transition
	 *     name=ID ('(' ')')? (ambiguity) '{' variableDeclarations+=VariableDeclaration
	 *     parameterDeclarations+=ParameterDeclaration ')' (ambiguity) '{' regions+=Region
	 *     parameterDeclarations+=ParameterDeclaration ')' (ambiguity) '{' timeoutDeclarations+=TimeoutDeclaration
	 *     parameterDeclarations+=ParameterDeclaration ')' (ambiguity) '{' transitions+=Transition
	 *     parameterDeclarations+=ParameterDeclaration ')' (ambiguity) '{' variableDeclarations+=VariableDeclaration
	 */
	protected void emit_StatechartDefinition___LeftSquareBracketKeyword_4_0_RightSquareBracketKeyword_4_2__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('(' ')')?
	 *
	 * This ambiguous syntax occurs at:
	 *     reference=[SynchronousComponent|ID] (ambiguity) (rule end)
	 */
	protected void emit_StatechartReference___LeftParenthesisKeyword_3_0_RightParenthesisKeyword_3_2__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ','?
	 *
	 * This ambiguous syntax occurs at:
	 *     ports+=Port (ambiguity) ports+=Port
	 */
	protected void emit_SynchronousCompositeComponent_CommaKeyword_3_1_1_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('(' ')')?
	 *
	 * This ambiguous syntax occurs at:
	 *     name=ID (ambiguity) '[' ports+=Port
	 *     name=ID (ambiguity) ('[' ']')? '{' '}' (rule end)
	 *     name=ID (ambiguity) ('[' ']')? '{' channels+=Channel
	 *     name=ID (ambiguity) ('[' ']')? '{' components+=SynchronousComponentInstance
	 *     name=ID (ambiguity) ('[' ']')? '{' portBindings+=PortBinding
	 */
	protected void emit_SynchronousCompositeComponent___LeftParenthesisKeyword_2_0_RightParenthesisKeyword_2_2__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('[' ']')?
	 *
	 * This ambiguous syntax occurs at:
	 *     name=ID ('(' ')')? (ambiguity) '{' '}' (rule end)
	 *     name=ID ('(' ')')? (ambiguity) '{' channels+=Channel
	 *     name=ID ('(' ')')? (ambiguity) '{' components+=SynchronousComponentInstance
	 *     name=ID ('(' ')')? (ambiguity) '{' portBindings+=PortBinding
	 *     parameterDeclarations+=ParameterDeclaration ')' (ambiguity) '{' '}' (rule end)
	 *     parameterDeclarations+=ParameterDeclaration ')' (ambiguity) '{' channels+=Channel
	 *     parameterDeclarations+=ParameterDeclaration ')' (ambiguity) '{' components+=SynchronousComponentInstance
	 *     parameterDeclarations+=ParameterDeclaration ')' (ambiguity) '{' portBindings+=PortBinding
	 */
	protected void emit_SynchronousCompositeComponent___LeftSquareBracketKeyword_3_0_RightSquareBracketKeyword_3_2__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '/'?
	 *
	 * This ambiguous syntax occurs at:
	 *     guard=Expression ']' (ambiguity) (rule end)
	 *     targetState=[StateNode|ID] (ambiguity) (rule end)
	 *     trigger=Trigger (ambiguity) (rule end)
	 */
	protected void emit_Transition_SolidusKeyword_7_2_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'Weibull' | 'weibull'
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) 'scale' '=' scale=DOUBLE
	 */
	protected void emit_WeibullRandomVariable_WeibullKeyword_0_0_or_WeibullKeyword_0_1(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}

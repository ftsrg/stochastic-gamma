/*
 * generated by Xtext 2.23.0.M1
 */
package hu.bme.mit.gamma.fmeda.language.serializer;

import com.google.inject.Inject;
import hu.bme.mit.gamma.fmeda.language.services.FMEDALanguageGrammarAccess;
import hu.bme.mit.gamma.fmeda.model.Channel;
import hu.bme.mit.gamma.fmeda.model.DiagnosticsReference;
import hu.bme.mit.gamma.fmeda.model.FMEDAComponent;
import hu.bme.mit.gamma.fmeda.model.FMEDAComponentInstance;
import hu.bme.mit.gamma.fmeda.model.FMEDADiagnostics;
import hu.bme.mit.gamma.fmeda.model.FailureMode;
import hu.bme.mit.gamma.fmeda.model.FailurePropagation;
import hu.bme.mit.gamma.fmeda.model.HardwarePartFailureModeReference;
import hu.bme.mit.gamma.fmeda.model.HardwarePartPortReference;
import hu.bme.mit.gamma.fmeda.model.Interface;
import hu.bme.mit.gamma.fmeda.model.PartFailureMode;
import hu.bme.mit.gamma.fmeda.model.Port;
import hu.bme.mit.gamma.fmeda.model.PortFailureModeReference;
import hu.bme.mit.gamma.fmeda.model.ThisPartFailureModeReference;
import hu.bme.mit.gamma.fmeda.model.ThisPortFailureModeReference;
import hu.bme.mit.gamma.fmeda.model.ThisPortReference;
import hu.bme.mit.gamma.fmeda.model.fmedaPackage;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class FMEDALanguageSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private FMEDALanguageGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == fmedaPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case fmedaPackage.CHANNEL:
				sequence_Channel(context, (Channel) semanticObject); 
				return; 
			case fmedaPackage.DIAGNOSTICS_REFERENCE:
				sequence_DiagnosticsReference(context, (DiagnosticsReference) semanticObject); 
				return; 
			case fmedaPackage.FMEDA_COMPONENT:
				sequence_FMEDAComponentDef(context, (FMEDAComponent) semanticObject); 
				return; 
			case fmedaPackage.FMEDA_COMPONENT_INSTANCE:
				sequence_FMEDAComponentInstance(context, (FMEDAComponentInstance) semanticObject); 
				return; 
			case fmedaPackage.FMEDA_DIAGNOSTICS:
				sequence_FMEDADiagnostics(context, (FMEDADiagnostics) semanticObject); 
				return; 
			case fmedaPackage.FAILURE_MODE:
				sequence_FailureModeDef(context, (FailureMode) semanticObject); 
				return; 
			case fmedaPackage.FAILURE_PROPAGATION:
				sequence_FailurePropagationDef(context, (FailurePropagation) semanticObject); 
				return; 
			case fmedaPackage.HARDWARE_PART_FAILURE_MODE_REFERENCE:
				sequence_HardwarePartFailureModeReferenceDef(context, (HardwarePartFailureModeReference) semanticObject); 
				return; 
			case fmedaPackage.HARDWARE_PART_PORT_REFERENCE:
				sequence_HardwarePartPortReference(context, (HardwarePartPortReference) semanticObject); 
				return; 
			case fmedaPackage.INTERFACE:
				sequence_InterfaceDef(context, (Interface) semanticObject); 
				return; 
			case fmedaPackage.PACKAGE:
				sequence_PackageDef(context, (hu.bme.mit.gamma.fmeda.model.Package) semanticObject); 
				return; 
			case fmedaPackage.PART_FAILURE_MODE:
				sequence_PartFailureModeDef(context, (PartFailureMode) semanticObject); 
				return; 
			case fmedaPackage.PORT:
				sequence_Port(context, (Port) semanticObject); 
				return; 
			case fmedaPackage.PORT_FAILURE_MODE_REFERENCE:
				sequence_PortFailureModeReference(context, (PortFailureModeReference) semanticObject); 
				return; 
			case fmedaPackage.THIS_PART_FAILURE_MODE_REFERENCE:
				sequence_ThisPartFailureModeReference(context, (ThisPartFailureModeReference) semanticObject); 
				return; 
			case fmedaPackage.THIS_PORT_FAILURE_MODE_REFERENCE:
				sequence_ThisPortFailureModeReference(context, (ThisPortFailureModeReference) semanticObject); 
				return; 
			case fmedaPackage.THIS_PORT_REFERENCE:
				sequence_ThisPortReference(context, (ThisPortReference) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Channel returns Channel
	 *
	 * Constraint:
	 *     (from=ChannelInterfaceReference to+=ChannelInterfaceReference* to+=ChannelInterfaceReference)
	 */
	protected void sequence_Channel(ISerializationContext context, Channel semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     DiagnosticsReference returns DiagnosticsReference
	 *
	 * Constraint:
	 *     (fmedadiagnostics+=[FMEDADiagnostics|ID]* fmedadiagnostics+=[FMEDADiagnostics|ID] coverage=DOUBLE)
	 */
	protected void sequence_DiagnosticsReference(ISerializationContext context, DiagnosticsReference semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     FMEDAComponentDef returns FMEDAComponent
	 *
	 * Constraint:
	 *     (
	 *         name=ID 
	 *         ports+=Port* 
	 *         (
	 *             failuremodes+=FailureModeDef | 
	 *             failuremodes+=PartFailureModeDef | 
	 *             subcomponents+=FMEDAComponentInstance | 
	 *             failurepropagations+=FailurePropagationDef | 
	 *             channels+=Channel
	 *         )*
	 *     )
	 */
	protected void sequence_FMEDAComponentDef(ISerializationContext context, FMEDAComponent semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     FMEDAComponentInstance returns FMEDAComponentInstance
	 *
	 * Constraint:
	 *     (name=ID type=[FMEDAComponent|ID])
	 */
	protected void sequence_FMEDAComponentInstance(ISerializationContext context, FMEDAComponentInstance semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, fmedaPackage.Literals.NAMED_ELEMENT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, fmedaPackage.Literals.NAMED_ELEMENT__NAME));
			if (transientValues.isValueTransient(semanticObject, fmedaPackage.Literals.FMEDA_COMPONENT_INSTANCE__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, fmedaPackage.Literals.FMEDA_COMPONENT_INSTANCE__TYPE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getFMEDAComponentInstanceAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getFMEDAComponentInstanceAccess().getTypeFMEDAComponentIDTerminalRuleCall_3_0_1(), semanticObject.eGet(fmedaPackage.Literals.FMEDA_COMPONENT_INSTANCE__TYPE, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     FMEDADiagnostics returns FMEDADiagnostics
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_FMEDADiagnostics(ISerializationContext context, FMEDADiagnostics semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, fmedaPackage.Literals.NAMED_ELEMENT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, fmedaPackage.Literals.NAMED_ELEMENT__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getFMEDADiagnosticsAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     FailureModeDef returns FailureMode
	 *
	 * Constraint:
	 *     (name=ID diagnostics=DiagnosticsReference?)
	 */
	protected void sequence_FailureModeDef(ISerializationContext context, FailureMode semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     FailurePropagationDef returns FailurePropagation
	 *
	 * Constraint:
	 *     (cause=FailureModeReference effect+=FailureModeReference* effect+=FailureModeReference)
	 */
	protected void sequence_FailurePropagationDef(ISerializationContext context, FailurePropagation semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     FailureModeReference returns HardwarePartFailureModeReference
	 *     HardwarePartFailureModeReferenceDef returns HardwarePartFailureModeReference
	 *
	 * Constraint:
	 *     (part=[FMEDAComponentInstance|ID] failuremode=[FailureMode|ID])
	 */
	protected void sequence_HardwarePartFailureModeReferenceDef(ISerializationContext context, HardwarePartFailureModeReference semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, fmedaPackage.Literals.COMPONENT_REFERENCE__PART) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, fmedaPackage.Literals.COMPONENT_REFERENCE__PART));
			if (transientValues.isValueTransient(semanticObject, fmedaPackage.Literals.FAILURE_MODE_REFERENCE__FAILUREMODE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, fmedaPackage.Literals.FAILURE_MODE_REFERENCE__FAILUREMODE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getHardwarePartFailureModeReferenceDefAccess().getPartFMEDAComponentInstanceIDTerminalRuleCall_1_0_1(), semanticObject.eGet(fmedaPackage.Literals.COMPONENT_REFERENCE__PART, false));
		feeder.accept(grammarAccess.getHardwarePartFailureModeReferenceDefAccess().getFailuremodeFailureModeIDTerminalRuleCall_3_0_1(), semanticObject.eGet(fmedaPackage.Literals.FAILURE_MODE_REFERENCE__FAILUREMODE, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ChannelInterfaceReference returns HardwarePartPortReference
	 *     HardwarePartPortReference returns HardwarePartPortReference
	 *
	 * Constraint:
	 *     (part=[FMEDAComponentInstance|ID] port=[Port|ID])
	 */
	protected void sequence_HardwarePartPortReference(ISerializationContext context, HardwarePartPortReference semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, fmedaPackage.Literals.COMPONENT_REFERENCE__PART) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, fmedaPackage.Literals.COMPONENT_REFERENCE__PART));
			if (transientValues.isValueTransient(semanticObject, fmedaPackage.Literals.PORT_REFERENCE__PORT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, fmedaPackage.Literals.PORT_REFERENCE__PORT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getHardwarePartPortReferenceAccess().getPartFMEDAComponentInstanceIDTerminalRuleCall_1_0_1(), semanticObject.eGet(fmedaPackage.Literals.COMPONENT_REFERENCE__PART, false));
		feeder.accept(grammarAccess.getHardwarePartPortReferenceAccess().getPortPortIDTerminalRuleCall_3_0_1(), semanticObject.eGet(fmedaPackage.Literals.PORT_REFERENCE__PORT, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     InterfaceDef returns Interface
	 *
	 * Constraint:
	 *     (name=ID failuremodes+=FailureModeDef+)
	 */
	protected void sequence_InterfaceDef(ISerializationContext context, Interface semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     PackageDef returns Package
	 *
	 * Constraint:
	 *     (name=ID (components+=FMEDAComponentDef | diagnostics+=FMEDADiagnostics | interfaces+=InterfaceDef)*)
	 */
	protected void sequence_PackageDef(ISerializationContext context, hu.bme.mit.gamma.fmeda.model.Package semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     PartFailureModeDef returns PartFailureMode
	 *
	 * Constraint:
	 *     (name=ID diagnostics=DiagnosticsReference? failureRate=DOUBLE)
	 */
	protected void sequence_PartFailureModeDef(ISerializationContext context, PartFailureMode semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     FailureModeReference returns PortFailureModeReference
	 *     PortFailureModeReference returns PortFailureModeReference
	 *
	 * Constraint:
	 *     (part=[FMEDAComponentInstance|ID] port=[Port|ID] failuremode=[FailureMode|ID])
	 */
	protected void sequence_PortFailureModeReference(ISerializationContext context, PortFailureModeReference semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, fmedaPackage.Literals.COMPONENT_REFERENCE__PART) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, fmedaPackage.Literals.COMPONENT_REFERENCE__PART));
			if (transientValues.isValueTransient(semanticObject, fmedaPackage.Literals.PORT_REFERENCE__PORT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, fmedaPackage.Literals.PORT_REFERENCE__PORT));
			if (transientValues.isValueTransient(semanticObject, fmedaPackage.Literals.FAILURE_MODE_REFERENCE__FAILUREMODE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, fmedaPackage.Literals.FAILURE_MODE_REFERENCE__FAILUREMODE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPortFailureModeReferenceAccess().getPartFMEDAComponentInstanceIDTerminalRuleCall_1_0_1(), semanticObject.eGet(fmedaPackage.Literals.COMPONENT_REFERENCE__PART, false));
		feeder.accept(grammarAccess.getPortFailureModeReferenceAccess().getPortPortIDTerminalRuleCall_3_0_1(), semanticObject.eGet(fmedaPackage.Literals.PORT_REFERENCE__PORT, false));
		feeder.accept(grammarAccess.getPortFailureModeReferenceAccess().getFailuremodeFailureModeIDTerminalRuleCall_5_0_1(), semanticObject.eGet(fmedaPackage.Literals.FAILURE_MODE_REFERENCE__FAILUREMODE, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Port returns Port
	 *
	 * Constraint:
	 *     (name=ID type=[Interface|ID])
	 */
	protected void sequence_Port(ISerializationContext context, Port semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, fmedaPackage.Literals.NAMED_ELEMENT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, fmedaPackage.Literals.NAMED_ELEMENT__NAME));
			if (transientValues.isValueTransient(semanticObject, fmedaPackage.Literals.PORT__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, fmedaPackage.Literals.PORT__TYPE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPortAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getPortAccess().getTypeInterfaceIDTerminalRuleCall_3_0_1(), semanticObject.eGet(fmedaPackage.Literals.PORT__TYPE, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     FailureModeReference returns ThisPartFailureModeReference
	 *     ThisPartFailureModeReference returns ThisPartFailureModeReference
	 *
	 * Constraint:
	 *     failuremode=[FailureMode|ID]
	 */
	protected void sequence_ThisPartFailureModeReference(ISerializationContext context, ThisPartFailureModeReference semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, fmedaPackage.Literals.FAILURE_MODE_REFERENCE__FAILUREMODE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, fmedaPackage.Literals.FAILURE_MODE_REFERENCE__FAILUREMODE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getThisPartFailureModeReferenceAccess().getFailuremodeFailureModeIDTerminalRuleCall_3_0_1(), semanticObject.eGet(fmedaPackage.Literals.FAILURE_MODE_REFERENCE__FAILUREMODE, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     FailureModeReference returns ThisPortFailureModeReference
	 *     ThisPortFailureModeReference returns ThisPortFailureModeReference
	 *
	 * Constraint:
	 *     (port=[Port|ID] failuremode=[FailureMode|ID])
	 */
	protected void sequence_ThisPortFailureModeReference(ISerializationContext context, ThisPortFailureModeReference semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, fmedaPackage.Literals.PORT_REFERENCE__PORT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, fmedaPackage.Literals.PORT_REFERENCE__PORT));
			if (transientValues.isValueTransient(semanticObject, fmedaPackage.Literals.FAILURE_MODE_REFERENCE__FAILUREMODE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, fmedaPackage.Literals.FAILURE_MODE_REFERENCE__FAILUREMODE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getThisPortFailureModeReferenceAccess().getPortPortIDTerminalRuleCall_3_0_1(), semanticObject.eGet(fmedaPackage.Literals.PORT_REFERENCE__PORT, false));
		feeder.accept(grammarAccess.getThisPortFailureModeReferenceAccess().getFailuremodeFailureModeIDTerminalRuleCall_5_0_1(), semanticObject.eGet(fmedaPackage.Literals.FAILURE_MODE_REFERENCE__FAILUREMODE, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ChannelInterfaceReference returns ThisPortReference
	 *     ThisPortReference returns ThisPortReference
	 *
	 * Constraint:
	 *     port=[Port|ID]
	 */
	protected void sequence_ThisPortReference(ISerializationContext context, ThisPortReference semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, fmedaPackage.Literals.PORT_REFERENCE__PORT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, fmedaPackage.Literals.PORT_REFERENCE__PORT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getThisPortReferenceAccess().getPortPortIDTerminalRuleCall_3_0_1(), semanticObject.eGet(fmedaPackage.Literals.PORT_REFERENCE__PORT, false));
		feeder.finish();
	}
	
	
}

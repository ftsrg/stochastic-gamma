/*
 * generated by Xtext 2.23.0.M1
 */
package hu.bme.mit.gamma.fmeda.language.scoping;

import java.awt.Component;
import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.xtext.scoping.IScope;
import org.eclipse.xtext.scoping.Scopes;

import hu.bme.mit.gamma.fmeda.model.ComponentReference;
import hu.bme.mit.gamma.fmeda.model.DiagnosticsReference;
import hu.bme.mit.gamma.fmeda.model.FMEDAComponent;
import hu.bme.mit.gamma.fmeda.model.FMEDAComponentInstance;
import hu.bme.mit.gamma.fmeda.model.FMEDADiagnostics;
import hu.bme.mit.gamma.fmeda.model.FailureMode;
import hu.bme.mit.gamma.fmeda.model.HardwarePartFailureModeReference;
import hu.bme.mit.gamma.fmeda.model.HardwarePartPortReference;
import hu.bme.mit.gamma.fmeda.model.Port;
import hu.bme.mit.gamma.fmeda.model.PortFailureModeReference;
import hu.bme.mit.gamma.fmeda.model.PortReference;
import hu.bme.mit.gamma.fmeda.model.ThisPartFailureModeReference;
import hu.bme.mit.gamma.fmeda.model.ThisPortFailureModeReference;
import hu.bme.mit.gamma.fmeda.model.ThisPortReference;
import hu.bme.mit.gamma.fmeda.model.fmedaPackage;

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
public class FMEDALanguageScopeProvider extends AbstractFMEDALanguageScopeProvider {
	
	public IScope getScope(EObject context, EReference reference) {
		// Setting scope for the types of the subcomponents
		if (context instanceof FMEDAComponentInstance) {
			hu.bme.mit.gamma.fmeda.model.Package fp = (hu.bme.mit.gamma.fmeda.model.Package) context.eContainer().eContainer();
			
			if(reference == fmedaPackage.Literals.FMEDA_COMPONENT_INSTANCE__TYPE) {
				Collection<FMEDAComponent> referrableEntities = new ArrayList<FMEDAComponent>(fp.getComponents());
				return Scopes.scopeFor(referrableEntities);
			}
			
		}
		

		if(context instanceof Port && reference == fmedaPackage.Literals.PORT__TYPE) {
			hu.bme.mit.gamma.fmeda.model.Package fp = (hu.bme.mit.gamma.fmeda.model.Package) context.eContainer().eContainer();
			return Scopes.scopeFor(fp.getInterfaces());
		}

		if(context instanceof HardwarePartFailureModeReference) {
			FMEDAComponent supercomp = (FMEDAComponent) context.eContainer().eContainer();
			
			Collection<FMEDAComponentInstance> subcomponents = new ArrayList<FMEDAComponentInstance>(supercomp.getSubcomponents());
			

		
			
			// Setting scope for the component instances for the failure propagation
			if (reference == fmedaPackage.Literals.COMPONENT_REFERENCE__PART) {
				return Scopes.scopeFor(subcomponents);
			}
			
			// Setting scope for the failure modes for the failure propagation
			if (reference == fmedaPackage.Literals.FAILURE_MODE_REFERENCE__FAILUREMODE) {
				/*Collection<FailureMode> referrableEntities = new ArrayList<FailureMode>();
				for (FMEDAComponentInstance comp:subcomponents) {
					referrableEntities.addAll(comp.getType().getFailuremodes());
				}
				return Scopes.scopeFor(referrableEntities);*/
				ComponentReference compref=(ComponentReference) context;
				return Scopes.scopeFor(compref.getPart().getType().getFailuremodes());				
			}
			
		}
		
		if(context instanceof PortFailureModeReference) {
			FMEDAComponent supercomp = (FMEDAComponent) context.eContainer().eContainer();
			
			Collection<FMEDAComponentInstance> subcomponents = new ArrayList<FMEDAComponentInstance>(supercomp.getSubcomponents());
			

		
			
			// Setting scope for the component instances for the failure propagation
			if (reference == fmedaPackage.Literals.COMPONENT_REFERENCE__PART) {
				return Scopes.scopeFor(subcomponents);
			}
			
			if(reference == fmedaPackage.Literals.PORT_REFERENCE__PORT) {
				ComponentReference compref=(ComponentReference) context;
				return Scopes.scopeFor(compref.getPart().getType().getPorts());
			}
			
			// Setting scope for the failure modes for the failure propagation
			if (reference == fmedaPackage.Literals.FAILURE_MODE_REFERENCE__FAILUREMODE) {
				PortReference ifref=(PortReference) context;
				return Scopes.scopeFor(ifref.getPort().getType().getFailuremodes());
			}
			
		}
		
		

		if (context instanceof ThisPartFailureModeReference && reference == fmedaPackage.Literals.FAILURE_MODE_REFERENCE__FAILUREMODE) {

			FMEDAComponent supercomp = (FMEDAComponent) context.eContainer().eContainer();
			Collection<FailureMode> referrableEntities = new ArrayList<FailureMode>(supercomp.getFailuremodes());
			return Scopes.scopeFor(referrableEntities);
		}
		

		if (context instanceof ThisPortFailureModeReference) {
			
			FMEDAComponent supercomp = (FMEDAComponent) context.eContainer().eContainer();
			

			if(reference == fmedaPackage.Literals.PORT_REFERENCE__PORT) {
				return Scopes.scopeFor(supercomp.getPorts());
			}
			

			if (reference == fmedaPackage.Literals.FAILURE_MODE_REFERENCE__FAILUREMODE) {
				PortReference ifref=(PortReference) context;
				return Scopes.scopeFor(ifref.getPort().getType().getFailuremodes());
			}
			
		}

		
		if(context instanceof HardwarePartPortReference && reference == fmedaPackage.Literals.PORT_REFERENCE__PORT) {
			ComponentReference compref=(ComponentReference) context;
			return Scopes.scopeFor(compref.getPart().getType().getPorts());
		}

		
		if(context instanceof ThisPortReference && reference == fmedaPackage.Literals.PORT_REFERENCE__PORT) {
			FMEDAComponent supercomp = (FMEDAComponent) context.eContainer().eContainer();
			return Scopes.scopeFor(supercomp.getPorts());
		}
		
		
		if (context instanceof DiagnosticsReference && reference == fmedaPackage.Literals.DIAGNOSTICS_REFERENCE__FMEDADIAGNOSTICS) {
			hu.bme.mit.gamma.fmeda.model.Package fp = (hu.bme.mit.gamma.fmeda.model.Package) context.eContainer().eContainer().eContainer();
			Collection<FMEDADiagnostics> referrableEntities = new ArrayList<FMEDADiagnostics>(fp.getDiagnostics());
			return Scopes.scopeFor(referrableEntities);
		}
		
		
		return super.getScope(context, reference);
	}

}

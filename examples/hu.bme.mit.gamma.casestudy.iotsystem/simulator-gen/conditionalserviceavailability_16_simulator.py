# automatically generated probabilistic program
# generated by Gamma Composition Framework
# time of model generation: 2024-05-10T21:24:36.542065900

import pyro
import torch
import pyro.distributions as dist
import pyro.contrib.gp as gp
from pyro.distributions.torch_distribution import TorchDistribution
from pyro.distributions.util import broadcast_shape
import numpy as np

import math
from math import exp
import statistics as stats

import matplotlib.pyplot as plt
import matplotlib

# import datetime
# from influxdb import InfluxDBClient


import time
import os
import traceback
from jpype import JImplements, JOverride
from jpype import *
import jpype
import hashlib



# manually build the java code
BUILD=False
# synchronization of elementary stochastic components in synchronous composition
IESC_SYNC=False

# conversion between the time unit of elementary stochastic components and millisecond
time_conv=1.0 # 1000000000.0*60*60*1000

simTime=1.0
simNumber=10000

def visualizeMarginal(inference, marginal, name):
	sample_num=10000
	bin_num=100
	marginal_samples = torch.stack([torch.abs(marginal()) for _ in range(sample_num)])
	fig, a = plt.subplots()
	a.set_title( "Empirical marginal "+name+" (ESS:"+str(round(inference.get_ESS().item(),2))+", avg:"+str(round(marginal.mean.item(),2))+", stddev:"+str(round(marginal.variance.sqrt().item(),2))+")" )
	a.hist(marginal_samples.numpy(), color='b',bins=bin_num, density=1, label="Marginal of "+name)
	a.set_ylabel("Estimated density")
	a.set_xlabel("Value of "+name)

print('initiating Python-Java connection')

def create_detmodel():
	if BUILD:
		commands = ["""javac $(find C:\\Users\\simon\\Projects\\stochastic-gamma\\runtime-hu.bme.mit.gamma.environment.rcp.product -name "*.java")"""]
		for command in commands:
			if os.system(command) == 0:
				continue
			else:
				print( "ERROR")
				break
	startJVM("""C:\\Program Files\\Java\\jdk-20\\bin\\server\\jvm.dll""", '-ea',"""-Djava.class.path=C:\\Users\\simon\\git\\stochastic-gamma\\examples\\hu.bme.mit.gamma.casestudy.iotsystem\\bin""")
	detmodel = 0
	EntryPoint = JClass('javaenv.ConditionalServiceAvailability_16EntryPoint')
	detmodel = EntryPoint()
	print('Python-Java connection established')
	return detmodel

detmodel=create_detmodel()



# python classes of random variables and distributions
class Dataset():

	def __init__(self,dbname,ip,port,query=None,script=None):
		if query is not None:
			client = InfluxDBClient(ip, int(port), database=dbname)
			result = client.query(query)
			points = result.get_points()
			self.points=points
		elif script is not None:
			exec(script)


# stochastic model classes

class DiscreteRandomVariable():
	def __init__(self,dist,name):
		self.dist=dist
		self.name=name
		self.event_cntr=0
	def calc(self,event=0,time=0):
		self.event_cntr=self.event_cntr+1
		return pyro.sample(self.name+"_sample_"+str(self.event_cntr),self.dist).item()-1.0

class JointDistribution(TorchDistribution):

    arg_constraints = {}  # nothing can be constrained

    def __init__(self, dists, validate_args=None):
        for dist in dists:
            if dist.event_shape != dists[0].event_shape:
                raise ValueError("components event_shape disagree: {} vs {}".format(
                    dist.event_shape, dists[0].event_shape))
        batch_shape = broadcast_shape(dists)
        self.dists = dists
        self.dnum = len(dists)
        super().__init__(batch_shape, dists[0].event_shape, validate_args)

    @property
    def has_rsample(self):
        return True

    def expand(self, batch_shape):
        new_dists=[]
        for dist in self.dists:
            new_dists.append(dist.expand(batch_shape))
        return JointDistribution(new_dists)

    def sample(self, sample_shape=torch.Size()):
        samples=[]
        for dist in self.dists:
            samples.append(dist.sample(sample_shape))
        return torch.stack(samples)

    def rsample(self, sample_shape=torch.Size()):
        samples=[]
        for dist in self.dists:
            samples.append(dist.sample(sample_shape))
        return torch.stack(samples)

    def log_prob(self, value):
        log_prob=torch.tensor(0.0)
        for i in range(len(self.dists)):
            log_prob=log_prob+self.dists[i].log_prob(value[i]).sum()
        return log_prob

    def mean(self):
        means=[]
        for dist in self.dists:
            means.append(dist.mean)
        return torch.stack(means)

    def variance(self):
        variances=[]
        for dist in self.dists:
            variances.append(dist.variance)
        return torch.stack(variances)


class RandomVariable():

    plate=pyro.plate("random_variable")
    dists=[]
    samples=[]
    dist=None
    insts=[]

    def ginit():
        RandomVariable.dist=JointDistribution(RandomVariable.dists)

    def greset():
        RandomVariable.cntr=-1
        RandomVariable.gsample()

    def gsample():
        RandomVariable.cntr=RandomVariable.cntr+1
        RandomVariable.samples=pyro.sample("samples_"+str(RandomVariable.cntr),RandomVariable.dist)
        for dist in RandomVariable.insts:
            dist.event_cntr=-1

    def __init__(self,dist,name,N=40):
        self.dist=dist
        self.name=name
        self.event_cntr=-1
        self.N=N
        self.i=len(RandomVariable.dists)
        RandomVariable.dists.append(dist.expand([N]))
        RandomVariable.insts.append(self)
    
    def calc(self,event=0,time=0):
        self.event_cntr=self.event_cntr+1
        if self.event_cntr==self.N:
            RandomVariable.gsample()
        return RandomVariable.samples[self.i][int(self.event_cntr)].item()


# environment component classes


class Event():
	def __init__(self,eventSource,eventTime,eventCall,name="anonymous"):
		self.eventSource=eventSource
		self.eventTime=eventTime
		self.eventCall=eventCall
		self.name=name


class PeriodicEventSource():
	def configure(self,name,calls,rules,portevents,simulator):
		self.name=name
		self.calls=calls
		self.rules=rules
		self.portevents=portevents
		self.simulator=simulator
		ports=list(self.calls.keys())
		#iterating through ports
		for port in ports:
			pevents=self.portevents[port]
			#iterating through events
			for pevent in pevents:
				if pevent in self.rules[port] and pevent in self.calls[port]:
					rule=self.rules[port][pevent]
					self.simulator.dists.append(rule)

	def generateEvents(self):
		ports=list(self.calls.keys())
		#iterating through self.ports
		for port in ports:
			pevents=self.portevents[port]
			#iterating through events
			for pevent in pevents:
				if pevent in self.rules[port] and pevent in self.calls[port]:
					calls=self.calls[port][pevent]
					rule=self.rules[port][pevent]
					simulationtime=0.0
					ename=port+"."+pevent
					while simulationtime < simTime:
						simulationtime=simulationtime+rule.calc(port+"."+pevent,simulationtime)
						#iterating through port connections
						for call in calls:
							self.simulator.events.append(Event(self,simulationtime,call,ename))




class EventSource():
	def configure(self,name,calls,rules,portevents,simulator):
		self.name=name
		self.calls=calls
		self.rules=rules
		self.portevents=portevents
		self.simulator=simulator
		ports=list(self.calls.keys())
		
		#iterating through ports
		for port in ports:
			pevents=self.portevents[port]
			#iterating through events
			for pevent in pevents:
				if pevent in self.rules[port]:
					rule=self.rules[port][pevent]
					self.simulator.dists.append(rule)

	def generateEvents(self):
		ports=list(self.calls.keys())
		#iterating through ports
		for port in ports:
			pevents=self.portevents[port]
			#iterating through events
			for pevent in pevents:
				if pevent in self.rules[port] and pevent in self.calls[port]:
					rule=self.rules[port][pevent]
					calls=self.calls[port][pevent]
					time=rule.calc(port+"."+pevent,0.0)
					ename=port+"."+pevent
					if time>=0:
						#iterating through port connections
						for call in calls:
							self.simulator.events.append(Event(self,time,call,ename))


if133 = JClass('hu.bme.mit.gamma.casestudy.iotsystem.interfaces.EventStreamInterface$Listener$Provided')
if133_s = JClass('hu.bme.mit.gamma.casestudy.iotsystem.scheduling.ElementaryComponentSchedulingInterface')

@JImplements([if133,if133_s])
class DelayEventStream():
	def configure(self,name,inport,calls,rules,simulator):
		self.name=name
		callitem=list(calls.items())[0]#only one out port
		self.calls=callitem[1]
		self.port=callitem[0]
		self.rules=list(rules.items())[0][1]#only one out port
		self.event_cntr=0
		self.inport=inport
		if inport is not None:
			inport.registerListener(self)
		self.simulator=simulator
		#iterating through ports
		for port in list(rules.keys()):
			pevents=list(rules[port].keys())
			#iterating through events
			for pevent in pevents:
				rule=rules[port][pevent]
				simulator.dists.append(rule)


	def generateEvents(self):
		pass

	@JOverride
	def schedule(self):
		pass

	@JOverride
	def isEventQueueEmpty(self):
		return True

	#definition of the interface functions
	
	@JOverride
	def raiseNewEvent(self,):
		time=self.rules["NewEvent"].calc(self.port+"."+"NewEvent",self.simulator.time)
		self.event_cntr=self.event_cntr+1
		failureTime=abs(time)+self.simulator.time
		for callitem in self.calls:
			callEvent=lambda:callitem.raiseNewEvent();
			self.simulator.events.append(Event(self,failureTime,callEvent,self.port+".NewEvent"))
##	class Java:
#		implements = ["hu.bme.mit.gamma.casestudy.iotsystem.interfaces.EventStreamInterface$Listener$Provided"]


if134 = JClass('hu.bme.mit.gamma.casestudy.iotsystem.interfaces.DataStreamInterface$Listener$Provided')
if134_s = JClass('hu.bme.mit.gamma.casestudy.iotsystem.scheduling.ElementaryComponentSchedulingInterface')

@JImplements([if134,if134_s])
class SwitchDataStream():

	def configure(self,name,inport,calls,portarray,categorical,simulator,compCall,shname):
		self.name=name
		self.calls=calls
		self.categorical=categorical
		self.portarray=portarray
		self.event_cntr=0
		self.events=[]
		self.inport=inport
		if inport is not None:
			inport.registerListener(self)
		compCall.registerEnvironmentComponent(shname,self)
		self.simulator=simulator
		self.simulator.dists.append(categorical)

	def generateEvents(self):
		pass



	@JOverride
	def schedule(self):
		for event in self.events:
			event.callEvent()
		self.events.clear()

	@JOverride
	def isEventQueueEmpty(self):
		return (len(self.events)==0)
	
	
	#definition of the interface functions

	@JOverride
	def raiseNewData(self,blurred, car):
		port=self.portarray[int(self.categorical.calc())]
		eventcalls=self.calls[port]#["NewData"]
		self.event_cntr=self.event_cntr+1
		for call in eventcalls:
			if call is not None:
				if IESC_SYNC:
					callEvent=lambda:call.raiseNewData(blurred, car);
					self.events.append(Event(self,self.simulator.time,callEvent,self.port+".NewData"))
				else:
					call.raiseNewData(blurred, car)
##	class Java:
#		implements = ["hu.bme.mit.gamma.casestudy.iotsystem.interfaces.DataStreamInterface$Listener$Provided"]

if135 = JClass('hu.bme.mit.gamma.casestudy.iotsystem.interfaces.DataStreamInterface$Listener$Provided')
if135_s = JClass('hu.bme.mit.gamma.casestudy.iotsystem.scheduling.ElementaryComponentSchedulingInterface')

@JImplements([if135,if135_s])
class SampleImageBlur():
	def configure(self,name,inport,calls,rules,simulator,compCall,shname):
		self.name=name
		callitem=list(calls.items())[0]#only one out port
		self.calls=callitem[1]
		self.port=callitem[0]
		self.rules=list(rules.items())[0][1]#only one out port
		self.event_cntr=0
		self.inport=inport
		if inport is not None:
			inport.registerListener(self)
		self.events=[]
		compCall.registerEnvironmentComponent(shname,self)
		self.simulator=simulator
		#iterating through ports
		for port in rules.keys():
			pevents=rules[port].keys()
			#iterating through events
			for pevent in pevents:
				if pevent in rules[port].keys():
					params=rules[port][pevent].keys()
					for param in params:
						rule=rules[port][pevent][param]
						simulator.dists.append(rule)



	def generateEvents(self):
		self.events.clear()
		pass
		#definition of the interface functions

	@JOverride
	def isEventQueueEmpty(self):
		return (len(self.events)==0)

	@JOverride
	def schedule(self):
		for event in self.events:
			event.callEvent()
		self.events.clear(self.name)


	@JOverride
	def raiseNewData(self,blurred, car):
		if "blurred" in self.rules["NewData"].keys():
			blurred = self.rules["NewData"]["blurred"].calc(self.port+"."+"NewData::blurred",self.simulator.time)
		if "car" in self.rules["NewData"].keys():
			car = self.rules["NewData"]["car"].calc(self.port+"."+"NewData::car",self.simulator.time)
		
		#blurred=self.rules["NewData"].calc(self.port+"."+"NewData",self.simulator.time)
		#hu.bme.mit.gamma.expression.model.impl.DecimalTypeDefinitionImpl@5ff4de1
		self.event_cntr=self.event_cntr+1
		for call in self.calls:
			if IESC_SYNC:
				callEvent=lambda:call.raiseNewData(blurred, car);
				self.events.append(Event(self,self.simulator.time,callEvent,self.port+".NewData"))
			else:
				call.raiseNewData(blurred, car)

##	class Java:
#		implements = ["hu.bme.mit.gamma.casestudy.iotsystem.interfaces.DataStreamInterface$Listener$Provided"]

class StochasticEventGenerator():


	def __init__(self,detmodel):
		self.detmodel=detmodel
		self.time=0.0
		self.events=[]
		self.dists=[]
		self.min_i=0
		# create Python objects from elementary stochastic components
		self.components=dict()
		self.failureProb=torch.tensor([0.000001])
		#0
		#0
		# definition of elementary stochastic components
		
		self.components.clear()
		self.components.update({ "System.Camera1.softwareTimer" : PeriodicEventSource()})
		self.components.update({ "System.Camera2.softwareTimer" : PeriodicEventSource()})
		self.components.update({ "System.Camera3.softwareTimer" : PeriodicEventSource()})
		self.components.update({ "System.Camera4.softwareTimer" : PeriodicEventSource()})
		self.components.update({ "System.Camera5.softwareTimer" : PeriodicEventSource()})
		self.components.update({ "System.Camera6.softwareTimer" : PeriodicEventSource()})
		self.components.update({ "System.Camera7.softwareTimer" : PeriodicEventSource()})
		self.components.update({ "System.Camera8.softwareTimer" : PeriodicEventSource()})
		self.components.update({ "System.Camera9.softwareTimer" : PeriodicEventSource()})
		self.components.update({ "System.Camera10.softwareTimer" : PeriodicEventSource()})
		self.components.update({ "System.Camera11.softwareTimer" : PeriodicEventSource()})
		self.components.update({ "System.Camera12.softwareTimer" : PeriodicEventSource()})
		self.components.update({ "System.Camera13.softwareTimer" : PeriodicEventSource()})
		self.components.update({ "System.Camera14.softwareTimer" : PeriodicEventSource()})
		self.components.update({ "System.Camera15.softwareTimer" : PeriodicEventSource()})
		self.components.update({ "System.Camera16.softwareTimer" : PeriodicEventSource()})
		self.components.update({ "System.Traffic.carArrival" : PeriodicEventSource()})
		
		
		self.components.update({ "System.Traffic.carDelay" : DelayEventStream()})
		
		
		self.components.update({ "System.Camera1.networkLoss" : SwitchDataStream()})
		self.components.update({ "System.Camera2.networkLoss" : SwitchDataStream()})
		self.components.update({ "System.Camera3.networkLoss" : SwitchDataStream()})
		self.components.update({ "System.Camera4.networkLoss" : SwitchDataStream()})
		self.components.update({ "System.Camera5.networkLoss" : SwitchDataStream()})
		self.components.update({ "System.Camera6.networkLoss" : SwitchDataStream()})
		self.components.update({ "System.Camera7.networkLoss" : SwitchDataStream()})
		self.components.update({ "System.Camera8.networkLoss" : SwitchDataStream()})
		self.components.update({ "System.Camera9.networkLoss" : SwitchDataStream()})
		self.components.update({ "System.Camera10.networkLoss" : SwitchDataStream()})
		self.components.update({ "System.Camera11.networkLoss" : SwitchDataStream()})
		self.components.update({ "System.Camera12.networkLoss" : SwitchDataStream()})
		self.components.update({ "System.Camera13.networkLoss" : SwitchDataStream()})
		self.components.update({ "System.Camera14.networkLoss" : SwitchDataStream()})
		self.components.update({ "System.Camera15.networkLoss" : SwitchDataStream()})
		self.components.update({ "System.Camera16.networkLoss" : SwitchDataStream()})
		
		self.components.update({ "System.Camera1.Software.CameraSoftware.imageBlur" : SampleImageBlur()})
		self.components.update({ "System.Camera2.Software.CameraSoftware.imageBlur" : SampleImageBlur()})
		self.components.update({ "System.Camera3.Software.CameraSoftware.imageBlur" : SampleImageBlur()})
		self.components.update({ "System.Camera4.Software.CameraSoftware.imageBlur" : SampleImageBlur()})
		self.components.update({ "System.Camera5.Software.CameraSoftware.imageBlur" : SampleImageBlur()})
		self.components.update({ "System.Camera6.Software.CameraSoftware.imageBlur" : SampleImageBlur()})
		self.components.update({ "System.Camera7.Software.CameraSoftware.imageBlur" : SampleImageBlur()})
		self.components.update({ "System.Camera8.Software.CameraSoftware.imageBlur" : SampleImageBlur()})
		self.components.update({ "System.Camera9.Software.CameraSoftware.imageBlur" : SampleImageBlur()})
		self.components.update({ "System.Camera10.Software.CameraSoftware.imageBlur" : SampleImageBlur()})
		self.components.update({ "System.Camera11.Software.CameraSoftware.imageBlur" : SampleImageBlur()})
		self.components.update({ "System.Camera12.Software.CameraSoftware.imageBlur" : SampleImageBlur()})
		self.components.update({ "System.Camera13.Software.CameraSoftware.imageBlur" : SampleImageBlur()})
		self.components.update({ "System.Camera14.Software.CameraSoftware.imageBlur" : SampleImageBlur()})
		self.components.update({ "System.Camera15.Software.CameraSoftware.imageBlur" : SampleImageBlur()})
		self.components.update({ "System.Camera16.Software.CameraSoftware.imageBlur" : SampleImageBlur()})
		
		# register input interfaces of elementary stochastic components
		
		self.components["System.Camera1.softwareTimer"].configure(
				name  = "System.Camera1.softwareTimer",
				calls = {'Events' : {'NewEvent' : [(lambda:self.detmodel.getSystem().getCamera1().getSoftware().getSoftwareTimer().raiseNewEvent())]}},
				rules = {'Events' : {'NewEvent' : RandomVariable(pyro.distributions.Normal(loc=torch.tensor(0.2),scale=torch.tensor(0.02)),"ContRandomVarriablesoftwareTimer0")}},
				portevents = 	{	"Events" : [ "NewEvent"	]},
				simulator=self)
				
		self.components["System.Camera2.softwareTimer"].configure(
				name  = "System.Camera2.softwareTimer",
				calls = {'Events' : {'NewEvent' : [(lambda:self.detmodel.getSystem().getCamera2().getSoftware().getSoftwareTimer().raiseNewEvent())]}},
				rules = {'Events' : {'NewEvent' : RandomVariable(pyro.distributions.Normal(loc=torch.tensor(0.2),scale=torch.tensor(0.02)),"ContRandomVarriablesoftwareTimer1")}},
				portevents = 	{	"Events" : [ "NewEvent"	]},
				simulator=self)
				
		self.components["System.Camera3.softwareTimer"].configure(
				name  = "System.Camera3.softwareTimer",
				calls = {'Events' : {'NewEvent' : [(lambda:self.detmodel.getSystem().getCamera3().getSoftware().getSoftwareTimer().raiseNewEvent())]}},
				rules = {'Events' : {'NewEvent' : RandomVariable(pyro.distributions.Normal(loc=torch.tensor(0.2),scale=torch.tensor(0.02)),"ContRandomVarriablesoftwareTimer2")}},
				portevents = 	{	"Events" : [ "NewEvent"	]},
				simulator=self)
				
		self.components["System.Camera4.softwareTimer"].configure(
				name  = "System.Camera4.softwareTimer",
				calls = {'Events' : {'NewEvent' : [(lambda:self.detmodel.getSystem().getCamera4().getSoftware().getSoftwareTimer().raiseNewEvent())]}},
				rules = {'Events' : {'NewEvent' : RandomVariable(pyro.distributions.Normal(loc=torch.tensor(0.2),scale=torch.tensor(0.02)),"ContRandomVarriablesoftwareTimer3")}},
				portevents = 	{	"Events" : [ "NewEvent"	]},
				simulator=self)
				
		self.components["System.Camera5.softwareTimer"].configure(
				name  = "System.Camera5.softwareTimer",
				calls = {'Events' : {'NewEvent' : [(lambda:self.detmodel.getSystem().getCamera5().getSoftware().getSoftwareTimer().raiseNewEvent())]}},
				rules = {'Events' : {'NewEvent' : RandomVariable(pyro.distributions.Normal(loc=torch.tensor(0.2),scale=torch.tensor(0.02)),"ContRandomVarriablesoftwareTimer4")}},
				portevents = 	{	"Events" : [ "NewEvent"	]},
				simulator=self)
				
		self.components["System.Camera6.softwareTimer"].configure(
				name  = "System.Camera6.softwareTimer",
				calls = {'Events' : {'NewEvent' : [(lambda:self.detmodel.getSystem().getCamera6().getSoftware().getSoftwareTimer().raiseNewEvent())]}},
				rules = {'Events' : {'NewEvent' : RandomVariable(pyro.distributions.Normal(loc=torch.tensor(0.2),scale=torch.tensor(0.02)),"ContRandomVarriablesoftwareTimer5")}},
				portevents = 	{	"Events" : [ "NewEvent"	]},
				simulator=self)
				
		self.components["System.Camera7.softwareTimer"].configure(
				name  = "System.Camera7.softwareTimer",
				calls = {'Events' : {'NewEvent' : [(lambda:self.detmodel.getSystem().getCamera7().getSoftware().getSoftwareTimer().raiseNewEvent())]}},
				rules = {'Events' : {'NewEvent' : RandomVariable(pyro.distributions.Normal(loc=torch.tensor(0.2),scale=torch.tensor(0.02)),"ContRandomVarriablesoftwareTimer6")}},
				portevents = 	{	"Events" : [ "NewEvent"	]},
				simulator=self)
				
		self.components["System.Camera8.softwareTimer"].configure(
				name  = "System.Camera8.softwareTimer",
				calls = {'Events' : {'NewEvent' : [(lambda:self.detmodel.getSystem().getCamera8().getSoftware().getSoftwareTimer().raiseNewEvent())]}},
				rules = {'Events' : {'NewEvent' : RandomVariable(pyro.distributions.Normal(loc=torch.tensor(0.2),scale=torch.tensor(0.02)),"ContRandomVarriablesoftwareTimer7")}},
				portevents = 	{	"Events" : [ "NewEvent"	]},
				simulator=self)
				
		self.components["System.Camera9.softwareTimer"].configure(
				name  = "System.Camera9.softwareTimer",
				calls = {'Events' : {'NewEvent' : [(lambda:self.detmodel.getSystem().getCamera9().getSoftware().getSoftwareTimer().raiseNewEvent())]}},
				rules = {'Events' : {'NewEvent' : RandomVariable(pyro.distributions.Normal(loc=torch.tensor(0.2),scale=torch.tensor(0.02)),"ContRandomVarriablesoftwareTimer8")}},
				portevents = 	{	"Events" : [ "NewEvent"	]},
				simulator=self)
				
		self.components["System.Camera10.softwareTimer"].configure(
				name  = "System.Camera10.softwareTimer",
				calls = {'Events' : {'NewEvent' : [(lambda:self.detmodel.getSystem().getCamera10().getSoftware().getSoftwareTimer().raiseNewEvent())]}},
				rules = {'Events' : {'NewEvent' : RandomVariable(pyro.distributions.Normal(loc=torch.tensor(0.2),scale=torch.tensor(0.02)),"ContRandomVarriablesoftwareTimer9")}},
				portevents = 	{	"Events" : [ "NewEvent"	]},
				simulator=self)
				
		self.components["System.Camera11.softwareTimer"].configure(
				name  = "System.Camera11.softwareTimer",
				calls = {'Events' : {'NewEvent' : [(lambda:self.detmodel.getSystem().getCamera11().getSoftware().getSoftwareTimer().raiseNewEvent())]}},
				rules = {'Events' : {'NewEvent' : RandomVariable(pyro.distributions.Normal(loc=torch.tensor(0.2),scale=torch.tensor(0.02)),"ContRandomVarriablesoftwareTimer10")}},
				portevents = 	{	"Events" : [ "NewEvent"	]},
				simulator=self)
				
		self.components["System.Camera12.softwareTimer"].configure(
				name  = "System.Camera12.softwareTimer",
				calls = {'Events' : {'NewEvent' : [(lambda:self.detmodel.getSystem().getCamera12().getSoftware().getSoftwareTimer().raiseNewEvent())]}},
				rules = {'Events' : {'NewEvent' : RandomVariable(pyro.distributions.Normal(loc=torch.tensor(0.2),scale=torch.tensor(0.02)),"ContRandomVarriablesoftwareTimer11")}},
				portevents = 	{	"Events" : [ "NewEvent"	]},
				simulator=self)
				
		self.components["System.Camera13.softwareTimer"].configure(
				name  = "System.Camera13.softwareTimer",
				calls = {'Events' : {'NewEvent' : [(lambda:self.detmodel.getSystem().getCamera13().getSoftware().getSoftwareTimer().raiseNewEvent())]}},
				rules = {'Events' : {'NewEvent' : RandomVariable(pyro.distributions.Normal(loc=torch.tensor(0.2),scale=torch.tensor(0.02)),"ContRandomVarriablesoftwareTimer12")}},
				portevents = 	{	"Events" : [ "NewEvent"	]},
				simulator=self)
				
		self.components["System.Camera14.softwareTimer"].configure(
				name  = "System.Camera14.softwareTimer",
				calls = {'Events' : {'NewEvent' : [(lambda:self.detmodel.getSystem().getCamera14().getSoftware().getSoftwareTimer().raiseNewEvent())]}},
				rules = {'Events' : {'NewEvent' : RandomVariable(pyro.distributions.Normal(loc=torch.tensor(0.2),scale=torch.tensor(0.02)),"ContRandomVarriablesoftwareTimer13")}},
				portevents = 	{	"Events" : [ "NewEvent"	]},
				simulator=self)
				
		self.components["System.Camera15.softwareTimer"].configure(
				name  = "System.Camera15.softwareTimer",
				calls = {'Events' : {'NewEvent' : [(lambda:self.detmodel.getSystem().getCamera15().getSoftware().getSoftwareTimer().raiseNewEvent())]}},
				rules = {'Events' : {'NewEvent' : RandomVariable(pyro.distributions.Normal(loc=torch.tensor(0.2),scale=torch.tensor(0.02)),"ContRandomVarriablesoftwareTimer14")}},
				portevents = 	{	"Events" : [ "NewEvent"	]},
				simulator=self)
				
		self.components["System.Camera16.softwareTimer"].configure(
				name  = "System.Camera16.softwareTimer",
				calls = {'Events' : {'NewEvent' : [(lambda:self.detmodel.getSystem().getCamera16().getSoftware().getSoftwareTimer().raiseNewEvent())]}},
				rules = {'Events' : {'NewEvent' : RandomVariable(pyro.distributions.Normal(loc=torch.tensor(0.2),scale=torch.tensor(0.02)),"ContRandomVarriablesoftwareTimer15")}},
				portevents = 	{	"Events" : [ "NewEvent"	]},
				simulator=self)
				
		self.components["System.Traffic.carArrival"].configure(
				name  = "System.Traffic.carArrival",
				calls = {'Cars' : {'NewEvent' : [(lambda:self.detmodel.getSystem().getTraffic().getTrafficSct().getCarArrives().raiseNewEvent())]}},
				rules = {'Cars' : {'NewEvent' : RandomVariable(pyro.distributions.Exponential(torch.tensor(2.5)),"ContRandomVarriablecarArrival16")}},
				portevents = 	{	"Cars" : [ "NewEvent"	]},
				simulator=self)
				
		
		
		self.components["System.Traffic.carDelay"].configure(
				name  = "System.Traffic.carDelay",
				inport=self.detmodel.getSystem().getTraffic().getTrafficSct().getCarArrivesOut(),
				calls = {'CarOut' : [self.detmodel.getSystem().getTraffic().getTrafficSct().getCarLeaves(), ]},
				rules = {'CarOut' : {'NewEvent' : RandomVariable(pyro.distributions.Normal(loc=torch.tensor(0.5),scale=torch.tensor(0.1)),"ContRandomVarriablecarDelay17")}},
				simulator=self)
				
		
		self.components["System.Camera1.networkLoss"].configure(
				name  = "System.Camera1.networkLoss",
				inport=self.detmodel.getSystem().getCamera1().getSoftware().getImages(),
				calls={'ImageOut' : [self.detmodel.getSystem().getCamera1().getNetworkQueue().getImageIn(), ], 'LostImages' : [self.detmodel.getSystem().getCamera1().getNetworkQueue().getImageLoss(), ]},
				portarray=["ImageOut", "LostImages"],
				categorical=RandomVariable(dist=pyro.distributions.Categorical(torch.tensor([
						torch.tensor(0.9), 
										torch.tensor(0.1)
								])),
					name="NetworkLoss18")
				,
				simulator=self,
				shname="networkLoss",
				compCall=self.detmodel.getSystem().getCamera1())
				
		self.components["System.Camera2.networkLoss"].configure(
				name  = "System.Camera2.networkLoss",
				inport=self.detmodel.getSystem().getCamera2().getSoftware().getImages(),
				calls={'ImageOut' : [self.detmodel.getSystem().getCamera2().getNetworkQueue().getImageIn(), ], 'LostImages' : [self.detmodel.getSystem().getCamera2().getNetworkQueue().getImageLoss(), ]},
				portarray=["ImageOut", "LostImages"],
				categorical=RandomVariable(dist=pyro.distributions.Categorical(torch.tensor([
						torch.tensor(0.9), 
										torch.tensor(0.1)
								])),
					name="NetworkLoss19")
				,
				simulator=self,
				shname="networkLoss",
				compCall=self.detmodel.getSystem().getCamera2())
				
		self.components["System.Camera3.networkLoss"].configure(
				name  = "System.Camera3.networkLoss",
				inport=self.detmodel.getSystem().getCamera3().getSoftware().getImages(),
				calls={'ImageOut' : [self.detmodel.getSystem().getCamera3().getNetworkQueue().getImageIn(), ], 'LostImages' : [self.detmodel.getSystem().getCamera3().getNetworkQueue().getImageLoss(), ]},
				portarray=["ImageOut", "LostImages"],
				categorical=RandomVariable(dist=pyro.distributions.Categorical(torch.tensor([
						torch.tensor(0.9), 
										torch.tensor(0.1)
								])),
					name="NetworkLoss20")
				,
				simulator=self,
				shname="networkLoss",
				compCall=self.detmodel.getSystem().getCamera3())
				
		self.components["System.Camera4.networkLoss"].configure(
				name  = "System.Camera4.networkLoss",
				inport=self.detmodel.getSystem().getCamera4().getSoftware().getImages(),
				calls={'ImageOut' : [self.detmodel.getSystem().getCamera4().getNetworkQueue().getImageIn(), ], 'LostImages' : [self.detmodel.getSystem().getCamera4().getNetworkQueue().getImageLoss(), ]},
				portarray=["ImageOut", "LostImages"],
				categorical=RandomVariable(dist=pyro.distributions.Categorical(torch.tensor([
						torch.tensor(0.9), 
										torch.tensor(0.1)
								])),
					name="NetworkLoss21")
				,
				simulator=self,
				shname="networkLoss",
				compCall=self.detmodel.getSystem().getCamera4())
				
		self.components["System.Camera5.networkLoss"].configure(
				name  = "System.Camera5.networkLoss",
				inport=self.detmodel.getSystem().getCamera5().getSoftware().getImages(),
				calls={'ImageOut' : [self.detmodel.getSystem().getCamera5().getNetworkQueue().getImageIn(), ], 'LostImages' : [self.detmodel.getSystem().getCamera5().getNetworkQueue().getImageLoss(), ]},
				portarray=["ImageOut", "LostImages"],
				categorical=RandomVariable(dist=pyro.distributions.Categorical(torch.tensor([
						torch.tensor(0.9), 
										torch.tensor(0.1)
								])),
					name="NetworkLoss22")
				,
				simulator=self,
				shname="networkLoss",
				compCall=self.detmodel.getSystem().getCamera5())
				
		self.components["System.Camera6.networkLoss"].configure(
				name  = "System.Camera6.networkLoss",
				inport=self.detmodel.getSystem().getCamera6().getSoftware().getImages(),
				calls={'ImageOut' : [self.detmodel.getSystem().getCamera6().getNetworkQueue().getImageIn(), ], 'LostImages' : [self.detmodel.getSystem().getCamera6().getNetworkQueue().getImageLoss(), ]},
				portarray=["ImageOut", "LostImages"],
				categorical=RandomVariable(dist=pyro.distributions.Categorical(torch.tensor([
						torch.tensor(0.9), 
										torch.tensor(0.1)
								])),
					name="NetworkLoss23")
				,
				simulator=self,
				shname="networkLoss",
				compCall=self.detmodel.getSystem().getCamera6())
				
		self.components["System.Camera7.networkLoss"].configure(
				name  = "System.Camera7.networkLoss",
				inport=self.detmodel.getSystem().getCamera7().getSoftware().getImages(),
				calls={'ImageOut' : [self.detmodel.getSystem().getCamera7().getNetworkQueue().getImageIn(), ], 'LostImages' : [self.detmodel.getSystem().getCamera7().getNetworkQueue().getImageLoss(), ]},
				portarray=["ImageOut", "LostImages"],
				categorical=RandomVariable(dist=pyro.distributions.Categorical(torch.tensor([
						torch.tensor(0.9), 
										torch.tensor(0.1)
								])),
					name="NetworkLoss24")
				,
				simulator=self,
				shname="networkLoss",
				compCall=self.detmodel.getSystem().getCamera7())
				
		self.components["System.Camera8.networkLoss"].configure(
				name  = "System.Camera8.networkLoss",
				inport=self.detmodel.getSystem().getCamera8().getSoftware().getImages(),
				calls={'ImageOut' : [self.detmodel.getSystem().getCamera8().getNetworkQueue().getImageIn(), ], 'LostImages' : [self.detmodel.getSystem().getCamera8().getNetworkQueue().getImageLoss(), ]},
				portarray=["ImageOut", "LostImages"],
				categorical=RandomVariable(dist=pyro.distributions.Categorical(torch.tensor([
						torch.tensor(0.9), 
										torch.tensor(0.1)
								])),
					name="NetworkLoss25")
				,
				simulator=self,
				shname="networkLoss",
				compCall=self.detmodel.getSystem().getCamera8())
				
		self.components["System.Camera9.networkLoss"].configure(
				name  = "System.Camera9.networkLoss",
				inport=self.detmodel.getSystem().getCamera9().getSoftware().getImages(),
				calls={'ImageOut' : [self.detmodel.getSystem().getCamera9().getNetworkQueue().getImageIn(), ], 'LostImages' : [self.detmodel.getSystem().getCamera9().getNetworkQueue().getImageLoss(), ]},
				portarray=["ImageOut", "LostImages"],
				categorical=RandomVariable(dist=pyro.distributions.Categorical(torch.tensor([
						torch.tensor(0.9), 
										torch.tensor(0.1)
								])),
					name="NetworkLoss26")
				,
				simulator=self,
				shname="networkLoss",
				compCall=self.detmodel.getSystem().getCamera9())
				
		self.components["System.Camera10.networkLoss"].configure(
				name  = "System.Camera10.networkLoss",
				inport=self.detmodel.getSystem().getCamera10().getSoftware().getImages(),
				calls={'ImageOut' : [self.detmodel.getSystem().getCamera10().getNetworkQueue().getImageIn(), ], 'LostImages' : [self.detmodel.getSystem().getCamera10().getNetworkQueue().getImageLoss(), ]},
				portarray=["ImageOut", "LostImages"],
				categorical=RandomVariable(dist=pyro.distributions.Categorical(torch.tensor([
						torch.tensor(0.9), 
										torch.tensor(0.1)
								])),
					name="NetworkLoss27")
				,
				simulator=self,
				shname="networkLoss",
				compCall=self.detmodel.getSystem().getCamera10())
				
		self.components["System.Camera11.networkLoss"].configure(
				name  = "System.Camera11.networkLoss",
				inport=self.detmodel.getSystem().getCamera11().getSoftware().getImages(),
				calls={'ImageOut' : [self.detmodel.getSystem().getCamera11().getNetworkQueue().getImageIn(), ], 'LostImages' : [self.detmodel.getSystem().getCamera11().getNetworkQueue().getImageLoss(), ]},
				portarray=["ImageOut", "LostImages"],
				categorical=RandomVariable(dist=pyro.distributions.Categorical(torch.tensor([
						torch.tensor(0.9), 
										torch.tensor(0.1)
								])),
					name="NetworkLoss28")
				,
				simulator=self,
				shname="networkLoss",
				compCall=self.detmodel.getSystem().getCamera11())
				
		self.components["System.Camera12.networkLoss"].configure(
				name  = "System.Camera12.networkLoss",
				inport=self.detmodel.getSystem().getCamera12().getSoftware().getImages(),
				calls={'ImageOut' : [self.detmodel.getSystem().getCamera12().getNetworkQueue().getImageIn(), ], 'LostImages' : [self.detmodel.getSystem().getCamera12().getNetworkQueue().getImageLoss(), ]},
				portarray=["ImageOut", "LostImages"],
				categorical=RandomVariable(dist=pyro.distributions.Categorical(torch.tensor([
						torch.tensor(0.9), 
										torch.tensor(0.1)
								])),
					name="NetworkLoss29")
				,
				simulator=self,
				shname="networkLoss",
				compCall=self.detmodel.getSystem().getCamera12())
				
		self.components["System.Camera13.networkLoss"].configure(
				name  = "System.Camera13.networkLoss",
				inport=self.detmodel.getSystem().getCamera13().getSoftware().getImages(),
				calls={'ImageOut' : [self.detmodel.getSystem().getCamera13().getNetworkQueue().getImageIn(), ], 'LostImages' : [self.detmodel.getSystem().getCamera13().getNetworkQueue().getImageLoss(), ]},
				portarray=["ImageOut", "LostImages"],
				categorical=RandomVariable(dist=pyro.distributions.Categorical(torch.tensor([
						torch.tensor(0.9), 
										torch.tensor(0.1)
								])),
					name="NetworkLoss30")
				,
				simulator=self,
				shname="networkLoss",
				compCall=self.detmodel.getSystem().getCamera13())
				
		self.components["System.Camera14.networkLoss"].configure(
				name  = "System.Camera14.networkLoss",
				inport=self.detmodel.getSystem().getCamera14().getSoftware().getImages(),
				calls={'ImageOut' : [self.detmodel.getSystem().getCamera14().getNetworkQueue().getImageIn(), ], 'LostImages' : [self.detmodel.getSystem().getCamera14().getNetworkQueue().getImageLoss(), ]},
				portarray=["ImageOut", "LostImages"],
				categorical=RandomVariable(dist=pyro.distributions.Categorical(torch.tensor([
						torch.tensor(0.9), 
										torch.tensor(0.1)
								])),
					name="NetworkLoss31")
				,
				simulator=self,
				shname="networkLoss",
				compCall=self.detmodel.getSystem().getCamera14())
				
		self.components["System.Camera15.networkLoss"].configure(
				name  = "System.Camera15.networkLoss",
				inport=self.detmodel.getSystem().getCamera15().getSoftware().getImages(),
				calls={'ImageOut' : [self.detmodel.getSystem().getCamera15().getNetworkQueue().getImageIn(), ], 'LostImages' : [self.detmodel.getSystem().getCamera15().getNetworkQueue().getImageLoss(), ]},
				portarray=["ImageOut", "LostImages"],
				categorical=RandomVariable(dist=pyro.distributions.Categorical(torch.tensor([
						torch.tensor(0.9), 
										torch.tensor(0.1)
								])),
					name="NetworkLoss32")
				,
				simulator=self,
				shname="networkLoss",
				compCall=self.detmodel.getSystem().getCamera15())
				
		self.components["System.Camera16.networkLoss"].configure(
				name  = "System.Camera16.networkLoss",
				inport=self.detmodel.getSystem().getCamera16().getSoftware().getImages(),
				calls={'ImageOut' : [self.detmodel.getSystem().getCamera16().getNetworkQueue().getImageIn(), ], 'LostImages' : [self.detmodel.getSystem().getCamera16().getNetworkQueue().getImageLoss(), ]},
				portarray=["ImageOut", "LostImages"],
				categorical=RandomVariable(dist=pyro.distributions.Categorical(torch.tensor([
						torch.tensor(0.9), 
										torch.tensor(0.1)
								])),
					name="NetworkLoss33")
				,
				simulator=self,
				shname="networkLoss",
				compCall=self.detmodel.getSystem().getCamera16())
				
		
		self.components["System.Camera1.Software.CameraSoftware.imageBlur"].configure(
				name  = "System.Camera1.Software.CameraSoftware.imageBlur",
				inport=self.detmodel.getSystem().getCamera1().getSoftware().getCameraSoftware().getCameraDriver().getImages(),
				calls = {'ImageOut' : [self.detmodel.getSystem().getCamera1().getSoftware().getCameraSoftware().getCameraControl().getDriverImages(), ]},
				rules = {'ImageOut' : {'NewData' : {'blurred' : RandomVariable(pyro.distributions.Bernoulli(self.failureProb[0]),"DiscRandomVarriableimageBlur34")}}},
				simulator=self,
				shname="imageBlur",
				compCall=self.detmodel.getSystem().getCamera1().getSoftware().getCameraSoftware()
				)
				
		self.components["System.Camera2.Software.CameraSoftware.imageBlur"].configure(
				name  = "System.Camera2.Software.CameraSoftware.imageBlur",
				inport=self.detmodel.getSystem().getCamera2().getSoftware().getCameraSoftware().getCameraDriver().getImages(),
				calls = {'ImageOut' : [self.detmodel.getSystem().getCamera2().getSoftware().getCameraSoftware().getCameraControl().getDriverImages(), ]},
				rules = {'ImageOut' : {'NewData' : {'blurred' : RandomVariable(pyro.distributions.Bernoulli(self.failureProb[0]),"DiscRandomVarriableimageBlur35")}}},
				simulator=self,
				shname="imageBlur",
				compCall=self.detmodel.getSystem().getCamera2().getSoftware().getCameraSoftware()
				)
				
		self.components["System.Camera3.Software.CameraSoftware.imageBlur"].configure(
				name  = "System.Camera3.Software.CameraSoftware.imageBlur",
				inport=self.detmodel.getSystem().getCamera3().getSoftware().getCameraSoftware().getCameraDriver().getImages(),
				calls = {'ImageOut' : [self.detmodel.getSystem().getCamera3().getSoftware().getCameraSoftware().getCameraControl().getDriverImages(), ]},
				rules = {'ImageOut' : {'NewData' : {'blurred' : RandomVariable(pyro.distributions.Bernoulli(self.failureProb[0]),"DiscRandomVarriableimageBlur36")}}},
				simulator=self,
				shname="imageBlur",
				compCall=self.detmodel.getSystem().getCamera3().getSoftware().getCameraSoftware()
				)
				
		self.components["System.Camera4.Software.CameraSoftware.imageBlur"].configure(
				name  = "System.Camera4.Software.CameraSoftware.imageBlur",
				inport=self.detmodel.getSystem().getCamera4().getSoftware().getCameraSoftware().getCameraDriver().getImages(),
				calls = {'ImageOut' : [self.detmodel.getSystem().getCamera4().getSoftware().getCameraSoftware().getCameraControl().getDriverImages(), ]},
				rules = {'ImageOut' : {'NewData' : {'blurred' : RandomVariable(pyro.distributions.Bernoulli(self.failureProb[0]),"DiscRandomVarriableimageBlur37")}}},
				simulator=self,
				shname="imageBlur",
				compCall=self.detmodel.getSystem().getCamera4().getSoftware().getCameraSoftware()
				)
				
		self.components["System.Camera5.Software.CameraSoftware.imageBlur"].configure(
				name  = "System.Camera5.Software.CameraSoftware.imageBlur",
				inport=self.detmodel.getSystem().getCamera5().getSoftware().getCameraSoftware().getCameraDriver().getImages(),
				calls = {'ImageOut' : [self.detmodel.getSystem().getCamera5().getSoftware().getCameraSoftware().getCameraControl().getDriverImages(), ]},
				rules = {'ImageOut' : {'NewData' : {'blurred' : RandomVariable(pyro.distributions.Bernoulli(self.failureProb[0]),"DiscRandomVarriableimageBlur38")}}},
				simulator=self,
				shname="imageBlur",
				compCall=self.detmodel.getSystem().getCamera5().getSoftware().getCameraSoftware()
				)
				
		self.components["System.Camera6.Software.CameraSoftware.imageBlur"].configure(
				name  = "System.Camera6.Software.CameraSoftware.imageBlur",
				inport=self.detmodel.getSystem().getCamera6().getSoftware().getCameraSoftware().getCameraDriver().getImages(),
				calls = {'ImageOut' : [self.detmodel.getSystem().getCamera6().getSoftware().getCameraSoftware().getCameraControl().getDriverImages(), ]},
				rules = {'ImageOut' : {'NewData' : {'blurred' : RandomVariable(pyro.distributions.Bernoulli(self.failureProb[0]),"DiscRandomVarriableimageBlur39")}}},
				simulator=self,
				shname="imageBlur",
				compCall=self.detmodel.getSystem().getCamera6().getSoftware().getCameraSoftware()
				)
				
		self.components["System.Camera7.Software.CameraSoftware.imageBlur"].configure(
				name  = "System.Camera7.Software.CameraSoftware.imageBlur",
				inport=self.detmodel.getSystem().getCamera7().getSoftware().getCameraSoftware().getCameraDriver().getImages(),
				calls = {'ImageOut' : [self.detmodel.getSystem().getCamera7().getSoftware().getCameraSoftware().getCameraControl().getDriverImages(), ]},
				rules = {'ImageOut' : {'NewData' : {'blurred' : RandomVariable(pyro.distributions.Bernoulli(self.failureProb[0]),"DiscRandomVarriableimageBlur40")}}},
				simulator=self,
				shname="imageBlur",
				compCall=self.detmodel.getSystem().getCamera7().getSoftware().getCameraSoftware()
				)
				
		self.components["System.Camera8.Software.CameraSoftware.imageBlur"].configure(
				name  = "System.Camera8.Software.CameraSoftware.imageBlur",
				inport=self.detmodel.getSystem().getCamera8().getSoftware().getCameraSoftware().getCameraDriver().getImages(),
				calls = {'ImageOut' : [self.detmodel.getSystem().getCamera8().getSoftware().getCameraSoftware().getCameraControl().getDriverImages(), ]},
				rules = {'ImageOut' : {'NewData' : {'blurred' : RandomVariable(pyro.distributions.Bernoulli(self.failureProb[0]),"DiscRandomVarriableimageBlur41")}}},
				simulator=self,
				shname="imageBlur",
				compCall=self.detmodel.getSystem().getCamera8().getSoftware().getCameraSoftware()
				)
				
		self.components["System.Camera9.Software.CameraSoftware.imageBlur"].configure(
				name  = "System.Camera9.Software.CameraSoftware.imageBlur",
				inport=self.detmodel.getSystem().getCamera9().getSoftware().getCameraSoftware().getCameraDriver().getImages(),
				calls = {'ImageOut' : [self.detmodel.getSystem().getCamera9().getSoftware().getCameraSoftware().getCameraControl().getDriverImages(), ]},
				rules = {'ImageOut' : {'NewData' : {'blurred' : RandomVariable(pyro.distributions.Bernoulli(self.failureProb[0]),"DiscRandomVarriableimageBlur42")}}},
				simulator=self,
				shname="imageBlur",
				compCall=self.detmodel.getSystem().getCamera9().getSoftware().getCameraSoftware()
				)
				
		self.components["System.Camera10.Software.CameraSoftware.imageBlur"].configure(
				name  = "System.Camera10.Software.CameraSoftware.imageBlur",
				inport=self.detmodel.getSystem().getCamera10().getSoftware().getCameraSoftware().getCameraDriver().getImages(),
				calls = {'ImageOut' : [self.detmodel.getSystem().getCamera10().getSoftware().getCameraSoftware().getCameraControl().getDriverImages(), ]},
				rules = {'ImageOut' : {'NewData' : {'blurred' : RandomVariable(pyro.distributions.Bernoulli(self.failureProb[0]),"DiscRandomVarriableimageBlur43")}}},
				simulator=self,
				shname="imageBlur",
				compCall=self.detmodel.getSystem().getCamera10().getSoftware().getCameraSoftware()
				)
				
		self.components["System.Camera11.Software.CameraSoftware.imageBlur"].configure(
				name  = "System.Camera11.Software.CameraSoftware.imageBlur",
				inport=self.detmodel.getSystem().getCamera11().getSoftware().getCameraSoftware().getCameraDriver().getImages(),
				calls = {'ImageOut' : [self.detmodel.getSystem().getCamera11().getSoftware().getCameraSoftware().getCameraControl().getDriverImages(), ]},
				rules = {'ImageOut' : {'NewData' : {'blurred' : RandomVariable(pyro.distributions.Bernoulli(self.failureProb[0]),"DiscRandomVarriableimageBlur44")}}},
				simulator=self,
				shname="imageBlur",
				compCall=self.detmodel.getSystem().getCamera11().getSoftware().getCameraSoftware()
				)
				
		self.components["System.Camera12.Software.CameraSoftware.imageBlur"].configure(
				name  = "System.Camera12.Software.CameraSoftware.imageBlur",
				inport=self.detmodel.getSystem().getCamera12().getSoftware().getCameraSoftware().getCameraDriver().getImages(),
				calls = {'ImageOut' : [self.detmodel.getSystem().getCamera12().getSoftware().getCameraSoftware().getCameraControl().getDriverImages(), ]},
				rules = {'ImageOut' : {'NewData' : {'blurred' : RandomVariable(pyro.distributions.Bernoulli(self.failureProb[0]),"DiscRandomVarriableimageBlur45")}}},
				simulator=self,
				shname="imageBlur",
				compCall=self.detmodel.getSystem().getCamera12().getSoftware().getCameraSoftware()
				)
				
		self.components["System.Camera13.Software.CameraSoftware.imageBlur"].configure(
				name  = "System.Camera13.Software.CameraSoftware.imageBlur",
				inport=self.detmodel.getSystem().getCamera13().getSoftware().getCameraSoftware().getCameraDriver().getImages(),
				calls = {'ImageOut' : [self.detmodel.getSystem().getCamera13().getSoftware().getCameraSoftware().getCameraControl().getDriverImages(), ]},
				rules = {'ImageOut' : {'NewData' : {'blurred' : RandomVariable(pyro.distributions.Bernoulli(self.failureProb[0]),"DiscRandomVarriableimageBlur46")}}},
				simulator=self,
				shname="imageBlur",
				compCall=self.detmodel.getSystem().getCamera13().getSoftware().getCameraSoftware()
				)
				
		self.components["System.Camera14.Software.CameraSoftware.imageBlur"].configure(
				name  = "System.Camera14.Software.CameraSoftware.imageBlur",
				inport=self.detmodel.getSystem().getCamera14().getSoftware().getCameraSoftware().getCameraDriver().getImages(),
				calls = {'ImageOut' : [self.detmodel.getSystem().getCamera14().getSoftware().getCameraSoftware().getCameraControl().getDriverImages(), ]},
				rules = {'ImageOut' : {'NewData' : {'blurred' : RandomVariable(pyro.distributions.Bernoulli(self.failureProb[0]),"DiscRandomVarriableimageBlur47")}}},
				simulator=self,
				shname="imageBlur",
				compCall=self.detmodel.getSystem().getCamera14().getSoftware().getCameraSoftware()
				)
				
		self.components["System.Camera15.Software.CameraSoftware.imageBlur"].configure(
				name  = "System.Camera15.Software.CameraSoftware.imageBlur",
				inport=self.detmodel.getSystem().getCamera15().getSoftware().getCameraSoftware().getCameraDriver().getImages(),
				calls = {'ImageOut' : [self.detmodel.getSystem().getCamera15().getSoftware().getCameraSoftware().getCameraControl().getDriverImages(), ]},
				rules = {'ImageOut' : {'NewData' : {'blurred' : RandomVariable(pyro.distributions.Bernoulli(self.failureProb[0]),"DiscRandomVarriableimageBlur48")}}},
				simulator=self,
				shname="imageBlur",
				compCall=self.detmodel.getSystem().getCamera15().getSoftware().getCameraSoftware()
				)
				
		self.components["System.Camera16.Software.CameraSoftware.imageBlur"].configure(
				name  = "System.Camera16.Software.CameraSoftware.imageBlur",
				inport=self.detmodel.getSystem().getCamera16().getSoftware().getCameraSoftware().getCameraDriver().getImages(),
				calls = {'ImageOut' : [self.detmodel.getSystem().getCamera16().getSoftware().getCameraSoftware().getCameraControl().getDriverImages(), ]},
				rules = {'ImageOut' : {'NewData' : {'blurred' : RandomVariable(pyro.distributions.Bernoulli(self.failureProb[0]),"DiscRandomVarriableimageBlur49")}}},
				simulator=self,
				shname="imageBlur",
				compCall=self.detmodel.getSystem().getCamera16().getSoftware().getCameraSoftware()
				)
				
		
		
		RandomVariable.ginit()

	def reset(self):
		self.time=0
		self.events.clear()
		self.failureProb[0]=pyro.sample("param_0",pyro.distributions.Uniform(low=torch.tensor(0.01),high=torch.tensor(0.99))).detach()
		#0
		RandomVariable.greset()
		self.detmodel.reset()
		"""self.detmodel.reset(self.failureProb#1
		)"""

	def generateEvents(self):
		for component in list(self.components.values()):
			component.generateEvents()

	# shall be called after the getEarliestTime() function
	def popEvent(self):
		event=self.events[self.min_i]
		self.events.remove(event)
		return event

	def getEarliestTime(self):
		mintime=1000000000000000.0
		min_i=0
		for i in range (len(self.events)):
			if self.events[i].eventTime<mintime:
				min_i=i
				mintime=self.events[min_i].eventTime
		self.min_i=min_i
		return mintime-self.time

def guide():
	dists=[]
	
	dists.append[RandomVariable(pyro.distributions.Normal(loc=torch.tensor(0.2),scale=torch.tensor(0.02)),"ContRandomVarriablesoftwareTimer0")]
	dists.append[RandomVariable(pyro.distributions.Normal(loc=torch.tensor(0.2),scale=torch.tensor(0.02)),"ContRandomVarriablesoftwareTimer1")]
	dists.append[RandomVariable(pyro.distributions.Normal(loc=torch.tensor(0.2),scale=torch.tensor(0.02)),"ContRandomVarriablesoftwareTimer2")]
	dists.append[RandomVariable(pyro.distributions.Normal(loc=torch.tensor(0.2),scale=torch.tensor(0.02)),"ContRandomVarriablesoftwareTimer3")]
	dists.append[RandomVariable(pyro.distributions.Normal(loc=torch.tensor(0.2),scale=torch.tensor(0.02)),"ContRandomVarriablesoftwareTimer4")]
	dists.append[RandomVariable(pyro.distributions.Normal(loc=torch.tensor(0.2),scale=torch.tensor(0.02)),"ContRandomVarriablesoftwareTimer5")]
	dists.append[RandomVariable(pyro.distributions.Normal(loc=torch.tensor(0.2),scale=torch.tensor(0.02)),"ContRandomVarriablesoftwareTimer6")]
	dists.append[RandomVariable(pyro.distributions.Normal(loc=torch.tensor(0.2),scale=torch.tensor(0.02)),"ContRandomVarriablesoftwareTimer7")]
	dists.append[RandomVariable(pyro.distributions.Normal(loc=torch.tensor(0.2),scale=torch.tensor(0.02)),"ContRandomVarriablesoftwareTimer8")]
	dists.append[RandomVariable(pyro.distributions.Normal(loc=torch.tensor(0.2),scale=torch.tensor(0.02)),"ContRandomVarriablesoftwareTimer9")]
	dists.append[RandomVariable(pyro.distributions.Normal(loc=torch.tensor(0.2),scale=torch.tensor(0.02)),"ContRandomVarriablesoftwareTimer10")]
	dists.append[RandomVariable(pyro.distributions.Normal(loc=torch.tensor(0.2),scale=torch.tensor(0.02)),"ContRandomVarriablesoftwareTimer11")]
	dists.append[RandomVariable(pyro.distributions.Normal(loc=torch.tensor(0.2),scale=torch.tensor(0.02)),"ContRandomVarriablesoftwareTimer12")]
	dists.append[RandomVariable(pyro.distributions.Normal(loc=torch.tensor(0.2),scale=torch.tensor(0.02)),"ContRandomVarriablesoftwareTimer13")]
	dists.append[RandomVariable(pyro.distributions.Normal(loc=torch.tensor(0.2),scale=torch.tensor(0.02)),"ContRandomVarriablesoftwareTimer14")]
	dists.append[RandomVariable(pyro.distributions.Normal(loc=torch.tensor(0.2),scale=torch.tensor(0.02)),"ContRandomVarriablesoftwareTimer15")]
	dists.append[RandomVariable(pyro.distributions.Exponential(torch.tensor(2.5)),"ContRandomVarriablecarArrival16")]
	dists.append[RandomVariable(pyro.distributions.Normal(loc=torch.tensor(0.5),scale=torch.tensor(0.1)),"ContRandomVarriablecarDelay17")]
	dists.append[RandomVariable(dist=pyro.distributions.Categorical(torch.tensor([
			torch.tensor(0.9), 
							torch.tensor(0.1)
					])),
		name="NetworkLoss18")
	]
	dists.append[RandomVariable(dist=pyro.distributions.Categorical(torch.tensor([
			torch.tensor(0.9), 
							torch.tensor(0.1)
					])),
		name="NetworkLoss19")
	]
	dists.append[RandomVariable(dist=pyro.distributions.Categorical(torch.tensor([
			torch.tensor(0.9), 
							torch.tensor(0.1)
					])),
		name="NetworkLoss20")
	]
	dists.append[RandomVariable(dist=pyro.distributions.Categorical(torch.tensor([
			torch.tensor(0.9), 
							torch.tensor(0.1)
					])),
		name="NetworkLoss21")
	]
	dists.append[RandomVariable(dist=pyro.distributions.Categorical(torch.tensor([
			torch.tensor(0.9), 
							torch.tensor(0.1)
					])),
		name="NetworkLoss22")
	]
	dists.append[RandomVariable(dist=pyro.distributions.Categorical(torch.tensor([
			torch.tensor(0.9), 
							torch.tensor(0.1)
					])),
		name="NetworkLoss23")
	]
	dists.append[RandomVariable(dist=pyro.distributions.Categorical(torch.tensor([
			torch.tensor(0.9), 
							torch.tensor(0.1)
					])),
		name="NetworkLoss24")
	]
	dists.append[RandomVariable(dist=pyro.distributions.Categorical(torch.tensor([
			torch.tensor(0.9), 
							torch.tensor(0.1)
					])),
		name="NetworkLoss25")
	]
	dists.append[RandomVariable(dist=pyro.distributions.Categorical(torch.tensor([
			torch.tensor(0.9), 
							torch.tensor(0.1)
					])),
		name="NetworkLoss26")
	]
	dists.append[RandomVariable(dist=pyro.distributions.Categorical(torch.tensor([
			torch.tensor(0.9), 
							torch.tensor(0.1)
					])),
		name="NetworkLoss27")
	]
	dists.append[RandomVariable(dist=pyro.distributions.Categorical(torch.tensor([
			torch.tensor(0.9), 
							torch.tensor(0.1)
					])),
		name="NetworkLoss28")
	]
	dists.append[RandomVariable(dist=pyro.distributions.Categorical(torch.tensor([
			torch.tensor(0.9), 
							torch.tensor(0.1)
					])),
		name="NetworkLoss29")
	]
	dists.append[RandomVariable(dist=pyro.distributions.Categorical(torch.tensor([
			torch.tensor(0.9), 
							torch.tensor(0.1)
					])),
		name="NetworkLoss30")
	]
	dists.append[RandomVariable(dist=pyro.distributions.Categorical(torch.tensor([
			torch.tensor(0.9), 
							torch.tensor(0.1)
					])),
		name="NetworkLoss31")
	]
	dists.append[RandomVariable(dist=pyro.distributions.Categorical(torch.tensor([
			torch.tensor(0.9), 
							torch.tensor(0.1)
					])),
		name="NetworkLoss32")
	]
	dists.append[RandomVariable(dist=pyro.distributions.Categorical(torch.tensor([
			torch.tensor(0.9), 
							torch.tensor(0.1)
					])),
		name="NetworkLoss33")
	]
	dists.append[RandomVariable(pyro.distributions.Bernoulli(self.failureProb[0]),"DiscRandomVarriableimageBlur34")]
	dists.append[RandomVariable(pyro.distributions.Bernoulli(self.failureProb[0]),"DiscRandomVarriableimageBlur35")]
	dists.append[RandomVariable(pyro.distributions.Bernoulli(self.failureProb[0]),"DiscRandomVarriableimageBlur36")]
	dists.append[RandomVariable(pyro.distributions.Bernoulli(self.failureProb[0]),"DiscRandomVarriableimageBlur37")]
	dists.append[RandomVariable(pyro.distributions.Bernoulli(self.failureProb[0]),"DiscRandomVarriableimageBlur38")]
	dists.append[RandomVariable(pyro.distributions.Bernoulli(self.failureProb[0]),"DiscRandomVarriableimageBlur39")]
	dists.append[RandomVariable(pyro.distributions.Bernoulli(self.failureProb[0]),"DiscRandomVarriableimageBlur40")]
	dists.append[RandomVariable(pyro.distributions.Bernoulli(self.failureProb[0]),"DiscRandomVarriableimageBlur41")]
	dists.append[RandomVariable(pyro.distributions.Bernoulli(self.failureProb[0]),"DiscRandomVarriableimageBlur42")]
	dists.append[RandomVariable(pyro.distributions.Bernoulli(self.failureProb[0]),"DiscRandomVarriableimageBlur43")]
	dists.append[RandomVariable(pyro.distributions.Bernoulli(self.failureProb[0]),"DiscRandomVarriableimageBlur44")]
	dists.append[RandomVariable(pyro.distributions.Bernoulli(self.failureProb[0]),"DiscRandomVarriableimageBlur45")]
	dists.append[RandomVariable(pyro.distributions.Bernoulli(self.failureProb[0]),"DiscRandomVarriableimageBlur46")]
	dists.append[RandomVariable(pyro.distributions.Bernoulli(self.failureProb[0]),"DiscRandomVarriableimageBlur47")]
	dists.append[RandomVariable(pyro.distributions.Bernoulli(self.failureProb[0]),"DiscRandomVarriableimageBlur48")]
	dists.append[RandomVariable(pyro.distributions.Bernoulli(self.failureProb[0]),"DiscRandomVarriableimageBlur49")]
	
	for dist in dists:
		dist.reset()
	# 


print("creating stochastic event generator")
stochmodel=0
try:
	stochmodel = StochasticEventGenerator(detmodel)
	print("stochastic event generator is successfully created")
except jpype.JException as ex:
		print("Caught base exception : ", str(ex))
		print(ex.stacktrace())
		shutdownJVM()
except Exception as ex:
		print("Caught python exception :", str(ex))
		traceback.print_exc()
		shutdownJVM()

def state2num(state):
	if state=="run":
		return 0.0
	else:
		return 1.0

def simulate():
		
	# global objects: stochastic event generator and deterministic evaluator
	global stochmodel, detmodel
	
	# DEBUG variables
	AspectSystem_Failures_NewEventFreq=0
	
	
	# initialize the stochastic event generator
	stochmodel.reset()
	stochmodel.generateEvents()
	
	# schedule the asynchronous component
	detmodel.getSystem().schedule()
	
	
	# run the simulator until there are stochastic events available and simulation time is not reached
	while len(stochmodel.events) > 0 and stochmodel.time <= simTime:
		

		
		# get the event with the earliest clock
		stochmodel.getEarliestTime()
		event = stochmodel.popEvent()

		
		if event.eventTime > simTime :
			break
		
		# insert the event into the deterministic evaluator
		stochmodel.time = event.eventTime
		
		# raise the event
		event.eventCall()
		
		# schedule the deterministic evaluator
		detmodel.getSystem().schedule()
		

		# evaluate end condition
		
		if detmodel.monitorOfEndConditionSystem_CarLeave_NewEvent.state != "run":
			# print debug end condition information
			break
	
	#register the result of the analysis to the Pyro
	pyro.deterministic("Failures_newEvent_prob",torch.tensor(state2num(detmodel.monitorOfAspectSystem_Failures_NewEvent.state)))
	
	#register the conditions to the Pyro
	pyro.sample("Failures_newEvent_cond_ar",pyro.distributions.Bernoulli(torch.tensor(0.9)), obs = torch.tensor(state2num(detmodel.monitorOfConditionSystem_Failures_NewEvent.state)))
	
	
	# get the aspects and return from the simulations 
	
	#return the result of the simulation
	return state2num(detmodel.monitorOfAspectSystem_Failures_NewEvent.state)

if __name__ == "__main__":
	try:
		
		# run inference algorithm
		inference=pyro.infer.Importance(model=simulate, num_samples=10000)
		print("run inference algorithm...")
		t0=time.time()
		inference.run()
		empirical_marginal_Failures_newEvent_prob = pyro.infer.EmpiricalMarginal(inference, "Failures_newEvent_prob")
		t1=time.time()
		# visualize results
		print(f"Analysis is finished in {t1-t0} s")
		print("Results of the analysis: ")
		print("Estimated Failures_newEvent_prob = ",round(empirical_marginal_Failures_newEvent_prob.mean.item(),4))
		print("visualize results...")
		#visualizeMarginal(inference,empirical_marginal_Failures_newEvent_prob,'Failures_newEvent_prob')
		plt.show()
	except java.lang.RuntimeException as ex:
		print("Caught Java runtime exception : ", str(ex))
		print(ex.stacktrace())
	except jpype.JException as ex:
		print("Caught Jpype exception : ", str(ex))
		print(ex.stacktrace())
	except Exception as err:
		print("Caught Python exception : ", err)
		traceback.print_exc()
	finally:
		print("shutting down JVM...")
		shutdownJVM()
	print ("analysis is finished successfully")




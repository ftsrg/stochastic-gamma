# automatically generated probabilistic program
# generated by Gamma Composition Framework
# time of model generation: 2024-05-11T09:20:12.368416500

import pyro
import torch
import pyro.distributions as dist
import pyro.contrib.gp as gp
from pyro.distributions.torch_distribution import TorchDistribution
from pyro.distributions.util import broadcast_shape
import numpy as np

import math
from math import exp
import statistics as stats

import matplotlib.pyplot as plt
import matplotlib

# import datetime
# from influxdb import InfluxDBClient


import time
import os
import traceback
from jpype import JImplements, JOverride
from jpype import *
import jpype
import hashlib



# manually build the java code
BUILD=False
# synchronization of elementary stochastic components in synchronous composition
IESC_SYNC=False

# conversion between the time unit of elementary stochastic components and millisecond
time_conv=1.0 # 1000000000.0*60*60*1000

simTime=300.0
simNumber=10000

def visualizeMarginal(inference, marginal, name):
	sample_num=10000
	bin_num=100
	marginal_samples = torch.stack([torch.abs(marginal()) for _ in range(sample_num)])
	fig, a = plt.subplots()
	a.set_title( "Empirical marginal "+name+" (ESS:"+str(round(inference.get_ESS().item(),2))+", avg:"+str(round(marginal.mean.item(),2))+", stddev:"+str(round(marginal.variance.sqrt().item(),2))+")" )
	a.hist(marginal_samples.numpy(), color='b',bins=bin_num, density=1, label="Marginal of "+name)
	a.set_ylabel("Estimated density")
	a.set_xlabel("Value of "+name)

print('initiating Python-Java connection')

def create_detmodel():
	if BUILD:
		commands = ["""javac $(find C:\\Users\\simon\\Projects\\stochastic-gamma\\runtime-hu.bme.mit.gamma.environment.rcp.product -name "*.java")"""]
		for command in commands:
			if os.system(command) == 0:
				continue
			else:
				print( "ERROR")
				break
	startJVM("""C:\\Program Files\\Java\\jdk-20\\bin\\server\\jvm.dll""", '-ea',"""-Djava.class.path=C:\\Users\\simon\\git\\stochastic-gamma\\examples\\hu.bme.mit.gamma.stochastic.casestudy.orion\\bin""")
	detmodel = 0
	EntryPoint = JClass('javaenv.Orion_Performance_Cond_4EntryPoint')
	detmodel = EntryPoint()
	print('Python-Java connection established')
	return detmodel

detmodel=create_detmodel()



# python classes of random variables and distributions
class Dataset():

	def __init__(self,dbname,ip,port,query=None,script=None):
		if query is not None:
			client = InfluxDBClient(ip, int(port), database=dbname)
			result = client.query(query)
			points = result.get_points()
			self.points=points
		elif script is not None:
			exec(script)


# stochastic model classes

class DiscreteRandomVariable():
	def __init__(self,dist,name):
		self.dist=dist
		self.name=name
		self.event_cntr=0
	def calc(self,event=0,time=0):
		self.event_cntr=self.event_cntr+1
		return pyro.sample(self.name+"_sample_"+str(self.event_cntr),self.dist).item()-1.0

class JointDistribution(TorchDistribution):

    arg_constraints = {}  # nothing can be constrained

    def __init__(self, dists, validate_args=None):
        for dist in dists:
            if dist.event_shape != dists[0].event_shape:
                raise ValueError("components event_shape disagree: {} vs {}".format(
                    dist.event_shape, dists[0].event_shape))
        batch_shape = broadcast_shape(dists)
        self.dists = dists
        self.dnum = len(dists)
        super().__init__(batch_shape, dists[0].event_shape, validate_args)

    @property
    def has_rsample(self):
        return True

    def expand(self, batch_shape):
        new_dists=[]
        for dist in self.dists:
            new_dists.append(dist.expand(batch_shape))
        return JointDistribution(new_dists)

    def sample(self, sample_shape=torch.Size()):
        samples=[]
        for dist in self.dists:
            samples.append(dist.sample(sample_shape))
        return torch.stack(samples)

    def rsample(self, sample_shape=torch.Size()):
        samples=[]
        for dist in self.dists:
            samples.append(dist.sample(sample_shape))
        return torch.stack(samples)

    def log_prob(self, value):
        log_prob=torch.tensor(0.0)
        for i in range(len(self.dists)):
            log_prob=log_prob+self.dists[i].log_prob(value[i]).sum()
        return log_prob

    def mean(self):
        means=[]
        for dist in self.dists:
            means.append(dist.mean)
        return torch.stack(means)

    def variance(self):
        variances=[]
        for dist in self.dists:
            variances.append(dist.variance)
        return torch.stack(variances)


class RandomVariable():

    plate=pyro.plate("random_variable")
    dists=[]
    samples=[]
    dist=None
    insts=[]

    def ginit():
        RandomVariable.dist=JointDistribution(RandomVariable.dists)

    def greset():
        RandomVariable.cntr=-1
        RandomVariable.gsample()

    def gsample():
        RandomVariable.cntr=RandomVariable.cntr+1
        RandomVariable.samples=pyro.sample("samples_"+str(RandomVariable.cntr),RandomVariable.dist)
        for dist in RandomVariable.insts:
            dist.event_cntr=-1

    def __init__(self,dist,name,N=120):
        self.dist=dist
        self.name=name
        self.event_cntr=-1
        self.N=N
        self.i=len(RandomVariable.dists)
        RandomVariable.dists.append(dist.expand([N]))
        RandomVariable.insts.append(self)
    
    def calc(self,event=0,time=0):
        self.event_cntr=self.event_cntr+1
        if self.event_cntr==self.N:
            RandomVariable.gsample()
        return RandomVariable.samples[self.i][int(self.event_cntr)].item()


# environment component classes


class Event():
	def __init__(self,eventSource,eventTime,eventCall,name="anonymous"):
		self.eventSource=eventSource
		self.eventTime=eventTime
		self.eventCall=eventCall
		self.name=name


class PeriodicEventSource():
	def configure(self,name,calls,rules,portevents,simulator):
		self.name=name
		self.calls=calls
		self.rules=rules
		self.portevents=portevents
		self.simulator=simulator
		ports=list(self.calls.keys())
		#iterating through ports
		for port in ports:
			pevents=self.portevents[port]
			#iterating through events
			for pevent in pevents:
				if pevent in self.rules[port] and pevent in self.calls[port]:
					rule=self.rules[port][pevent]
					self.simulator.dists.append(rule)

	def generateEvents(self):
		ports=list(self.calls.keys())
		#iterating through self.ports
		for port in ports:
			pevents=self.portevents[port]
			#iterating through events
			for pevent in pevents:
				if pevent in self.rules[port] and pevent in self.calls[port]:
					calls=self.calls[port][pevent]
					rule=self.rules[port][pevent]
					simulationtime=0.0
					ename=port+"."+pevent
					while simulationtime < simTime:
						simulationtime=simulationtime+rule.calc(port+"."+pevent,simulationtime)
						#iterating through port connections
						for call in calls:
							self.simulator.events.append(Event(self,simulationtime,call,ename))




class EventSource():
	def configure(self,name,calls,rules,portevents,simulator):
		self.name=name
		self.calls=calls
		self.rules=rules
		self.portevents=portevents
		self.simulator=simulator
		ports=list(self.calls.keys())
		
		#iterating through ports
		for port in ports:
			pevents=self.portevents[port]
			#iterating through events
			for pevent in pevents:
				if pevent in self.rules[port]:
					rule=self.rules[port][pevent]
					self.simulator.dists.append(rule)

	def generateEvents(self):
		ports=list(self.calls.keys())
		#iterating through ports
		for port in ports:
			pevents=self.portevents[port]
			#iterating through events
			for pevent in pevents:
				if pevent in self.rules[port] and pevent in self.calls[port]:
					rule=self.rules[port][pevent]
					calls=self.calls[port][pevent]
					time=rule.calc(port+"."+pevent,0.0)
					ename=port+"."+pevent
					if time>=0:
						#iterating through port connections
						for call in calls:
							self.simulator.events.append(Event(self,time,call,ename))



if168 = JClass('hu.bme.mit.gamma.stochastic.casestudy.orion.interfaces.StateMachine_Interface_For_OrionInterface$Listener$Provided')
if168_s = JClass('hu.bme.mit.gamma.stochastic.casestudy.orion.scheduling.ElementaryComponentSchedulingInterface')

@JImplements([if168,if168_s])
class SwitchStateMachine_Interface_For_Orion():

	def configure(self,name,inport,calls,portarray,categorical,simulator,compCall,shname):
		self.name=name
		self.calls=calls
		self.categorical=categorical
		self.portarray=portarray
		self.event_cntr=0
		self.events=[]
		self.inport=inport
		if inport is not None:
			inport.registerListener(self)
		compCall.registerEnvironmentComponent(shname,self)
		self.simulator=simulator
		self.simulator.dists.append(categorical)

	def generateEvents(self):
		pass



	@JOverride
	def schedule(self):
		for event in self.events:
			event.callEvent()
		self.events.clear()

	@JOverride
	def isEventQueueEmpty(self):
		return (len(self.events)==0)
	
	
	#definition of the interface functions

	@JOverride
	def raiseOrionDisconn(self,):
		port=self.portarray[int(self.categorical.calc())]
		eventcalls=self.calls[port]#["OrionDisconn"]
		self.event_cntr=self.event_cntr+1
		for call in eventcalls:
			if call is not None:
				if IESC_SYNC:
					callEvent=lambda:call.raiseOrionDisconn();
					self.events.append(Event(self,self.simulator.time,callEvent,self.port+".OrionDisconn"))
				else:
					call.raiseOrionDisconn()

	@JOverride
	def raiseOrionDisconnCause(self,):
		port=self.portarray[int(self.categorical.calc())]
		eventcalls=self.calls[port]#["OrionDisconnCause"]
		self.event_cntr=self.event_cntr+1
		for call in eventcalls:
			if call is not None:
				if IESC_SYNC:
					callEvent=lambda:call.raiseOrionDisconnCause();
					self.events.append(Event(self,self.simulator.time,callEvent,self.port+".OrionDisconnCause"))
				else:
					call.raiseOrionDisconnCause()

	@JOverride
	def raiseOrionConnReq(self,):
		port=self.portarray[int(self.categorical.calc())]
		eventcalls=self.calls[port]#["OrionConnReq"]
		self.event_cntr=self.event_cntr+1
		for call in eventcalls:
			if call is not None:
				if IESC_SYNC:
					callEvent=lambda:call.raiseOrionConnReq();
					self.events.append(Event(self,self.simulator.time,callEvent,self.port+".OrionConnReq"))
				else:
					call.raiseOrionConnReq()

	@JOverride
	def raiseOrionAppData(self,):
		port=self.portarray[int(self.categorical.calc())]
		eventcalls=self.calls[port]#["OrionAppData"]
		self.event_cntr=self.event_cntr+1
		for call in eventcalls:
			if call is not None:
				if IESC_SYNC:
					callEvent=lambda:call.raiseOrionAppData();
					self.events.append(Event(self,self.simulator.time,callEvent,self.port+".OrionAppData"))
				else:
					call.raiseOrionAppData()

	@JOverride
	def raiseOrionKeepAlive(self,):
		port=self.portarray[int(self.categorical.calc())]
		eventcalls=self.calls[port]#["OrionKeepAlive"]
		self.event_cntr=self.event_cntr+1
		for call in eventcalls:
			if call is not None:
				if IESC_SYNC:
					callEvent=lambda:call.raiseOrionKeepAlive();
					self.events.append(Event(self,self.simulator.time,callEvent,self.port+".OrionKeepAlive"))
				else:
					call.raiseOrionKeepAlive()

	@JOverride
	def raiseOrionConnConf(self,):
		port=self.portarray[int(self.categorical.calc())]
		eventcalls=self.calls[port]#["OrionConnConf"]
		self.event_cntr=self.event_cntr+1
		for call in eventcalls:
			if call is not None:
				if IESC_SYNC:
					callEvent=lambda:call.raiseOrionConnConf();
					self.events.append(Event(self,self.simulator.time,callEvent,self.port+".OrionConnConf"))
				else:
					call.raiseOrionConnConf()

	@JOverride
	def raiseOrionConnResp(self,):
		port=self.portarray[int(self.categorical.calc())]
		eventcalls=self.calls[port]#["OrionConnResp"]
		self.event_cntr=self.event_cntr+1
		for call in eventcalls:
			if call is not None:
				if IESC_SYNC:
					callEvent=lambda:call.raiseOrionConnResp();
					self.events.append(Event(self,self.simulator.time,callEvent,self.port+".OrionConnResp"))
				else:
					call.raiseOrionConnResp()
##	class Java:
#		implements = ["hu.bme.mit.gamma.stochastic.casestudy.orion.interfaces.StateMachine_Interface_For_OrionInterface$Listener$Provided"]


class StochasticEventGenerator():


	def __init__(self,detmodel):
		self.detmodel=detmodel
		self.time=0.0
		self.events=[]
		self.dists=[]
		self.min_i=0
		# create Python objects from elementary stochastic components
		self.components=dict()
		self.timerMean=torch.tensor([0.000001])
		#0
		#0
		# definition of elementary stochastic components
		
		self.components.clear()
		self.components.update({ "Orion.SubSystem1_.TimerKeepAliveReceiveTimeout_3" : PeriodicEventSource()})
		self.components.update({ "Orion.SubSystem1_.TimerKapcsolodik_2" : PeriodicEventSource()})
		self.components.update({ "Orion.SubSystem1_.TimerZarva_0" : PeriodicEventSource()})
		self.components.update({ "Orion.SubSystem1_.TimerKeepAliveSendTimeout_1" : PeriodicEventSource()})
		self.components.update({ "Orion.SubSystem1_.TimerKeepAliveReceiveTimeout_4" : PeriodicEventSource()})
		self.components.update({ "Orion.SubSystem1_.TimerKapcsolodik_3" : PeriodicEventSource()})
		self.components.update({ "Orion.SubSystem1_.TimerKeepAliveSendTimeout_0" : PeriodicEventSource()})
		self.components.update({ "Orion.SubSystem2_.TimerKeepAliveReceiveTimeout_3" : PeriodicEventSource()})
		self.components.update({ "Orion.SubSystem2_.TimerKapcsolodik_2" : PeriodicEventSource()})
		self.components.update({ "Orion.SubSystem2_.TimerZarva_0" : PeriodicEventSource()})
		self.components.update({ "Orion.SubSystem2_.TimerKeepAliveSendTimeout_1" : PeriodicEventSource()})
		self.components.update({ "Orion.SubSystem2_.TimerKeepAliveReceiveTimeout_4" : PeriodicEventSource()})
		self.components.update({ "Orion.SubSystem2_.TimerKapcsolodik_3" : PeriodicEventSource()})
		self.components.update({ "Orion.SubSystem2_.TimerKeepAliveSendTimeout_0" : PeriodicEventSource()})
		
		
		
		
		self.components.update({ "Orion.SubSystem1_.OrionSystem.System.masterSlaveChannel" : SwitchStateMachine_Interface_For_Orion()})
		self.components.update({ "Orion.SubSystem1_.OrionSystem.System.slaveMasterChannel" : SwitchStateMachine_Interface_For_Orion()})
		self.components.update({ "Orion.SubSystem2_.OrionSystem.System.masterSlaveChannel" : SwitchStateMachine_Interface_For_Orion()})
		self.components.update({ "Orion.SubSystem2_.OrionSystem.System.slaveMasterChannel" : SwitchStateMachine_Interface_For_Orion()})
		
		
		# register input interfaces of elementary stochastic components
		
		self.components["Orion.SubSystem1_.TimerKeepAliveReceiveTimeout_3"].configure(
				name  = "Orion.SubSystem1_.TimerKeepAliveReceiveTimeout_3",
				calls = {'TimoeutKeepAliveReceiveTimeout_3' : {'NewEvent' : [(lambda:self.detmodel.getOrion().getSubSystem1_().getOrionSystem().getTimoeutKeepAliveReceiveTimeout_3().raiseNewEvent())]}},
				rules = {'TimoeutKeepAliveReceiveTimeout_3' : {'NewEvent' : RandomVariable(pyro.distributions.Normal(loc=self.timerMean[0],scale=torch.tensor(0.5)),"ContRandomVarriableTimerKeepAliveReceiveTimeout_30")}},
				portevents = 	{	"TimoeutKeepAliveReceiveTimeout_3" : [ "NewEvent"	]},
				simulator=self)
				
		self.components["Orion.SubSystem1_.TimerKapcsolodik_2"].configure(
				name  = "Orion.SubSystem1_.TimerKapcsolodik_2",
				calls = {'TimeoutKapcsolodik_2' : {'NewEvent' : [(lambda:self.detmodel.getOrion().getSubSystem1_().getOrionSystem().getTimeoutKapcsolodik_2().raiseNewEvent())]}},
				rules = {'TimeoutKapcsolodik_2' : {'NewEvent' : RandomVariable(pyro.distributions.Normal(loc=self.timerMean[0],scale=torch.tensor(0.5)),"ContRandomVarriableTimerKapcsolodik_21")}},
				portevents = 	{	"TimeoutKapcsolodik_2" : [ "NewEvent"	]},
				simulator=self)
				
		self.components["Orion.SubSystem1_.TimerZarva_0"].configure(
				name  = "Orion.SubSystem1_.TimerZarva_0",
				calls = {'TimeoutZarva_0' : {'NewEvent' : [(lambda:self.detmodel.getOrion().getSubSystem1_().getOrionSystem().getTimeoutZarva_0().raiseNewEvent())]}},
				rules = {'TimeoutZarva_0' : {'NewEvent' : RandomVariable(pyro.distributions.Normal(loc=self.timerMean[0],scale=torch.tensor(0.5)),"ContRandomVarriableTimerZarva_02")}},
				portevents = 	{	"TimeoutZarva_0" : [ "NewEvent"	]},
				simulator=self)
				
		self.components["Orion.SubSystem1_.TimerKeepAliveSendTimeout_1"].configure(
				name  = "Orion.SubSystem1_.TimerKeepAliveSendTimeout_1",
				calls = {'TimeoutKeepAliveSendTimeout_1' : {'NewEvent' : [(lambda:self.detmodel.getOrion().getSubSystem1_().getOrionSystem().getTimeoutKeepAliveSendTimeout_1().raiseNewEvent())]}},
				rules = {'TimeoutKeepAliveSendTimeout_1' : {'NewEvent' : RandomVariable(pyro.distributions.Normal(loc=self.timerMean[0],scale=torch.tensor(0.5)),"ContRandomVarriableTimerKeepAliveSendTimeout_13")}},
				portevents = 	{	"TimeoutKeepAliveSendTimeout_1" : [ "NewEvent"	]},
				simulator=self)
				
		self.components["Orion.SubSystem1_.TimerKeepAliveReceiveTimeout_4"].configure(
				name  = "Orion.SubSystem1_.TimerKeepAliveReceiveTimeout_4",
				calls = {'TimeoutKeepAliveReceiveTimeout_4' : {'NewEvent' : [(lambda:self.detmodel.getOrion().getSubSystem1_().getOrionSystem().getTimeoutKeepAliveReceiveTimeout_4().raiseNewEvent())]}},
				rules = {'TimeoutKeepAliveReceiveTimeout_4' : {'NewEvent' : RandomVariable(pyro.distributions.Normal(loc=self.timerMean[0],scale=torch.tensor(0.5)),"ContRandomVarriableTimerKeepAliveReceiveTimeout_44")}},
				portevents = 	{	"TimeoutKeepAliveReceiveTimeout_4" : [ "NewEvent"	]},
				simulator=self)
				
		self.components["Orion.SubSystem1_.TimerKapcsolodik_3"].configure(
				name  = "Orion.SubSystem1_.TimerKapcsolodik_3",
				calls = {'TimeoutKapcsolodik_3' : {'NewEvent' : [(lambda:self.detmodel.getOrion().getSubSystem1_().getOrionSystem().getTimeoutKapcsolodik_3().raiseNewEvent())]}},
				rules = {'TimeoutKapcsolodik_3' : {'NewEvent' : RandomVariable(pyro.distributions.Normal(loc=self.timerMean[0],scale=torch.tensor(0.5)),"ContRandomVarriableTimerKapcsolodik_35")}},
				portevents = 	{	"TimeoutKapcsolodik_3" : [ "NewEvent"	]},
				simulator=self)
				
		self.components["Orion.SubSystem1_.TimerKeepAliveSendTimeout_0"].configure(
				name  = "Orion.SubSystem1_.TimerKeepAliveSendTimeout_0",
				calls = {'TimeoutKeepAliveSendTimeout_0' : {'NewEvent' : [(lambda:self.detmodel.getOrion().getSubSystem1_().getOrionSystem().getTimeoutKeepAliveSendTimeout_0().raiseNewEvent())]}},
				rules = {'TimeoutKeepAliveSendTimeout_0' : {'NewEvent' : RandomVariable(pyro.distributions.Normal(loc=self.timerMean[0],scale=torch.tensor(0.5)),"ContRandomVarriableTimerKeepAliveSendTimeout_06")}},
				portevents = 	{	"TimeoutKeepAliveSendTimeout_0" : [ "NewEvent"	]},
				simulator=self)
				
		self.components["Orion.SubSystem2_.TimerKeepAliveReceiveTimeout_3"].configure(
				name  = "Orion.SubSystem2_.TimerKeepAliveReceiveTimeout_3",
				calls = {'TimoeutKeepAliveReceiveTimeout_3' : {'NewEvent' : [(lambda:self.detmodel.getOrion().getSubSystem2_().getOrionSystem().getTimoeutKeepAliveReceiveTimeout_3().raiseNewEvent())]}},
				rules = {'TimoeutKeepAliveReceiveTimeout_3' : {'NewEvent' : RandomVariable(pyro.distributions.Normal(loc=self.timerMean[0],scale=torch.tensor(0.5)),"ContRandomVarriableTimerKeepAliveReceiveTimeout_37")}},
				portevents = 	{	"TimoeutKeepAliveReceiveTimeout_3" : [ "NewEvent"	]},
				simulator=self)
				
		self.components["Orion.SubSystem2_.TimerKapcsolodik_2"].configure(
				name  = "Orion.SubSystem2_.TimerKapcsolodik_2",
				calls = {'TimeoutKapcsolodik_2' : {'NewEvent' : [(lambda:self.detmodel.getOrion().getSubSystem2_().getOrionSystem().getTimeoutKapcsolodik_2().raiseNewEvent())]}},
				rules = {'TimeoutKapcsolodik_2' : {'NewEvent' : RandomVariable(pyro.distributions.Normal(loc=self.timerMean[0],scale=torch.tensor(0.5)),"ContRandomVarriableTimerKapcsolodik_28")}},
				portevents = 	{	"TimeoutKapcsolodik_2" : [ "NewEvent"	]},
				simulator=self)
				
		self.components["Orion.SubSystem2_.TimerZarva_0"].configure(
				name  = "Orion.SubSystem2_.TimerZarva_0",
				calls = {'TimeoutZarva_0' : {'NewEvent' : [(lambda:self.detmodel.getOrion().getSubSystem2_().getOrionSystem().getTimeoutZarva_0().raiseNewEvent())]}},
				rules = {'TimeoutZarva_0' : {'NewEvent' : RandomVariable(pyro.distributions.Normal(loc=self.timerMean[0],scale=torch.tensor(0.5)),"ContRandomVarriableTimerZarva_09")}},
				portevents = 	{	"TimeoutZarva_0" : [ "NewEvent"	]},
				simulator=self)
				
		self.components["Orion.SubSystem2_.TimerKeepAliveSendTimeout_1"].configure(
				name  = "Orion.SubSystem2_.TimerKeepAliveSendTimeout_1",
				calls = {'TimeoutKeepAliveSendTimeout_1' : {'NewEvent' : [(lambda:self.detmodel.getOrion().getSubSystem2_().getOrionSystem().getTimeoutKeepAliveSendTimeout_1().raiseNewEvent())]}},
				rules = {'TimeoutKeepAliveSendTimeout_1' : {'NewEvent' : RandomVariable(pyro.distributions.Normal(loc=self.timerMean[0],scale=torch.tensor(0.5)),"ContRandomVarriableTimerKeepAliveSendTimeout_110")}},
				portevents = 	{	"TimeoutKeepAliveSendTimeout_1" : [ "NewEvent"	]},
				simulator=self)
				
		self.components["Orion.SubSystem2_.TimerKeepAliveReceiveTimeout_4"].configure(
				name  = "Orion.SubSystem2_.TimerKeepAliveReceiveTimeout_4",
				calls = {'TimeoutKeepAliveReceiveTimeout_4' : {'NewEvent' : [(lambda:self.detmodel.getOrion().getSubSystem2_().getOrionSystem().getTimeoutKeepAliveReceiveTimeout_4().raiseNewEvent())]}},
				rules = {'TimeoutKeepAliveReceiveTimeout_4' : {'NewEvent' : RandomVariable(pyro.distributions.Normal(loc=self.timerMean[0],scale=torch.tensor(0.5)),"ContRandomVarriableTimerKeepAliveReceiveTimeout_411")}},
				portevents = 	{	"TimeoutKeepAliveReceiveTimeout_4" : [ "NewEvent"	]},
				simulator=self)
				
		self.components["Orion.SubSystem2_.TimerKapcsolodik_3"].configure(
				name  = "Orion.SubSystem2_.TimerKapcsolodik_3",
				calls = {'TimeoutKapcsolodik_3' : {'NewEvent' : [(lambda:self.detmodel.getOrion().getSubSystem2_().getOrionSystem().getTimeoutKapcsolodik_3().raiseNewEvent())]}},
				rules = {'TimeoutKapcsolodik_3' : {'NewEvent' : RandomVariable(pyro.distributions.Normal(loc=self.timerMean[0],scale=torch.tensor(0.5)),"ContRandomVarriableTimerKapcsolodik_312")}},
				portevents = 	{	"TimeoutKapcsolodik_3" : [ "NewEvent"	]},
				simulator=self)
				
		self.components["Orion.SubSystem2_.TimerKeepAliveSendTimeout_0"].configure(
				name  = "Orion.SubSystem2_.TimerKeepAliveSendTimeout_0",
				calls = {'TimeoutKeepAliveSendTimeout_0' : {'NewEvent' : [(lambda:self.detmodel.getOrion().getSubSystem2_().getOrionSystem().getTimeoutKeepAliveSendTimeout_0().raiseNewEvent())]}},
				rules = {'TimeoutKeepAliveSendTimeout_0' : {'NewEvent' : RandomVariable(pyro.distributions.Normal(loc=self.timerMean[0],scale=torch.tensor(0.5)),"ContRandomVarriableTimerKeepAliveSendTimeout_013")}},
				portevents = 	{	"TimeoutKeepAliveSendTimeout_0" : [ "NewEvent"	]},
				simulator=self)
				
		
		
		
		self.components["Orion.SubSystem1_.OrionSystem.System.masterSlaveChannel"].configure(
				name  = "Orion.SubSystem1_.OrionSystem.System.masterSlaveChannel",
				inport=self.detmodel.getOrion().getSubSystem1_().getOrionSystem().getSystem().getMaster().getSend_StateMachine_Port(),
				calls={'Output' : [self.detmodel.getOrion().getSubSystem1_().getOrionSystem().getSystem().getSlave().getStateMachine_Port(), ], 'Lossport' : [None]},
				portarray=["Output", "Lossport"],
				categorical=RandomVariable(dist=pyro.distributions.Categorical(torch.tensor([
						torch.tensor(0.9), 
										torch.tensor(0.1)
								])),
					name="MasterSlaveChannel14")
				,
				simulator=self,
				shname="masterSlaveChannel",
				compCall=self.detmodel.getOrion().getSubSystem1_().getOrionSystem().getSystem())
				
		self.components["Orion.SubSystem1_.OrionSystem.System.slaveMasterChannel"].configure(
				name  = "Orion.SubSystem1_.OrionSystem.System.slaveMasterChannel",
				inport=self.detmodel.getOrion().getSubSystem1_().getOrionSystem().getSystem().getSlave().getSend_StateMachine_Port(),
				calls={'Output' : [self.detmodel.getOrion().getSubSystem1_().getOrionSystem().getSystem().getMaster().getStateMachine_Port(), ], 'Lossport' : [None]},
				portarray=["Output", "Lossport"],
				categorical=RandomVariable(dist=pyro.distributions.Categorical(torch.tensor([
						torch.tensor(0.9), 
										torch.tensor(0.1)
								])),
					name="SlaveMasterChannel15")
				,
				simulator=self,
				shname="slaveMasterChannel",
				compCall=self.detmodel.getOrion().getSubSystem1_().getOrionSystem().getSystem())
				
		self.components["Orion.SubSystem2_.OrionSystem.System.masterSlaveChannel"].configure(
				name  = "Orion.SubSystem2_.OrionSystem.System.masterSlaveChannel",
				inport=self.detmodel.getOrion().getSubSystem2_().getOrionSystem().getSystem().getMaster().getSend_StateMachine_Port(),
				calls={'Output' : [self.detmodel.getOrion().getSubSystem2_().getOrionSystem().getSystem().getSlave().getStateMachine_Port(), ], 'Lossport' : [None]},
				portarray=["Output", "Lossport"],
				categorical=RandomVariable(dist=pyro.distributions.Categorical(torch.tensor([
						torch.tensor(0.9), 
										torch.tensor(0.1)
								])),
					name="MasterSlaveChannel16")
				,
				simulator=self,
				shname="masterSlaveChannel",
				compCall=self.detmodel.getOrion().getSubSystem2_().getOrionSystem().getSystem())
				
		self.components["Orion.SubSystem2_.OrionSystem.System.slaveMasterChannel"].configure(
				name  = "Orion.SubSystem2_.OrionSystem.System.slaveMasterChannel",
				inport=self.detmodel.getOrion().getSubSystem2_().getOrionSystem().getSystem().getSlave().getSend_StateMachine_Port(),
				calls={'Output' : [self.detmodel.getOrion().getSubSystem2_().getOrionSystem().getSystem().getMaster().getStateMachine_Port(), ], 'Lossport' : [None]},
				portarray=["Output", "Lossport"],
				categorical=RandomVariable(dist=pyro.distributions.Categorical(torch.tensor([
						torch.tensor(0.9), 
										torch.tensor(0.1)
								])),
					name="SlaveMasterChannel17")
				,
				simulator=self,
				shname="slaveMasterChannel",
				compCall=self.detmodel.getOrion().getSubSystem2_().getOrionSystem().getSystem())
				
		
		
		
		RandomVariable.ginit()

	def reset(self):
		self.time=0
		self.events.clear()
		self.timerMean[0]=pyro.sample("param_0",pyro.distributions.Uniform(low=torch.tensor(4.0),high=torch.tensor(20.0))).detach()
		#0
		RandomVariable.greset()
		self.detmodel.reset()
		"""self.detmodel.reset(self.timerMean#1
		)"""

	def generateEvents(self):
		for component in list(self.components.values()):
			component.generateEvents()

	# shall be called after the getEarliestTime() function
	def popEvent(self):
		event=self.events[self.min_i]
		self.events.remove(event)
		return event

	def getEarliestTime(self):
		mintime=1000000000000000.0
		min_i=0
		for i in range (len(self.events)):
			if self.events[i].eventTime<mintime:
				min_i=i
				mintime=self.events[min_i].eventTime
		self.min_i=min_i
		return mintime-self.time

def guide():
	dists=[]
	
	dists.append[RandomVariable(pyro.distributions.Normal(loc=self.timerMean[0],scale=torch.tensor(0.5)),"ContRandomVarriableTimerKeepAliveReceiveTimeout_30")]
	dists.append[RandomVariable(pyro.distributions.Normal(loc=self.timerMean[0],scale=torch.tensor(0.5)),"ContRandomVarriableTimerKapcsolodik_21")]
	dists.append[RandomVariable(pyro.distributions.Normal(loc=self.timerMean[0],scale=torch.tensor(0.5)),"ContRandomVarriableTimerZarva_02")]
	dists.append[RandomVariable(pyro.distributions.Normal(loc=self.timerMean[0],scale=torch.tensor(0.5)),"ContRandomVarriableTimerKeepAliveSendTimeout_13")]
	dists.append[RandomVariable(pyro.distributions.Normal(loc=self.timerMean[0],scale=torch.tensor(0.5)),"ContRandomVarriableTimerKeepAliveReceiveTimeout_44")]
	dists.append[RandomVariable(pyro.distributions.Normal(loc=self.timerMean[0],scale=torch.tensor(0.5)),"ContRandomVarriableTimerKapcsolodik_35")]
	dists.append[RandomVariable(pyro.distributions.Normal(loc=self.timerMean[0],scale=torch.tensor(0.5)),"ContRandomVarriableTimerKeepAliveSendTimeout_06")]
	dists.append[RandomVariable(pyro.distributions.Normal(loc=self.timerMean[0],scale=torch.tensor(0.5)),"ContRandomVarriableTimerKeepAliveReceiveTimeout_37")]
	dists.append[RandomVariable(pyro.distributions.Normal(loc=self.timerMean[0],scale=torch.tensor(0.5)),"ContRandomVarriableTimerKapcsolodik_28")]
	dists.append[RandomVariable(pyro.distributions.Normal(loc=self.timerMean[0],scale=torch.tensor(0.5)),"ContRandomVarriableTimerZarva_09")]
	dists.append[RandomVariable(pyro.distributions.Normal(loc=self.timerMean[0],scale=torch.tensor(0.5)),"ContRandomVarriableTimerKeepAliveSendTimeout_110")]
	dists.append[RandomVariable(pyro.distributions.Normal(loc=self.timerMean[0],scale=torch.tensor(0.5)),"ContRandomVarriableTimerKeepAliveReceiveTimeout_411")]
	dists.append[RandomVariable(pyro.distributions.Normal(loc=self.timerMean[0],scale=torch.tensor(0.5)),"ContRandomVarriableTimerKapcsolodik_312")]
	dists.append[RandomVariable(pyro.distributions.Normal(loc=self.timerMean[0],scale=torch.tensor(0.5)),"ContRandomVarriableTimerKeepAliveSendTimeout_013")]
	dists.append[RandomVariable(dist=pyro.distributions.Categorical(torch.tensor([
			torch.tensor(0.9), 
							torch.tensor(0.1)
					])),
		name="MasterSlaveChannel14")
	]
	dists.append[RandomVariable(dist=pyro.distributions.Categorical(torch.tensor([
			torch.tensor(0.9), 
							torch.tensor(0.1)
					])),
		name="SlaveMasterChannel15")
	]
	dists.append[RandomVariable(dist=pyro.distributions.Categorical(torch.tensor([
			torch.tensor(0.9), 
							torch.tensor(0.1)
					])),
		name="MasterSlaveChannel16")
	]
	dists.append[RandomVariable(dist=pyro.distributions.Categorical(torch.tensor([
			torch.tensor(0.9), 
							torch.tensor(0.1)
					])),
		name="SlaveMasterChannel17")
	]
	
	for dist in dists:
		dist.reset()
	# 


print("creating stochastic event generator")
stochmodel=0
try:
	stochmodel = StochasticEventGenerator(detmodel)
	print("stochastic event generator is successfully created")
except jpype.JException as ex:
		print("Caught base exception : ", str(ex))
		print(ex.stacktrace())
		shutdownJVM()
except Exception as ex:
		print("Caught python exception :", str(ex))
		traceback.print_exc()
		shutdownJVM()

def state2num(state):
	if state=="run":
		return 0.0
	else:
		return 1.0

def simulate():
		
	# global objects: stochastic event generator and deterministic evaluator
	global stochmodel, detmodel
	
	# DEBUG variables
	AspectOrion_SystemConnStatus_ConnFreq=0
	
	
	# initialize the stochastic event generator
	stochmodel.reset()
	stochmodel.generateEvents()
	
	# schedule the asynchronous component
	detmodel.getOrion().schedule()
	
	
	# run the simulator until there are stochastic events available and simulation time is not reached
	while len(stochmodel.events) > 0 and stochmodel.time <= simTime:
		

		
		# get the event with the earliest clock
		stochmodel.getEarliestTime()
		event = stochmodel.popEvent()

		
		if event.eventTime > simTime :
			break
		
		# insert the event into the deterministic evaluator
		stochmodel.time = event.eventTime
		
		# raise the event
		event.eventCall()
		
		# schedule the deterministic evaluator
		detmodel.getOrion().schedule()
		

		# evaluate end condition
		
		if detmodel.monitorOfEndConditionOrion_SystemConnStatus_Conn.state != "run":
			# print debug end condition information
			break
	
	#register the result of the analysis to the Pyro
	# register the time only if the event is raised
	if str(detmodel.monitorOfAspectOrion_SystemConnStatus_Conn.state) != "run" :
		pyro.deterministic("SystemConnStatus_conn_mt",torch.tensor(stochmodel.time))
	
	#register the conditions to the Pyro
	pyro.sample("SystemConnStatus_conn_cond_ot",pyro.distributions.Normal(loc=torch.tensor(16.0),scale=torch.tensor(1.0)), obs = torch.tensor(stochmodel.time))
	
	
	# get the aspects and return from the simulations 
	
	#return the result of the simulation
	return stochmodel.time

if __name__ == "__main__":
	try:
		
		# run inference algorithm
		inference=pyro.infer.Importance(model=simulate, num_samples=10000)
		print("run inference algorithm...")
		t0=time.time()
		inference.run()
		empirical_marginal_SystemConnStatus_conn_mt = pyro.infer.EmpiricalMarginal(inference, "SystemConnStatus_conn_mt")
		t1=time.time()
		# visualize results
		print(f"Analysis is finished in {t1-t0} s")
		print("Results of the analysis: ")
		print("Estimated SystemConnStatus_conn_mt = ",round(empirical_marginal_SystemConnStatus_conn_mt.mean.item(),4))
		print("visualize results...")
		#visualizeMarginal(inference,empirical_marginal_SystemConnStatus_conn_mt,'SystemConnStatus_conn_mt')
		plt.show()
	except java.lang.RuntimeException as ex:
		print("Caught Java runtime exception : ", str(ex))
		print(ex.stacktrace())
	except jpype.JException as ex:
		print("Caught Jpype exception : ", str(ex))
		print(ex.stacktrace())
	except Exception as err:
		print("Caught Python exception : ", err)
		traceback.print_exc()
	finally:
		print("shutting down JVM...")
		shutdownJVM()
	print ("analysis is finished successfully")




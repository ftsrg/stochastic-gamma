package dualgps_cond_2
import "interfaces"
import "gpsadapter"
import "voteradapter_p"


stochastic async ParametricDualGPS_2 (voterFailureRate : decimal) [
	port Communication : provides Sensor
]{
	component GPS1 : GPSasync
	component GPS2 : GPSasync
	component Voter : Voterasync(2)
	
	source GPS1_Failure port Faults : provides HardwareFailure {
		Faults.* : exponential rate=10.0;
	}
	source GPS2_Failure port Faults : provides HardwareFailure {
		Faults.* : exponential rate=10.0;
	}
	source Voter_Failure port Faults : provides HardwareFailure {
		Faults.* : exponential rate=voterFailureRate;
	}
	
	bind Communication -> Voter.Communication
	
	channel [GPS1_Failure.Faults] -o)- [GPS1.Faults]
	channel [GPS1.Communication] -o)- [Voter.Sensor] 
	channel [GPS2_Failure.Faults] -o)- [GPS2.Faults]
	channel [GPS2.Communication] -o)- [Voter.Sensor] 
	channel [Voter_Failure.Faults] -o)- [Voter.Faults]
	
}

analysis Reliability_Cond_2 {
in stochastic component system : ParametricDualGPS_2(sample(uniform from=2,to=10))
mean time of event system.Communication.failstop;
    @Conditions{
    	observe time event system.Communication.failstop ~ Normal(0.4,0.1)
    }
    @Configuration(ImportanceSampling){
    	end condition raised event system.Communication.failstop 
    	simulation time = 100.0
    	simulation number = 10000
    	batch sample size = 2
        joint sampling = true
    }
}
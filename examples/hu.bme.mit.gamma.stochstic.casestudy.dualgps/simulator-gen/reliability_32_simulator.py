# automatically generated probabilistic program
# generated by Gamma Composition Framework
# time of model generation: 2024-06-06T13:02:51.908443100

import pyro
import torch
import pyro.distributions as dist
import pyro.contrib.gp as gp
from pyro.distributions.torch_distribution import TorchDistribution
from pyro.distributions.util import broadcast_shape
import numpy as np

import math
from math import exp
import statistics as stats

import matplotlib.pyplot as plt
import matplotlib

# import datetime
# from influxdb import InfluxDBClient


import time
import os
import traceback
from jpype import JImplements, JOverride
from jpype import *
import jpype
import hashlib



# manually build the java code
BUILD=False
# synchronization of elementary stochastic components in synchronous composition
IESC_SYNC=False

# conversion between the time unit of elementary stochastic components and millisecond
time_conv=1.0 # 1000000000.0*60*60*1000

simTime=100.0
simNumber=10000

def visualizeMarginal(inference, marginal, name):
	sample_num=10000
	bin_num=100
	marginal_samples = torch.stack([torch.abs(marginal()) for _ in range(sample_num)])
	fig, a = plt.subplots()
	a.set_title( "Empirical marginal "+name+" (ESS:"+str(round(inference.get_ESS().item(),2))+", avg:"+str(round(marginal.mean.item(),2))+", stddev:"+str(round(marginal.variance.sqrt().item(),2))+")" )
	a.hist(marginal_samples.numpy(), color='b',bins=bin_num, density=1, label="Marginal of "+name)
	a.set_ylabel("Estimated density")
	a.set_xlabel("Value of "+name)

print('initiating Python-Java connection')

def create_detmodel():
	if BUILD:
		commands = ["""javac $(find C:\\Users\\simon\\Projects\\stochastic-gamma\\runtime-hu.bme.mit.gamma.environment.rcp.product -name "*.java")"""]
		for command in commands:
			if os.system(command) == 0:
				continue
			else:
				print( "ERROR")
				break
	startJVM("""C:\\Program Files\\Java\\jdk-20\\bin\\server\\jvm.dll""", '-ea',"""-Djava.class.path=C:\\Users\\simon\\git\\stochastic-gamma\\examples\\hu.bme.mit.gamma.stochstic.casestudy.dualgps\\bin""")
	detmodel = 0
	EntryPoint = JClass('javaenv.Reliability_32EntryPoint')
	detmodel = EntryPoint()
	print('Python-Java connection established')
	return detmodel

detmodel=create_detmodel()



# python classes of random variables and distributions
class Dataset():

	def __init__(self,dbname,ip,port,query=None,script=None):
		if query is not None:
			client = InfluxDBClient(ip, int(port), database=dbname)
			result = client.query(query)
			points = result.get_points()
			self.points=points
		elif script is not None:
			exec(script)


# stochastic model classes

class DiscreteRandomVariable():
	def __init__(self,dist,name):
		self.dist=dist
		self.name=name
		self.event_cntr=0
	def calc(self,event=0,time=0):
		self.event_cntr=self.event_cntr+1
		return pyro.sample(self.name+"_sample_"+str(self.event_cntr),self.dist).item()-1.0

class RandomVariable():
	plate=pyro.plate("random_variable")
	def __init__(self,dist,name,N=2):
		self.dist=dist
		self.name=name
		self.event_cntr=N-1
		self.meta_cntr=-1
		self.N=N
	def sampleb(self):
		return pyro.sample(self.name+"_sample_"+str(self.meta_cntr),self.dist.expand([self.N]))
	def calc(self,event=0,time=0):
		self.event_cntr=self.event_cntr+1
		if self.N>0:
			if self.event_cntr==self.N:
				self.event_cntr=0
				self.meta_cntr=self.meta_cntr+1
				with RandomVariable.plate:
					self.samples=self.sampleb()
			return self.samples[self.event_cntr].item()
		else:
			with RandomVariable.plate:
				return pyro.sample(self.name+"_sample_"+str(self.event_cntr),self.dist).item()
	def reset(self):
		self.event_cntr=-1 # self.N-1
		self.meta_cntr=0#-1
		with RandomVariable.plate:
			if self.N>0:
				self.samples=self.sampleb()


# environment component classes


class Event():
	def __init__(self,eventSource,eventTime,eventCall,name="anonymous"):
		self.eventSource=eventSource
		self.eventTime=eventTime
		self.eventCall=eventCall
		self.name=name


class PeriodicEventSource():
	def configure(self,name,calls,rules,portevents,simulator):
		self.name=name
		self.calls=calls
		self.rules=rules
		self.portevents=portevents
		self.simulator=simulator
		ports=list(self.calls.keys())
		#iterating through ports
		for port in ports:
			pevents=self.portevents[port]
			#iterating through events
			for pevent in pevents:
				if pevent in self.rules[port] and pevent in self.calls[port]:
					rule=self.rules[port][pevent]
					self.simulator.dists.append(rule)

	def generateEvents(self):
		ports=list(self.calls.keys())
		#iterating through self.ports
		for port in ports:
			pevents=self.portevents[port]
			#iterating through events
			for pevent in pevents:
				if pevent in self.rules[port] and pevent in self.calls[port]:
					calls=self.calls[port][pevent]
					rule=self.rules[port][pevent]
					simulationtime=0.0
					ename=port+"."+pevent
					while simulationtime < simTime:
						simulationtime=simulationtime+rule.calc(port+"."+pevent,simulationtime)
						#iterating through port connections
						for call in calls:
							self.simulator.events.append(Event(self,simulationtime,call,ename))




class EventSource():
	def configure(self,name,calls,rules,portevents,simulator):
		self.name=name
		self.calls=calls
		self.rules=rules
		self.portevents=portevents
		self.simulator=simulator
		ports=list(self.calls.keys())
		
		#iterating through ports
		for port in ports:
			pevents=self.portevents[port]
			#iterating through events
			for pevent in pevents:
				if pevent in self.rules[port]:
					rule=self.rules[port][pevent]
					self.simulator.dists.append(rule)

	def generateEvents(self):
		ports=list(self.calls.keys())
		#iterating through ports
		for port in ports:
			pevents=self.portevents[port]
			#iterating through events
			for pevent in pevents:
				if pevent in self.rules[port] and pevent in self.calls[port]:
					rule=self.rules[port][pevent]
					calls=self.calls[port][pevent]
					time=rule.calc(port+"."+pevent,0.0)
					ename=port+"."+pevent
					if time>=0:
						#iterating through port connections
						for call in calls:
							self.simulator.events.append(Event(self,time,call,ename))





class StochasticEventGenerator():


	def __init__(self,detmodel):
		self.detmodel=detmodel
		self.time=0.0
		self.events=[]
		self.dists=[]
		self.min_i=0
		# create Python objects from elementary stochastic components
		self.components=dict()
		#0
		# definition of elementary stochastic components
		
		self.components.clear()
		
		self.components.update({ "System.GPS1__Failure" : EventSource()})
		self.components.update({ "System.GPS2__Failure" : EventSource()})
		self.components.update({ "System.GPS3__Failure" : EventSource()})
		self.components.update({ "System.GPS4__Failure" : EventSource()})
		self.components.update({ "System.GPS5__Failure" : EventSource()})
		self.components.update({ "System.GPS6__Failure" : EventSource()})
		self.components.update({ "System.GPS7__Failure" : EventSource()})
		self.components.update({ "System.GPS8__Failure" : EventSource()})
		self.components.update({ "System.GPS9__Failure" : EventSource()})
		self.components.update({ "System.GPS10_Failure" : EventSource()})
		self.components.update({ "System.GPS11_Failure" : EventSource()})
		self.components.update({ "System.GPS12_Failure" : EventSource()})
		self.components.update({ "System.GPS13_Failure" : EventSource()})
		self.components.update({ "System.GPS14_Failure" : EventSource()})
		self.components.update({ "System.GPS15_Failure" : EventSource()})
		self.components.update({ "System.GPS16_Failure" : EventSource()})
		self.components.update({ "System.GPS17_Failure" : EventSource()})
		self.components.update({ "System.GPS18_Failure" : EventSource()})
		self.components.update({ "System.GPS19_Failure" : EventSource()})
		self.components.update({ "System.GPS20_Failure" : EventSource()})
		self.components.update({ "System.GPS21_Failure" : EventSource()})
		self.components.update({ "System.GPS22_Failure" : EventSource()})
		self.components.update({ "System.GPS23_Failure" : EventSource()})
		self.components.update({ "System.GPS24_Failure" : EventSource()})
		self.components.update({ "System.GPS25_Failure" : EventSource()})
		self.components.update({ "System.GPS26_Failure" : EventSource()})
		self.components.update({ "System.GPS27_Failure" : EventSource()})
		self.components.update({ "System.GPS28_Failure" : EventSource()})
		self.components.update({ "System.GPS29_Failure" : EventSource()})
		self.components.update({ "System.GPS30_Failure" : EventSource()})
		self.components.update({ "System.GPS31_Failure" : EventSource()})
		self.components.update({ "System.GPS32_Failure" : EventSource()})
		self.components.update({ "System.Voter_Failure" : EventSource()})
		
		
		
		
		
		# register input interfaces of elementary stochastic components
		
		
		
		self.components["System.GPS1__Failure"].configure(
				name  = "System.GPS1__Failure",
				calls = {'Faults' : {'Failure' : [(lambda:self.detmodel.getSystem().getGPS1_().getFaults().raiseFailure())]}},
				rules = {'Faults' : {'Failure' : RandomVariable(pyro.distributions.Exponential(torch.tensor(10.0)),"ContRandomVarriableGPS1__Failure0")}},
				portevents = 	{	"Faults" : [ "Failure"	]},
				simulator=self)
				
		
		self.components["System.GPS2__Failure"].configure(
				name  = "System.GPS2__Failure",
				calls = {'Faults' : {'Failure' : [(lambda:self.detmodel.getSystem().getGPS2_().getFaults().raiseFailure())]}},
				rules = {'Faults' : {'Failure' : RandomVariable(pyro.distributions.Exponential(torch.tensor(10.0)),"ContRandomVarriableGPS2__Failure1")}},
				portevents = 	{	"Faults" : [ "Failure"	]},
				simulator=self)
				
		
		self.components["System.GPS3__Failure"].configure(
				name  = "System.GPS3__Failure",
				calls = {'Faults' : {'Failure' : [(lambda:self.detmodel.getSystem().getGPS3_().getFaults().raiseFailure())]}},
				rules = {'Faults' : {'Failure' : RandomVariable(pyro.distributions.Exponential(torch.tensor(10.0)),"ContRandomVarriableGPS3__Failure2")}},
				portevents = 	{	"Faults" : [ "Failure"	]},
				simulator=self)
				
		
		self.components["System.GPS4__Failure"].configure(
				name  = "System.GPS4__Failure",
				calls = {'Faults' : {'Failure' : [(lambda:self.detmodel.getSystem().getGPS4_().getFaults().raiseFailure())]}},
				rules = {'Faults' : {'Failure' : RandomVariable(pyro.distributions.Exponential(torch.tensor(10.0)),"ContRandomVarriableGPS4__Failure3")}},
				portevents = 	{	"Faults" : [ "Failure"	]},
				simulator=self)
				
		
		self.components["System.GPS5__Failure"].configure(
				name  = "System.GPS5__Failure",
				calls = {'Faults' : {'Failure' : [(lambda:self.detmodel.getSystem().getGPS5_().getFaults().raiseFailure())]}},
				rules = {'Faults' : {'Failure' : RandomVariable(pyro.distributions.Exponential(torch.tensor(10.0)),"ContRandomVarriableGPS5__Failure4")}},
				portevents = 	{	"Faults" : [ "Failure"	]},
				simulator=self)
				
		
		self.components["System.GPS6__Failure"].configure(
				name  = "System.GPS6__Failure",
				calls = {'Faults' : {'Failure' : [(lambda:self.detmodel.getSystem().getGPS6_().getFaults().raiseFailure())]}},
				rules = {'Faults' : {'Failure' : RandomVariable(pyro.distributions.Exponential(torch.tensor(10.0)),"ContRandomVarriableGPS6__Failure5")}},
				portevents = 	{	"Faults" : [ "Failure"	]},
				simulator=self)
				
		
		self.components["System.GPS7__Failure"].configure(
				name  = "System.GPS7__Failure",
				calls = {'Faults' : {'Failure' : [(lambda:self.detmodel.getSystem().getGPS7_().getFaults().raiseFailure())]}},
				rules = {'Faults' : {'Failure' : RandomVariable(pyro.distributions.Exponential(torch.tensor(10.0)),"ContRandomVarriableGPS7__Failure6")}},
				portevents = 	{	"Faults" : [ "Failure"	]},
				simulator=self)
				
		
		self.components["System.GPS8__Failure"].configure(
				name  = "System.GPS8__Failure",
				calls = {'Faults' : {'Failure' : [(lambda:self.detmodel.getSystem().getGPS8_().getFaults().raiseFailure())]}},
				rules = {'Faults' : {'Failure' : RandomVariable(pyro.distributions.Exponential(torch.tensor(10.0)),"ContRandomVarriableGPS8__Failure7")}},
				portevents = 	{	"Faults" : [ "Failure"	]},
				simulator=self)
				
		
		self.components["System.GPS9__Failure"].configure(
				name  = "System.GPS9__Failure",
				calls = {'Faults' : {'Failure' : [(lambda:self.detmodel.getSystem().getGPS9_().getFaults().raiseFailure())]}},
				rules = {'Faults' : {'Failure' : RandomVariable(pyro.distributions.Exponential(torch.tensor(10.0)),"ContRandomVarriableGPS9__Failure8")}},
				portevents = 	{	"Faults" : [ "Failure"	]},
				simulator=self)
				
		
		self.components["System.GPS10_Failure"].configure(
				name  = "System.GPS10_Failure",
				calls = {'Faults' : {'Failure' : [(lambda:self.detmodel.getSystem().getGPS10().getFaults().raiseFailure())]}},
				rules = {'Faults' : {'Failure' : RandomVariable(pyro.distributions.Exponential(torch.tensor(10.0)),"ContRandomVarriableGPS10_Failure9")}},
				portevents = 	{	"Faults" : [ "Failure"	]},
				simulator=self)
				
		
		self.components["System.GPS11_Failure"].configure(
				name  = "System.GPS11_Failure",
				calls = {'Faults' : {'Failure' : [(lambda:self.detmodel.getSystem().getGPS11().getFaults().raiseFailure())]}},
				rules = {'Faults' : {'Failure' : RandomVariable(pyro.distributions.Exponential(torch.tensor(10.0)),"ContRandomVarriableGPS11_Failure10")}},
				portevents = 	{	"Faults" : [ "Failure"	]},
				simulator=self)
				
		
		self.components["System.GPS12_Failure"].configure(
				name  = "System.GPS12_Failure",
				calls = {'Faults' : {'Failure' : [(lambda:self.detmodel.getSystem().getGPS12().getFaults().raiseFailure())]}},
				rules = {'Faults' : {'Failure' : RandomVariable(pyro.distributions.Exponential(torch.tensor(10.0)),"ContRandomVarriableGPS12_Failure11")}},
				portevents = 	{	"Faults" : [ "Failure"	]},
				simulator=self)
				
		
		self.components["System.GPS13_Failure"].configure(
				name  = "System.GPS13_Failure",
				calls = {'Faults' : {'Failure' : [(lambda:self.detmodel.getSystem().getGPS13().getFaults().raiseFailure())]}},
				rules = {'Faults' : {'Failure' : RandomVariable(pyro.distributions.Exponential(torch.tensor(10.0)),"ContRandomVarriableGPS13_Failure12")}},
				portevents = 	{	"Faults" : [ "Failure"	]},
				simulator=self)
				
		
		self.components["System.GPS14_Failure"].configure(
				name  = "System.GPS14_Failure",
				calls = {'Faults' : {'Failure' : [(lambda:self.detmodel.getSystem().getGPS14().getFaults().raiseFailure())]}},
				rules = {'Faults' : {'Failure' : RandomVariable(pyro.distributions.Exponential(torch.tensor(10.0)),"ContRandomVarriableGPS14_Failure13")}},
				portevents = 	{	"Faults" : [ "Failure"	]},
				simulator=self)
				
		
		self.components["System.GPS15_Failure"].configure(
				name  = "System.GPS15_Failure",
				calls = {'Faults' : {'Failure' : [(lambda:self.detmodel.getSystem().getGPS15().getFaults().raiseFailure())]}},
				rules = {'Faults' : {'Failure' : RandomVariable(pyro.distributions.Exponential(torch.tensor(10.0)),"ContRandomVarriableGPS15_Failure14")}},
				portevents = 	{	"Faults" : [ "Failure"	]},
				simulator=self)
				
		
		self.components["System.GPS16_Failure"].configure(
				name  = "System.GPS16_Failure",
				calls = {'Faults' : {'Failure' : [(lambda:self.detmodel.getSystem().getGPS16().getFaults().raiseFailure())]}},
				rules = {'Faults' : {'Failure' : RandomVariable(pyro.distributions.Exponential(torch.tensor(10.0)),"ContRandomVarriableGPS16_Failure15")}},
				portevents = 	{	"Faults" : [ "Failure"	]},
				simulator=self)
				
		
		self.components["System.GPS17_Failure"].configure(
				name  = "System.GPS17_Failure",
				calls = {'Faults' : {'Failure' : [(lambda:self.detmodel.getSystem().getGPS17().getFaults().raiseFailure())]}},
				rules = {'Faults' : {'Failure' : RandomVariable(pyro.distributions.Exponential(torch.tensor(10.0)),"ContRandomVarriableGPS17_Failure16")}},
				portevents = 	{	"Faults" : [ "Failure"	]},
				simulator=self)
				
		
		self.components["System.GPS18_Failure"].configure(
				name  = "System.GPS18_Failure",
				calls = {'Faults' : {'Failure' : [(lambda:self.detmodel.getSystem().getGPS18().getFaults().raiseFailure())]}},
				rules = {'Faults' : {'Failure' : RandomVariable(pyro.distributions.Exponential(torch.tensor(10.0)),"ContRandomVarriableGPS18_Failure17")}},
				portevents = 	{	"Faults" : [ "Failure"	]},
				simulator=self)
				
		
		self.components["System.GPS19_Failure"].configure(
				name  = "System.GPS19_Failure",
				calls = {'Faults' : {'Failure' : [(lambda:self.detmodel.getSystem().getGPS19().getFaults().raiseFailure())]}},
				rules = {'Faults' : {'Failure' : RandomVariable(pyro.distributions.Exponential(torch.tensor(10.0)),"ContRandomVarriableGPS19_Failure18")}},
				portevents = 	{	"Faults" : [ "Failure"	]},
				simulator=self)
				
		
		self.components["System.GPS20_Failure"].configure(
				name  = "System.GPS20_Failure",
				calls = {'Faults' : {'Failure' : [(lambda:self.detmodel.getSystem().getGPS20().getFaults().raiseFailure())]}},
				rules = {'Faults' : {'Failure' : RandomVariable(pyro.distributions.Exponential(torch.tensor(10.0)),"ContRandomVarriableGPS20_Failure19")}},
				portevents = 	{	"Faults" : [ "Failure"	]},
				simulator=self)
				
		
		self.components["System.GPS21_Failure"].configure(
				name  = "System.GPS21_Failure",
				calls = {'Faults' : {'Failure' : [(lambda:self.detmodel.getSystem().getGPS21().getFaults().raiseFailure())]}},
				rules = {'Faults' : {'Failure' : RandomVariable(pyro.distributions.Exponential(torch.tensor(10.0)),"ContRandomVarriableGPS21_Failure20")}},
				portevents = 	{	"Faults" : [ "Failure"	]},
				simulator=self)
				
		
		self.components["System.GPS22_Failure"].configure(
				name  = "System.GPS22_Failure",
				calls = {'Faults' : {'Failure' : [(lambda:self.detmodel.getSystem().getGPS22().getFaults().raiseFailure())]}},
				rules = {'Faults' : {'Failure' : RandomVariable(pyro.distributions.Exponential(torch.tensor(10.0)),"ContRandomVarriableGPS22_Failure21")}},
				portevents = 	{	"Faults" : [ "Failure"	]},
				simulator=self)
				
		
		self.components["System.GPS23_Failure"].configure(
				name  = "System.GPS23_Failure",
				calls = {'Faults' : {'Failure' : [(lambda:self.detmodel.getSystem().getGPS23().getFaults().raiseFailure())]}},
				rules = {'Faults' : {'Failure' : RandomVariable(pyro.distributions.Exponential(torch.tensor(10.0)),"ContRandomVarriableGPS23_Failure22")}},
				portevents = 	{	"Faults" : [ "Failure"	]},
				simulator=self)
				
		
		self.components["System.GPS24_Failure"].configure(
				name  = "System.GPS24_Failure",
				calls = {'Faults' : {'Failure' : [(lambda:self.detmodel.getSystem().getGPS24().getFaults().raiseFailure())]}},
				rules = {'Faults' : {'Failure' : RandomVariable(pyro.distributions.Exponential(torch.tensor(10.0)),"ContRandomVarriableGPS24_Failure23")}},
				portevents = 	{	"Faults" : [ "Failure"	]},
				simulator=self)
				
		
		self.components["System.GPS25_Failure"].configure(
				name  = "System.GPS25_Failure",
				calls = {'Faults' : {'Failure' : [(lambda:self.detmodel.getSystem().getGPS25().getFaults().raiseFailure())]}},
				rules = {'Faults' : {'Failure' : RandomVariable(pyro.distributions.Exponential(torch.tensor(10.0)),"ContRandomVarriableGPS25_Failure24")}},
				portevents = 	{	"Faults" : [ "Failure"	]},
				simulator=self)
				
		
		self.components["System.GPS26_Failure"].configure(
				name  = "System.GPS26_Failure",
				calls = {'Faults' : {'Failure' : [(lambda:self.detmodel.getSystem().getGPS26().getFaults().raiseFailure())]}},
				rules = {'Faults' : {'Failure' : RandomVariable(pyro.distributions.Exponential(torch.tensor(10.0)),"ContRandomVarriableGPS26_Failure25")}},
				portevents = 	{	"Faults" : [ "Failure"	]},
				simulator=self)
				
		
		self.components["System.GPS27_Failure"].configure(
				name  = "System.GPS27_Failure",
				calls = {'Faults' : {'Failure' : [(lambda:self.detmodel.getSystem().getGPS27().getFaults().raiseFailure())]}},
				rules = {'Faults' : {'Failure' : RandomVariable(pyro.distributions.Exponential(torch.tensor(10.0)),"ContRandomVarriableGPS27_Failure26")}},
				portevents = 	{	"Faults" : [ "Failure"	]},
				simulator=self)
				
		
		self.components["System.GPS28_Failure"].configure(
				name  = "System.GPS28_Failure",
				calls = {'Faults' : {'Failure' : [(lambda:self.detmodel.getSystem().getGPS28().getFaults().raiseFailure())]}},
				rules = {'Faults' : {'Failure' : RandomVariable(pyro.distributions.Exponential(torch.tensor(10.0)),"ContRandomVarriableGPS28_Failure27")}},
				portevents = 	{	"Faults" : [ "Failure"	]},
				simulator=self)
				
		
		self.components["System.GPS29_Failure"].configure(
				name  = "System.GPS29_Failure",
				calls = {'Faults' : {'Failure' : [(lambda:self.detmodel.getSystem().getGPS29().getFaults().raiseFailure())]}},
				rules = {'Faults' : {'Failure' : RandomVariable(pyro.distributions.Exponential(torch.tensor(10.0)),"ContRandomVarriableGPS29_Failure28")}},
				portevents = 	{	"Faults" : [ "Failure"	]},
				simulator=self)
				
		
		self.components["System.GPS30_Failure"].configure(
				name  = "System.GPS30_Failure",
				calls = {'Faults' : {'Failure' : [(lambda:self.detmodel.getSystem().getGPS30().getFaults().raiseFailure())]}},
				rules = {'Faults' : {'Failure' : RandomVariable(pyro.distributions.Exponential(torch.tensor(10.0)),"ContRandomVarriableGPS30_Failure29")}},
				portevents = 	{	"Faults" : [ "Failure"	]},
				simulator=self)
				
		
		self.components["System.GPS31_Failure"].configure(
				name  = "System.GPS31_Failure",
				calls = {'Faults' : {'Failure' : [(lambda:self.detmodel.getSystem().getGPS31().getFaults().raiseFailure())]}},
				rules = {'Faults' : {'Failure' : RandomVariable(pyro.distributions.Exponential(torch.tensor(10.0)),"ContRandomVarriableGPS31_Failure30")}},
				portevents = 	{	"Faults" : [ "Failure"	]},
				simulator=self)
				
		
		self.components["System.GPS32_Failure"].configure(
				name  = "System.GPS32_Failure",
				calls = {'Faults' : {'Failure' : [(lambda:self.detmodel.getSystem().getGPS32().getFaults().raiseFailure())]}},
				rules = {'Faults' : {'Failure' : RandomVariable(pyro.distributions.Exponential(torch.tensor(10.0)),"ContRandomVarriableGPS32_Failure31")}},
				portevents = 	{	"Faults" : [ "Failure"	]},
				simulator=self)
				
		
		self.components["System.Voter_Failure"].configure(
				name  = "System.Voter_Failure",
				calls = {'Faults' : {'Failure' : [(lambda:self.detmodel.getSystem().getVoter().getFaults().raiseFailure())]}},
				rules = {'Faults' : {'Failure' : RandomVariable(pyro.distributions.Exponential(torch.tensor(20.0)),"ContRandomVarriableVoter_Failure32")}},
				portevents = 	{	"Faults" : [ "Failure"	]},
				simulator=self)
				
		
		
		
		
		

	def reset(self):
		self.time=0
		self.events.clear()
		for i in pyro.plate("initial_samples",len(self.dists)):
			self.dists[i].reset()
		self.detmodel.reset()
		"""self.detmodel.reset()"""

	def generateEvents(self):
		for component in list(self.components.values()):
			component.generateEvents()

	# shall be called after the getEarliestTime() function
	def popEvent(self):
		event=self.events[self.min_i]
		self.events.remove(event)
		return event

	def getEarliestTime(self):
		mintime=1000000000000000.0
		min_i=0
		for i in range (len(self.events)):
			if self.events[i].eventTime<mintime:
				min_i=i
				mintime=self.events[min_i].eventTime
		self.min_i=min_i
		return mintime-self.time

def guide():
	dists=[]
	
	dists.append[RandomVariable(pyro.distributions.Exponential(torch.tensor(10.0)),"ContRandomVarriableGPS1__Failure0")]
	dists.append[RandomVariable(pyro.distributions.Exponential(torch.tensor(10.0)),"ContRandomVarriableGPS2__Failure1")]
	dists.append[RandomVariable(pyro.distributions.Exponential(torch.tensor(10.0)),"ContRandomVarriableGPS3__Failure2")]
	dists.append[RandomVariable(pyro.distributions.Exponential(torch.tensor(10.0)),"ContRandomVarriableGPS4__Failure3")]
	dists.append[RandomVariable(pyro.distributions.Exponential(torch.tensor(10.0)),"ContRandomVarriableGPS5__Failure4")]
	dists.append[RandomVariable(pyro.distributions.Exponential(torch.tensor(10.0)),"ContRandomVarriableGPS6__Failure5")]
	dists.append[RandomVariable(pyro.distributions.Exponential(torch.tensor(10.0)),"ContRandomVarriableGPS7__Failure6")]
	dists.append[RandomVariable(pyro.distributions.Exponential(torch.tensor(10.0)),"ContRandomVarriableGPS8__Failure7")]
	dists.append[RandomVariable(pyro.distributions.Exponential(torch.tensor(10.0)),"ContRandomVarriableGPS9__Failure8")]
	dists.append[RandomVariable(pyro.distributions.Exponential(torch.tensor(10.0)),"ContRandomVarriableGPS10_Failure9")]
	dists.append[RandomVariable(pyro.distributions.Exponential(torch.tensor(10.0)),"ContRandomVarriableGPS11_Failure10")]
	dists.append[RandomVariable(pyro.distributions.Exponential(torch.tensor(10.0)),"ContRandomVarriableGPS12_Failure11")]
	dists.append[RandomVariable(pyro.distributions.Exponential(torch.tensor(10.0)),"ContRandomVarriableGPS13_Failure12")]
	dists.append[RandomVariable(pyro.distributions.Exponential(torch.tensor(10.0)),"ContRandomVarriableGPS14_Failure13")]
	dists.append[RandomVariable(pyro.distributions.Exponential(torch.tensor(10.0)),"ContRandomVarriableGPS15_Failure14")]
	dists.append[RandomVariable(pyro.distributions.Exponential(torch.tensor(10.0)),"ContRandomVarriableGPS16_Failure15")]
	dists.append[RandomVariable(pyro.distributions.Exponential(torch.tensor(10.0)),"ContRandomVarriableGPS17_Failure16")]
	dists.append[RandomVariable(pyro.distributions.Exponential(torch.tensor(10.0)),"ContRandomVarriableGPS18_Failure17")]
	dists.append[RandomVariable(pyro.distributions.Exponential(torch.tensor(10.0)),"ContRandomVarriableGPS19_Failure18")]
	dists.append[RandomVariable(pyro.distributions.Exponential(torch.tensor(10.0)),"ContRandomVarriableGPS20_Failure19")]
	dists.append[RandomVariable(pyro.distributions.Exponential(torch.tensor(10.0)),"ContRandomVarriableGPS21_Failure20")]
	dists.append[RandomVariable(pyro.distributions.Exponential(torch.tensor(10.0)),"ContRandomVarriableGPS22_Failure21")]
	dists.append[RandomVariable(pyro.distributions.Exponential(torch.tensor(10.0)),"ContRandomVarriableGPS23_Failure22")]
	dists.append[RandomVariable(pyro.distributions.Exponential(torch.tensor(10.0)),"ContRandomVarriableGPS24_Failure23")]
	dists.append[RandomVariable(pyro.distributions.Exponential(torch.tensor(10.0)),"ContRandomVarriableGPS25_Failure24")]
	dists.append[RandomVariable(pyro.distributions.Exponential(torch.tensor(10.0)),"ContRandomVarriableGPS26_Failure25")]
	dists.append[RandomVariable(pyro.distributions.Exponential(torch.tensor(10.0)),"ContRandomVarriableGPS27_Failure26")]
	dists.append[RandomVariable(pyro.distributions.Exponential(torch.tensor(10.0)),"ContRandomVarriableGPS28_Failure27")]
	dists.append[RandomVariable(pyro.distributions.Exponential(torch.tensor(10.0)),"ContRandomVarriableGPS29_Failure28")]
	dists.append[RandomVariable(pyro.distributions.Exponential(torch.tensor(10.0)),"ContRandomVarriableGPS30_Failure29")]
	dists.append[RandomVariable(pyro.distributions.Exponential(torch.tensor(10.0)),"ContRandomVarriableGPS31_Failure30")]
	dists.append[RandomVariable(pyro.distributions.Exponential(torch.tensor(10.0)),"ContRandomVarriableGPS32_Failure31")]
	dists.append[RandomVariable(pyro.distributions.Exponential(torch.tensor(20.0)),"ContRandomVarriableVoter_Failure32")]
	
	for dist in dists:
		dist.reset()
	# 


print("creating stochastic event generator")
stochmodel=0
try:
	stochmodel = StochasticEventGenerator(detmodel)
	print("stochastic event generator is successfully created")
except jpype.JException as ex:
		print("Caught base exception : ", str(ex))
		print(ex.stacktrace())
		shutdownJVM()
except Exception as ex:
		print("Caught python exception :", str(ex))
		traceback.print_exc()
		shutdownJVM()

def state2num(state):
	if state=="run":
		return 0.0
	else:
		return 1.0

def simulate():
		
	# global objects: stochastic event generator and deterministic evaluator
	global stochmodel, detmodel
	
	# DEBUG variables
	AspectSystem_Communication_FailstopFreq=0
	
	
	# initialize the stochastic event generator
	stochmodel.reset()
	stochmodel.generateEvents()
	
	# schedule the asynchronous component
	detmodel.getSystem().schedule()
	
	
	# run the simulator until there are stochastic events available and simulation time is not reached
	while len(stochmodel.events) > 0 and stochmodel.time <= simTime:
		

		
		# get the event with the earliest clock
		stochmodel.getEarliestTime()
		event = stochmodel.popEvent()

		
		if event.eventTime > simTime :
			break
		
		# insert the event into the deterministic evaluator
		stochmodel.time = event.eventTime
		
		# raise the event
		event.eventCall()
		
		# schedule the deterministic evaluator
		detmodel.getSystem().schedule()
		

		# evaluate end condition
		
		if detmodel.monitorOfEndConditionSystem_Communication_Failstop.state != "run":
			# print debug end condition information
			break
	
	#register the result of the analysis to the Pyro
	# register the time only if the event is raised
	if str(detmodel.monitorOfAspectSystem_Communication_Failstop.state) != "run" :
		pyro.deterministic("Communication_failstop_mt",torch.tensor(stochmodel.time))
	
	#register the conditions to the Pyro
	
	
	# get the aspects and return from the simulations 
	
	#return the result of the simulation
	return stochmodel.time

if __name__ == "__main__":
	try:
		# run simulation sampling
		
		print("Run simulation analysis...")
		t0=time.time()
		data_Communication_failstop_mt =  []
		for i in range(10000):
			Communication_failstop_mt=simulate()
			data_Communication_failstop_mt.append(Communication_failstop_mt)
		t1=time.time()
		# visualize results
		print(f"Analysis is finished in {t1-t0} s")
		print("Results of the analysis: ")
		print("Estimated Communication_failstop_mt = ",round(stats.mean(data_Communication_failstop_mt),4))
		print("visualize results...")
		#visualizeMarginal(inference,empirical_marginal_Communication_failstop_mt,'Communication_failstop_mt')
		plt.show()
	except java.lang.RuntimeException as ex:
		print("Caught Java runtime exception : ", str(ex))
		print(ex.stacktrace())
	except jpype.JException as ex:
		print("Caught Jpype exception : ", str(ex))
		print(ex.stacktrace())
	except Exception as err:
		print("Caught Python exception : ", err)
		traceback.print_exc()
	finally:
		print("shutting down JVM...")
		shutdownJVM()
	print ("analysis is finished successfully")




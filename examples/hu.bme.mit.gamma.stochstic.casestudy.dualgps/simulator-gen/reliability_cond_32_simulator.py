# automatically generated probabilistic program
# generated by Gamma Composition Framework
# time of model generation: 2024-05-11T10:47:22.243537900

import pyro
import torch
import pyro.distributions as dist
import pyro.contrib.gp as gp
from pyro.distributions.torch_distribution import TorchDistribution
from pyro.distributions.util import broadcast_shape
import numpy as np

import math
from math import exp
import statistics as stats

import matplotlib.pyplot as plt
import matplotlib

# import datetime
# from influxdb import InfluxDBClient


import time
import os
import traceback
from jpype import JImplements, JOverride
from jpype import *
import jpype
import hashlib



# manually build the java code
BUILD=False
# synchronization of elementary stochastic components in synchronous composition
IESC_SYNC=False

# conversion between the time unit of elementary stochastic components and millisecond
time_conv=1.0 # 1000000000.0*60*60*1000

simTime=100.0
simNumber=10000

def visualizeMarginal(inference, marginal, name):
	sample_num=10000
	bin_num=100
	marginal_samples = torch.stack([torch.abs(marginal()) for _ in range(sample_num)])
	fig, a = plt.subplots()
	a.set_title( "Empirical marginal "+name+" (ESS:"+str(round(inference.get_ESS().item(),2))+", avg:"+str(round(marginal.mean.item(),2))+", stddev:"+str(round(marginal.variance.sqrt().item(),2))+")" )
	a.hist(marginal_samples.numpy(), color='b',bins=bin_num, density=1, label="Marginal of "+name)
	a.set_ylabel("Estimated density")
	a.set_xlabel("Value of "+name)

print('initiating Python-Java connection')

def create_detmodel():
	if BUILD:
		commands = ["""javac $(find C:\\Users\\simon\\Projects\\stochastic-gamma\\runtime-hu.bme.mit.gamma.environment.rcp.product -name "*.java")"""]
		for command in commands:
			if os.system(command) == 0:
				continue
			else:
				print( "ERROR")
				break
	startJVM("""C:\\Program Files\\Java\\jdk-20\\bin\\server\\jvm.dll""", '-ea',"""-Djava.class.path=C:\\Users\\simon\\git\\stochastic-gamma\\examples\\hu.bme.mit.gamma.stochstic.casestudy.dualgps\\bin""")
	detmodel = 0
	EntryPoint = JClass('javaenv.Reliability_Cond_32EntryPoint')
	detmodel = EntryPoint()
	print('Python-Java connection established')
	return detmodel

detmodel=create_detmodel()



# python classes of random variables and distributions
class Dataset():

	def __init__(self,dbname,ip,port,query=None,script=None):
		if query is not None:
			client = InfluxDBClient(ip, int(port), database=dbname)
			result = client.query(query)
			points = result.get_points()
			self.points=points
		elif script is not None:
			exec(script)


# stochastic model classes

class DiscreteRandomVariable():
	def __init__(self,dist,name):
		self.dist=dist
		self.name=name
		self.event_cntr=0
	def calc(self,event=0,time=0):
		self.event_cntr=self.event_cntr+1
		return pyro.sample(self.name+"_sample_"+str(self.event_cntr),self.dist).item()-1.0

class JointDistribution(TorchDistribution):

    arg_constraints = {}  # nothing can be constrained

    def __init__(self, dists, validate_args=None):
        for dist in dists:
            if dist.event_shape != dists[0].event_shape:
                raise ValueError("components event_shape disagree: {} vs {}".format(
                    dist.event_shape, dists[0].event_shape))
        batch_shape = broadcast_shape(dists)
        self.dists = dists
        self.dnum = len(dists)
        super().__init__(batch_shape, dists[0].event_shape, validate_args)

    @property
    def has_rsample(self):
        return True

    def expand(self, batch_shape):
        new_dists=[]
        for dist in self.dists:
            new_dists.append(dist.expand(batch_shape))
        return JointDistribution(new_dists)

    def sample(self, sample_shape=torch.Size()):
        samples=[]
        for dist in self.dists:
            samples.append(dist.sample(sample_shape))
        return torch.stack(samples)

    def rsample(self, sample_shape=torch.Size()):
        samples=[]
        for dist in self.dists:
            samples.append(dist.sample(sample_shape))
        return torch.stack(samples)

    def log_prob(self, value):
        log_prob=torch.tensor(0.0)
        for i in range(len(self.dists)):
            log_prob=log_prob+self.dists[i].log_prob(value[i]).sum()
        return log_prob

    def mean(self):
        means=[]
        for dist in self.dists:
            means.append(dist.mean)
        return torch.stack(means)

    def variance(self):
        variances=[]
        for dist in self.dists:
            variances.append(dist.variance)
        return torch.stack(variances)


class RandomVariable():

    plate=pyro.plate("random_variable")
    dists=[]
    samples=[]
    dist=None
    insts=[]

    def ginit():
        RandomVariable.dist=JointDistribution(RandomVariable.dists)

    def greset():
        RandomVariable.cntr=-1
        RandomVariable.gsample()

    def gsample():
        RandomVariable.cntr=RandomVariable.cntr+1
        RandomVariable.samples=pyro.sample("samples_"+str(RandomVariable.cntr),RandomVariable.dist)
        for dist in RandomVariable.insts:
            dist.event_cntr=-1

    def __init__(self,dist,name,N=2):
        self.dist=dist
        self.name=name
        self.event_cntr=-1
        self.N=N
        self.i=len(RandomVariable.dists)
        RandomVariable.dists.append(dist.expand([N]))
        RandomVariable.insts.append(self)
    
    def calc(self,event=0,time=0):
        self.event_cntr=self.event_cntr+1
        if self.event_cntr==self.N:
            RandomVariable.gsample()
        return RandomVariable.samples[self.i][int(self.event_cntr)].item()


# environment component classes


class Event():
	def __init__(self,eventSource,eventTime,eventCall,name="anonymous"):
		self.eventSource=eventSource
		self.eventTime=eventTime
		self.eventCall=eventCall
		self.name=name


class PeriodicEventSource():
	def configure(self,name,calls,rules,portevents,simulator):
		self.name=name
		self.calls=calls
		self.rules=rules
		self.portevents=portevents
		self.simulator=simulator
		ports=list(self.calls.keys())
		#iterating through ports
		for port in ports:
			pevents=self.portevents[port]
			#iterating through events
			for pevent in pevents:
				if pevent in self.rules[port] and pevent in self.calls[port]:
					rule=self.rules[port][pevent]
					self.simulator.dists.append(rule)

	def generateEvents(self):
		ports=list(self.calls.keys())
		#iterating through self.ports
		for port in ports:
			pevents=self.portevents[port]
			#iterating through events
			for pevent in pevents:
				if pevent in self.rules[port] and pevent in self.calls[port]:
					calls=self.calls[port][pevent]
					rule=self.rules[port][pevent]
					simulationtime=0.0
					ename=port+"."+pevent
					while simulationtime < simTime:
						simulationtime=simulationtime+rule.calc(port+"."+pevent,simulationtime)
						#iterating through port connections
						for call in calls:
							self.simulator.events.append(Event(self,simulationtime,call,ename))




class EventSource():
	def configure(self,name,calls,rules,portevents,simulator):
		self.name=name
		self.calls=calls
		self.rules=rules
		self.portevents=portevents
		self.simulator=simulator
		ports=list(self.calls.keys())
		
		#iterating through ports
		for port in ports:
			pevents=self.portevents[port]
			#iterating through events
			for pevent in pevents:
				if pevent in self.rules[port]:
					rule=self.rules[port][pevent]
					self.simulator.dists.append(rule)

	def generateEvents(self):
		ports=list(self.calls.keys())
		#iterating through ports
		for port in ports:
			pevents=self.portevents[port]
			#iterating through events
			for pevent in pevents:
				if pevent in self.rules[port] and pevent in self.calls[port]:
					rule=self.rules[port][pevent]
					calls=self.calls[port][pevent]
					time=rule.calc(port+"."+pevent,0.0)
					ename=port+"."+pevent
					if time>=0:
						#iterating through port connections
						for call in calls:
							self.simulator.events.append(Event(self,time,call,ename))





class StochasticEventGenerator():


	def __init__(self,detmodel):
		self.detmodel=detmodel
		self.time=0.0
		self.events=[]
		self.dists=[]
		self.min_i=0
		# create Python objects from elementary stochastic components
		self.components=dict()
		self.voterFailureRate=torch.tensor([0.000001])
		#0
		#0
		# definition of elementary stochastic components
		
		self.components.clear()
		
		self.components.update({ "System.GPS1_Failure" : EventSource()})
		self.components.update({ "System.GPS2_Failure" : EventSource()})
		self.components.update({ "System.GPS3_Failure" : EventSource()})
		self.components.update({ "System.GPS4_Failure" : EventSource()})
		self.components.update({ "System.GPS5_Failure" : EventSource()})
		self.components.update({ "System.GPS6_Failure" : EventSource()})
		self.components.update({ "System.GPS7_Failure" : EventSource()})
		self.components.update({ "System.GPS8_Failure" : EventSource()})
		self.components.update({ "System.GPS9_Failure" : EventSource()})
		self.components.update({ "System.GPS10Failure" : EventSource()})
		self.components.update({ "System.GPS11Failure" : EventSource()})
		self.components.update({ "System.GPS12Failure" : EventSource()})
		self.components.update({ "System.GPS13Failure" : EventSource()})
		self.components.update({ "System.GPS14Failure" : EventSource()})
		self.components.update({ "System.GPS15Failure" : EventSource()})
		self.components.update({ "System.GPS16Failure" : EventSource()})
		self.components.update({ "System.GPS17Failure" : EventSource()})
		self.components.update({ "System.GPS18Failure" : EventSource()})
		self.components.update({ "System.GPS19Failure" : EventSource()})
		self.components.update({ "System.GPS20Failure" : EventSource()})
		self.components.update({ "System.GPS21Failure" : EventSource()})
		self.components.update({ "System.GPS22Failure" : EventSource()})
		self.components.update({ "System.GPS23Failure" : EventSource()})
		self.components.update({ "System.GPS24Failure" : EventSource()})
		self.components.update({ "System.GPS25Failure" : EventSource()})
		self.components.update({ "System.GPS26Failure" : EventSource()})
		self.components.update({ "System.GPS27Failure" : EventSource()})
		self.components.update({ "System.GPS28Failure" : EventSource()})
		self.components.update({ "System.GPS29Failure" : EventSource()})
		self.components.update({ "System.GPS30Failure" : EventSource()})
		self.components.update({ "System.GPS31Failure" : EventSource()})
		self.components.update({ "System.GPS32Failure" : EventSource()})
		self.components.update({ "System.Voter_Failure" : EventSource()})
		
		
		
		
		
		# register input interfaces of elementary stochastic components
		
		
		
		self.components["System.GPS1_Failure"].configure(
				name  = "System.GPS1_Failure",
				calls = {'Faults' : {'Failure' : [(lambda:self.detmodel.getSystem().getGPS1_().getFaults().raiseFailure())]}},
				rules = {'Faults' : {'Failure' : RandomVariable(pyro.distributions.Exponential(torch.tensor(10.0)),"ContRandomVarriableGPS1_Failure0")}},
				portevents = 	{	"Faults" : [ "Failure"	]},
				simulator=self)
				
		
		self.components["System.GPS2_Failure"].configure(
				name  = "System.GPS2_Failure",
				calls = {'Faults' : {'Failure' : [(lambda:self.detmodel.getSystem().getGPS2_().getFaults().raiseFailure())]}},
				rules = {'Faults' : {'Failure' : RandomVariable(pyro.distributions.Exponential(torch.tensor(10.0)),"ContRandomVarriableGPS2_Failure1")}},
				portevents = 	{	"Faults" : [ "Failure"	]},
				simulator=self)
				
		
		self.components["System.GPS3_Failure"].configure(
				name  = "System.GPS3_Failure",
				calls = {'Faults' : {'Failure' : [(lambda:self.detmodel.getSystem().getGPS3_().getFaults().raiseFailure())]}},
				rules = {'Faults' : {'Failure' : RandomVariable(pyro.distributions.Exponential(torch.tensor(10.0)),"ContRandomVarriableGPS3_Failure2")}},
				portevents = 	{	"Faults" : [ "Failure"	]},
				simulator=self)
				
		
		self.components["System.GPS4_Failure"].configure(
				name  = "System.GPS4_Failure",
				calls = {'Faults' : {'Failure' : [(lambda:self.detmodel.getSystem().getGPS4_().getFaults().raiseFailure())]}},
				rules = {'Faults' : {'Failure' : RandomVariable(pyro.distributions.Exponential(torch.tensor(10.0)),"ContRandomVarriableGPS4_Failure3")}},
				portevents = 	{	"Faults" : [ "Failure"	]},
				simulator=self)
				
		
		self.components["System.GPS5_Failure"].configure(
				name  = "System.GPS5_Failure",
				calls = {'Faults' : {'Failure' : [(lambda:self.detmodel.getSystem().getGPS5_().getFaults().raiseFailure())]}},
				rules = {'Faults' : {'Failure' : RandomVariable(pyro.distributions.Exponential(torch.tensor(10.0)),"ContRandomVarriableGPS5_Failure4")}},
				portevents = 	{	"Faults" : [ "Failure"	]},
				simulator=self)
				
		
		self.components["System.GPS6_Failure"].configure(
				name  = "System.GPS6_Failure",
				calls = {'Faults' : {'Failure' : [(lambda:self.detmodel.getSystem().getGPS6_().getFaults().raiseFailure())]}},
				rules = {'Faults' : {'Failure' : RandomVariable(pyro.distributions.Exponential(torch.tensor(10.0)),"ContRandomVarriableGPS6_Failure5")}},
				portevents = 	{	"Faults" : [ "Failure"	]},
				simulator=self)
				
		
		self.components["System.GPS7_Failure"].configure(
				name  = "System.GPS7_Failure",
				calls = {'Faults' : {'Failure' : [(lambda:self.detmodel.getSystem().getGPS7_().getFaults().raiseFailure())]}},
				rules = {'Faults' : {'Failure' : RandomVariable(pyro.distributions.Exponential(torch.tensor(10.0)),"ContRandomVarriableGPS7_Failure6")}},
				portevents = 	{	"Faults" : [ "Failure"	]},
				simulator=self)
				
		
		self.components["System.GPS8_Failure"].configure(
				name  = "System.GPS8_Failure",
				calls = {'Faults' : {'Failure' : [(lambda:self.detmodel.getSystem().getGPS8_().getFaults().raiseFailure())]}},
				rules = {'Faults' : {'Failure' : RandomVariable(pyro.distributions.Exponential(torch.tensor(10.0)),"ContRandomVarriableGPS8_Failure7")}},
				portevents = 	{	"Faults" : [ "Failure"	]},
				simulator=self)
				
		
		self.components["System.GPS9_Failure"].configure(
				name  = "System.GPS9_Failure",
				calls = {'Faults' : {'Failure' : [(lambda:self.detmodel.getSystem().getGPS9_().getFaults().raiseFailure())]}},
				rules = {'Faults' : {'Failure' : RandomVariable(pyro.distributions.Exponential(torch.tensor(10.0)),"ContRandomVarriableGPS9_Failure8")}},
				portevents = 	{	"Faults" : [ "Failure"	]},
				simulator=self)
				
		
		self.components["System.GPS10Failure"].configure(
				name  = "System.GPS10Failure",
				calls = {'Faults' : {'Failure' : [(lambda:self.detmodel.getSystem().getGPS10().getFaults().raiseFailure())]}},
				rules = {'Faults' : {'Failure' : RandomVariable(pyro.distributions.Exponential(torch.tensor(10.0)),"ContRandomVarriableGPS10Failure9")}},
				portevents = 	{	"Faults" : [ "Failure"	]},
				simulator=self)
				
		
		self.components["System.GPS11Failure"].configure(
				name  = "System.GPS11Failure",
				calls = {'Faults' : {'Failure' : [(lambda:self.detmodel.getSystem().getGPS11().getFaults().raiseFailure())]}},
				rules = {'Faults' : {'Failure' : RandomVariable(pyro.distributions.Exponential(torch.tensor(10.0)),"ContRandomVarriableGPS11Failure10")}},
				portevents = 	{	"Faults" : [ "Failure"	]},
				simulator=self)
				
		
		self.components["System.GPS12Failure"].configure(
				name  = "System.GPS12Failure",
				calls = {'Faults' : {'Failure' : [(lambda:self.detmodel.getSystem().getGPS12().getFaults().raiseFailure())]}},
				rules = {'Faults' : {'Failure' : RandomVariable(pyro.distributions.Exponential(torch.tensor(10.0)),"ContRandomVarriableGPS12Failure11")}},
				portevents = 	{	"Faults" : [ "Failure"	]},
				simulator=self)
				
		
		self.components["System.GPS13Failure"].configure(
				name  = "System.GPS13Failure",
				calls = {'Faults' : {'Failure' : [(lambda:self.detmodel.getSystem().getGPS13().getFaults().raiseFailure())]}},
				rules = {'Faults' : {'Failure' : RandomVariable(pyro.distributions.Exponential(torch.tensor(10.0)),"ContRandomVarriableGPS13Failure12")}},
				portevents = 	{	"Faults" : [ "Failure"	]},
				simulator=self)
				
		
		self.components["System.GPS14Failure"].configure(
				name  = "System.GPS14Failure",
				calls = {'Faults' : {'Failure' : [(lambda:self.detmodel.getSystem().getGPS14().getFaults().raiseFailure())]}},
				rules = {'Faults' : {'Failure' : RandomVariable(pyro.distributions.Exponential(torch.tensor(10.0)),"ContRandomVarriableGPS14Failure13")}},
				portevents = 	{	"Faults" : [ "Failure"	]},
				simulator=self)
				
		
		self.components["System.GPS15Failure"].configure(
				name  = "System.GPS15Failure",
				calls = {'Faults' : {'Failure' : [(lambda:self.detmodel.getSystem().getGPS15().getFaults().raiseFailure())]}},
				rules = {'Faults' : {'Failure' : RandomVariable(pyro.distributions.Exponential(torch.tensor(10.0)),"ContRandomVarriableGPS15Failure14")}},
				portevents = 	{	"Faults" : [ "Failure"	]},
				simulator=self)
				
		
		self.components["System.GPS16Failure"].configure(
				name  = "System.GPS16Failure",
				calls = {'Faults' : {'Failure' : [(lambda:self.detmodel.getSystem().getGPS16().getFaults().raiseFailure())]}},
				rules = {'Faults' : {'Failure' : RandomVariable(pyro.distributions.Exponential(torch.tensor(10.0)),"ContRandomVarriableGPS16Failure15")}},
				portevents = 	{	"Faults" : [ "Failure"	]},
				simulator=self)
				
		
		self.components["System.GPS17Failure"].configure(
				name  = "System.GPS17Failure",
				calls = {'Faults' : {'Failure' : [(lambda:self.detmodel.getSystem().getGPS17().getFaults().raiseFailure())]}},
				rules = {'Faults' : {'Failure' : RandomVariable(pyro.distributions.Exponential(torch.tensor(10.0)),"ContRandomVarriableGPS17Failure16")}},
				portevents = 	{	"Faults" : [ "Failure"	]},
				simulator=self)
				
		
		self.components["System.GPS18Failure"].configure(
				name  = "System.GPS18Failure",
				calls = {'Faults' : {'Failure' : [(lambda:self.detmodel.getSystem().getGPS18().getFaults().raiseFailure())]}},
				rules = {'Faults' : {'Failure' : RandomVariable(pyro.distributions.Exponential(torch.tensor(10.0)),"ContRandomVarriableGPS18Failure17")}},
				portevents = 	{	"Faults" : [ "Failure"	]},
				simulator=self)
				
		
		self.components["System.GPS19Failure"].configure(
				name  = "System.GPS19Failure",
				calls = {'Faults' : {'Failure' : [(lambda:self.detmodel.getSystem().getGPS19().getFaults().raiseFailure())]}},
				rules = {'Faults' : {'Failure' : RandomVariable(pyro.distributions.Exponential(torch.tensor(10.0)),"ContRandomVarriableGPS19Failure18")}},
				portevents = 	{	"Faults" : [ "Failure"	]},
				simulator=self)
				
		
		self.components["System.GPS20Failure"].configure(
				name  = "System.GPS20Failure",
				calls = {'Faults' : {'Failure' : [(lambda:self.detmodel.getSystem().getGPS20().getFaults().raiseFailure())]}},
				rules = {'Faults' : {'Failure' : RandomVariable(pyro.distributions.Exponential(torch.tensor(10.0)),"ContRandomVarriableGPS20Failure19")}},
				portevents = 	{	"Faults" : [ "Failure"	]},
				simulator=self)
				
		
		self.components["System.GPS21Failure"].configure(
				name  = "System.GPS21Failure",
				calls = {'Faults' : {'Failure' : [(lambda:self.detmodel.getSystem().getGPS21().getFaults().raiseFailure())]}},
				rules = {'Faults' : {'Failure' : RandomVariable(pyro.distributions.Exponential(torch.tensor(10.0)),"ContRandomVarriableGPS21Failure20")}},
				portevents = 	{	"Faults" : [ "Failure"	]},
				simulator=self)
				
		
		self.components["System.GPS22Failure"].configure(
				name  = "System.GPS22Failure",
				calls = {'Faults' : {'Failure' : [(lambda:self.detmodel.getSystem().getGPS22().getFaults().raiseFailure())]}},
				rules = {'Faults' : {'Failure' : RandomVariable(pyro.distributions.Exponential(torch.tensor(10.0)),"ContRandomVarriableGPS22Failure21")}},
				portevents = 	{	"Faults" : [ "Failure"	]},
				simulator=self)
				
		
		self.components["System.GPS23Failure"].configure(
				name  = "System.GPS23Failure",
				calls = {'Faults' : {'Failure' : [(lambda:self.detmodel.getSystem().getGPS23().getFaults().raiseFailure())]}},
				rules = {'Faults' : {'Failure' : RandomVariable(pyro.distributions.Exponential(torch.tensor(10.0)),"ContRandomVarriableGPS23Failure22")}},
				portevents = 	{	"Faults" : [ "Failure"	]},
				simulator=self)
				
		
		self.components["System.GPS24Failure"].configure(
				name  = "System.GPS24Failure",
				calls = {'Faults' : {'Failure' : [(lambda:self.detmodel.getSystem().getGPS24().getFaults().raiseFailure())]}},
				rules = {'Faults' : {'Failure' : RandomVariable(pyro.distributions.Exponential(torch.tensor(10.0)),"ContRandomVarriableGPS24Failure23")}},
				portevents = 	{	"Faults" : [ "Failure"	]},
				simulator=self)
				
		
		self.components["System.GPS25Failure"].configure(
				name  = "System.GPS25Failure",
				calls = {'Faults' : {'Failure' : [(lambda:self.detmodel.getSystem().getGPS25().getFaults().raiseFailure())]}},
				rules = {'Faults' : {'Failure' : RandomVariable(pyro.distributions.Exponential(torch.tensor(10.0)),"ContRandomVarriableGPS25Failure24")}},
				portevents = 	{	"Faults" : [ "Failure"	]},
				simulator=self)
				
		
		self.components["System.GPS26Failure"].configure(
				name  = "System.GPS26Failure",
				calls = {'Faults' : {'Failure' : [(lambda:self.detmodel.getSystem().getGPS26().getFaults().raiseFailure())]}},
				rules = {'Faults' : {'Failure' : RandomVariable(pyro.distributions.Exponential(torch.tensor(10.0)),"ContRandomVarriableGPS26Failure25")}},
				portevents = 	{	"Faults" : [ "Failure"	]},
				simulator=self)
				
		
		self.components["System.GPS27Failure"].configure(
				name  = "System.GPS27Failure",
				calls = {'Faults' : {'Failure' : [(lambda:self.detmodel.getSystem().getGPS27().getFaults().raiseFailure())]}},
				rules = {'Faults' : {'Failure' : RandomVariable(pyro.distributions.Exponential(torch.tensor(10.0)),"ContRandomVarriableGPS27Failure26")}},
				portevents = 	{	"Faults" : [ "Failure"	]},
				simulator=self)
				
		
		self.components["System.GPS28Failure"].configure(
				name  = "System.GPS28Failure",
				calls = {'Faults' : {'Failure' : [(lambda:self.detmodel.getSystem().getGPS28().getFaults().raiseFailure())]}},
				rules = {'Faults' : {'Failure' : RandomVariable(pyro.distributions.Exponential(torch.tensor(10.0)),"ContRandomVarriableGPS28Failure27")}},
				portevents = 	{	"Faults" : [ "Failure"	]},
				simulator=self)
				
		
		self.components["System.GPS29Failure"].configure(
				name  = "System.GPS29Failure",
				calls = {'Faults' : {'Failure' : [(lambda:self.detmodel.getSystem().getGPS29().getFaults().raiseFailure())]}},
				rules = {'Faults' : {'Failure' : RandomVariable(pyro.distributions.Exponential(torch.tensor(10.0)),"ContRandomVarriableGPS29Failure28")}},
				portevents = 	{	"Faults" : [ "Failure"	]},
				simulator=self)
				
		
		self.components["System.GPS30Failure"].configure(
				name  = "System.GPS30Failure",
				calls = {'Faults' : {'Failure' : [(lambda:self.detmodel.getSystem().getGPS30().getFaults().raiseFailure())]}},
				rules = {'Faults' : {'Failure' : RandomVariable(pyro.distributions.Exponential(torch.tensor(10.0)),"ContRandomVarriableGPS30Failure29")}},
				portevents = 	{	"Faults" : [ "Failure"	]},
				simulator=self)
				
		
		self.components["System.GPS31Failure"].configure(
				name  = "System.GPS31Failure",
				calls = {'Faults' : {'Failure' : [(lambda:self.detmodel.getSystem().getGPS31().getFaults().raiseFailure())]}},
				rules = {'Faults' : {'Failure' : RandomVariable(pyro.distributions.Exponential(torch.tensor(10.0)),"ContRandomVarriableGPS31Failure30")}},
				portevents = 	{	"Faults" : [ "Failure"	]},
				simulator=self)
				
		
		self.components["System.GPS32Failure"].configure(
				name  = "System.GPS32Failure",
				calls = {'Faults' : {'Failure' : [(lambda:self.detmodel.getSystem().getGPS32().getFaults().raiseFailure())]}},
				rules = {'Faults' : {'Failure' : RandomVariable(pyro.distributions.Exponential(torch.tensor(10.0)),"ContRandomVarriableGPS32Failure31")}},
				portevents = 	{	"Faults" : [ "Failure"	]},
				simulator=self)
				
		
		self.components["System.Voter_Failure"].configure(
				name  = "System.Voter_Failure",
				calls = {'Faults' : {'Failure' : [(lambda:self.detmodel.getSystem().getVoter().getFaults().raiseFailure())]}},
				rules = {'Faults' : {'Failure' : RandomVariable(pyro.distributions.Exponential(self.voterFailureRate[0]),"ContRandomVarriableVoter_Failure32")}},
				portevents = 	{	"Faults" : [ "Failure"	]},
				simulator=self)
				
		
		
		
		
		
		RandomVariable.ginit()

	def reset(self):
		self.time=0
		self.events.clear()
		self.voterFailureRate[0]=pyro.sample("param_0",pyro.distributions.Uniform(low=torch.tensor(2.0),high=torch.tensor(10.0))).detach()
		#0
		RandomVariable.greset()
		self.detmodel.reset()
		"""self.detmodel.reset(self.voterFailureRate#1
		)"""

	def generateEvents(self):
		for component in list(self.components.values()):
			component.generateEvents()

	# shall be called after the getEarliestTime() function
	def popEvent(self):
		event=self.events[self.min_i]
		self.events.remove(event)
		return event

	def getEarliestTime(self):
		mintime=1000000000000000.0
		min_i=0
		for i in range (len(self.events)):
			if self.events[i].eventTime<mintime:
				min_i=i
				mintime=self.events[min_i].eventTime
		self.min_i=min_i
		return mintime-self.time

def guide():
	dists=[]
	
	dists.append[RandomVariable(pyro.distributions.Exponential(torch.tensor(10.0)),"ContRandomVarriableGPS1_Failure0")]
	dists.append[RandomVariable(pyro.distributions.Exponential(torch.tensor(10.0)),"ContRandomVarriableGPS2_Failure1")]
	dists.append[RandomVariable(pyro.distributions.Exponential(torch.tensor(10.0)),"ContRandomVarriableGPS3_Failure2")]
	dists.append[RandomVariable(pyro.distributions.Exponential(torch.tensor(10.0)),"ContRandomVarriableGPS4_Failure3")]
	dists.append[RandomVariable(pyro.distributions.Exponential(torch.tensor(10.0)),"ContRandomVarriableGPS5_Failure4")]
	dists.append[RandomVariable(pyro.distributions.Exponential(torch.tensor(10.0)),"ContRandomVarriableGPS6_Failure5")]
	dists.append[RandomVariable(pyro.distributions.Exponential(torch.tensor(10.0)),"ContRandomVarriableGPS7_Failure6")]
	dists.append[RandomVariable(pyro.distributions.Exponential(torch.tensor(10.0)),"ContRandomVarriableGPS8_Failure7")]
	dists.append[RandomVariable(pyro.distributions.Exponential(torch.tensor(10.0)),"ContRandomVarriableGPS9_Failure8")]
	dists.append[RandomVariable(pyro.distributions.Exponential(torch.tensor(10.0)),"ContRandomVarriableGPS10Failure9")]
	dists.append[RandomVariable(pyro.distributions.Exponential(torch.tensor(10.0)),"ContRandomVarriableGPS11Failure10")]
	dists.append[RandomVariable(pyro.distributions.Exponential(torch.tensor(10.0)),"ContRandomVarriableGPS12Failure11")]
	dists.append[RandomVariable(pyro.distributions.Exponential(torch.tensor(10.0)),"ContRandomVarriableGPS13Failure12")]
	dists.append[RandomVariable(pyro.distributions.Exponential(torch.tensor(10.0)),"ContRandomVarriableGPS14Failure13")]
	dists.append[RandomVariable(pyro.distributions.Exponential(torch.tensor(10.0)),"ContRandomVarriableGPS15Failure14")]
	dists.append[RandomVariable(pyro.distributions.Exponential(torch.tensor(10.0)),"ContRandomVarriableGPS16Failure15")]
	dists.append[RandomVariable(pyro.distributions.Exponential(torch.tensor(10.0)),"ContRandomVarriableGPS17Failure16")]
	dists.append[RandomVariable(pyro.distributions.Exponential(torch.tensor(10.0)),"ContRandomVarriableGPS18Failure17")]
	dists.append[RandomVariable(pyro.distributions.Exponential(torch.tensor(10.0)),"ContRandomVarriableGPS19Failure18")]
	dists.append[RandomVariable(pyro.distributions.Exponential(torch.tensor(10.0)),"ContRandomVarriableGPS20Failure19")]
	dists.append[RandomVariable(pyro.distributions.Exponential(torch.tensor(10.0)),"ContRandomVarriableGPS21Failure20")]
	dists.append[RandomVariable(pyro.distributions.Exponential(torch.tensor(10.0)),"ContRandomVarriableGPS22Failure21")]
	dists.append[RandomVariable(pyro.distributions.Exponential(torch.tensor(10.0)),"ContRandomVarriableGPS23Failure22")]
	dists.append[RandomVariable(pyro.distributions.Exponential(torch.tensor(10.0)),"ContRandomVarriableGPS24Failure23")]
	dists.append[RandomVariable(pyro.distributions.Exponential(torch.tensor(10.0)),"ContRandomVarriableGPS25Failure24")]
	dists.append[RandomVariable(pyro.distributions.Exponential(torch.tensor(10.0)),"ContRandomVarriableGPS26Failure25")]
	dists.append[RandomVariable(pyro.distributions.Exponential(torch.tensor(10.0)),"ContRandomVarriableGPS27Failure26")]
	dists.append[RandomVariable(pyro.distributions.Exponential(torch.tensor(10.0)),"ContRandomVarriableGPS28Failure27")]
	dists.append[RandomVariable(pyro.distributions.Exponential(torch.tensor(10.0)),"ContRandomVarriableGPS29Failure28")]
	dists.append[RandomVariable(pyro.distributions.Exponential(torch.tensor(10.0)),"ContRandomVarriableGPS30Failure29")]
	dists.append[RandomVariable(pyro.distributions.Exponential(torch.tensor(10.0)),"ContRandomVarriableGPS31Failure30")]
	dists.append[RandomVariable(pyro.distributions.Exponential(torch.tensor(10.0)),"ContRandomVarriableGPS32Failure31")]
	dists.append[RandomVariable(pyro.distributions.Exponential(self.voterFailureRate[0]),"ContRandomVarriableVoter_Failure32")]
	
	for dist in dists:
		dist.reset()
	# 


print("creating stochastic event generator")
stochmodel=0
try:
	stochmodel = StochasticEventGenerator(detmodel)
	print("stochastic event generator is successfully created")
except jpype.JException as ex:
		print("Caught base exception : ", str(ex))
		print(ex.stacktrace())
		shutdownJVM()
except Exception as ex:
		print("Caught python exception :", str(ex))
		traceback.print_exc()
		shutdownJVM()

def state2num(state):
	if state=="run":
		return 0.0
	else:
		return 1.0

def simulate():
		
	# global objects: stochastic event generator and deterministic evaluator
	global stochmodel, detmodel
	
	# DEBUG variables
	AspectSystem_Communication_FailstopFreq=0
	
	
	# initialize the stochastic event generator
	stochmodel.reset()
	stochmodel.generateEvents()
	
	# schedule the asynchronous component
	detmodel.getSystem().schedule()
	
	
	# run the simulator until there are stochastic events available and simulation time is not reached
	while len(stochmodel.events) > 0 and stochmodel.time <= simTime:
		

		
		# get the event with the earliest clock
		stochmodel.getEarliestTime()
		event = stochmodel.popEvent()

		
		if event.eventTime > simTime :
			break
		
		# insert the event into the deterministic evaluator
		stochmodel.time = event.eventTime
		
		# raise the event
		event.eventCall()
		
		# schedule the deterministic evaluator
		detmodel.getSystem().schedule()
		

		# evaluate end condition
		
		if detmodel.monitorOfEndConditionSystem_Communication_Failstop.state != "run":
			# print debug end condition information
			break
	
	#register the result of the analysis to the Pyro
	# register the time only if the event is raised
	if str(detmodel.monitorOfAspectSystem_Communication_Failstop.state) != "run" :
		pyro.deterministic("Communication_failstop_mt",torch.tensor(stochmodel.time))
	
	#register the conditions to the Pyro
	pyro.sample("Communication_failstop_cond_ot",pyro.distributions.Normal(loc=torch.tensor(0.4),scale=torch.tensor(0.1)), obs = torch.tensor(stochmodel.time))
	
	
	# get the aspects and return from the simulations 
	
	#return the result of the simulation
	return stochmodel.time

if __name__ == "__main__":
	try:
		
		# run inference algorithm
		inference=pyro.infer.Importance(model=simulate, num_samples=10000)
		print("run inference algorithm...")
		t0=time.time()
		inference.run()
		empirical_marginal_Communication_failstop_mt = pyro.infer.EmpiricalMarginal(inference, "Communication_failstop_mt")
		t1=time.time()
		# visualize results
		print(f"Analysis is finished in {t1-t0} s")
		print("Results of the analysis: ")
		print("Estimated Communication_failstop_mt = ",round(empirical_marginal_Communication_failstop_mt.mean.item(),4))
		print("visualize results...")
		#visualizeMarginal(inference,empirical_marginal_Communication_failstop_mt,'Communication_failstop_mt')
		plt.show()
	except java.lang.RuntimeException as ex:
		print("Caught Java runtime exception : ", str(ex))
		print(ex.stacktrace())
	except jpype.JException as ex:
		print("Caught Jpype exception : ", str(ex))
		print(ex.stacktrace())
	except Exception as err:
		print("Caught Python exception : ", err)
		traceback.print_exc()
	finally:
		print("shutting down JVM...")
		shutdownJVM()
	print ("analysis is finished successfully")




/*
 * generated by Xtext 2.23.0.M1
 */
package hu.bme.mit.gamma.fmeda.language.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class FMEDALanguageGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class PackageDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.gamma.fmeda.language.FMEDALanguage.PackageDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPackageKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cComponentsAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cComponentsFMEDAComponentDefParserRuleCall_2_0_0 = (RuleCall)cComponentsAssignment_2_0.eContents().get(0);
		private final Assignment cDiagnosticsAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final RuleCall cDiagnosticsFMEDADiagnosticsParserRuleCall_2_1_0 = (RuleCall)cDiagnosticsAssignment_2_1.eContents().get(0);
		private final Assignment cInterfacesAssignment_2_2 = (Assignment)cAlternatives_2.eContents().get(2);
		private final RuleCall cInterfacesInterfaceDefParserRuleCall_2_2_0 = (RuleCall)cInterfacesAssignment_2_2.eContents().get(0);
		
		//PackageDef FMEDAModel::Package:
		//	'package' name=ID (components+=FMEDAComponentDef | diagnostics+=FMEDADiagnostics | interfaces+=InterfaceDef)*;
		@Override public ParserRule getRule() { return rule; }
		
		//'package' name=ID (components+=FMEDAComponentDef | diagnostics+=FMEDADiagnostics | interfaces+=InterfaceDef)*
		public Group getGroup() { return cGroup; }
		
		//'package'
		public Keyword getPackageKeyword_0() { return cPackageKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//(components+=FMEDAComponentDef | diagnostics+=FMEDADiagnostics | interfaces+=InterfaceDef)*
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//components+=FMEDAComponentDef
		public Assignment getComponentsAssignment_2_0() { return cComponentsAssignment_2_0; }
		
		//FMEDAComponentDef
		public RuleCall getComponentsFMEDAComponentDefParserRuleCall_2_0_0() { return cComponentsFMEDAComponentDefParserRuleCall_2_0_0; }
		
		//diagnostics+=FMEDADiagnostics
		public Assignment getDiagnosticsAssignment_2_1() { return cDiagnosticsAssignment_2_1; }
		
		//FMEDADiagnostics
		public RuleCall getDiagnosticsFMEDADiagnosticsParserRuleCall_2_1_0() { return cDiagnosticsFMEDADiagnosticsParserRuleCall_2_1_0; }
		
		//interfaces+=InterfaceDef
		public Assignment getInterfacesAssignment_2_2() { return cInterfacesAssignment_2_2; }
		
		//InterfaceDef
		public RuleCall getInterfacesInterfaceDefParserRuleCall_2_2_0() { return cInterfacesInterfaceDefParserRuleCall_2_2_0; }
	}
	public class FMEDAComponentDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.gamma.fmeda.language.FMEDALanguage.FMEDAComponentDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFmedaKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cComponentKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftSquareBracketKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cPortsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cPortsPortParserRuleCall_3_1_0 = (RuleCall)cPortsAssignment_3_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Alternatives cAlternatives_5 = (Alternatives)cGroup.eContents().get(5);
		private final Assignment cFailuremodesAssignment_5_0 = (Assignment)cAlternatives_5.eContents().get(0);
		private final RuleCall cFailuremodesFailureModeDefParserRuleCall_5_0_0 = (RuleCall)cFailuremodesAssignment_5_0.eContents().get(0);
		private final Assignment cFailuremodesAssignment_5_1 = (Assignment)cAlternatives_5.eContents().get(1);
		private final RuleCall cFailuremodesPartFailureModeDefParserRuleCall_5_1_0 = (RuleCall)cFailuremodesAssignment_5_1.eContents().get(0);
		private final Assignment cSubcomponentsAssignment_5_2 = (Assignment)cAlternatives_5.eContents().get(2);
		private final RuleCall cSubcomponentsFMEDAComponentInstanceParserRuleCall_5_2_0 = (RuleCall)cSubcomponentsAssignment_5_2.eContents().get(0);
		private final Assignment cFailurepropagationsAssignment_5_3 = (Assignment)cAlternatives_5.eContents().get(3);
		private final RuleCall cFailurepropagationsFailurePropagationDefParserRuleCall_5_3_0 = (RuleCall)cFailurepropagationsAssignment_5_3.eContents().get(0);
		private final Assignment cChannelsAssignment_5_4 = (Assignment)cAlternatives_5.eContents().get(4);
		private final RuleCall cChannelsChannelParserRuleCall_5_4_0 = (RuleCall)cChannelsAssignment_5_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//FMEDAComponentDef FMEDAModel::FMEDAComponent:
		//	"fmeda" "component" name=ID ("["
		//	ports+=Port*
		//	"]")?
		//	"{" (failuremodes+=FailureModeDef | failuremodes+=PartFailureModeDef | subcomponents+=FMEDAComponentInstance |
		//	failurepropagations+=FailurePropagationDef | channels+=Channel)*
		//	"}";
		@Override public ParserRule getRule() { return rule; }
		
		//"fmeda" "component" name=ID ("[" ports+=Port* "]")? "{" (failuremodes+=FailureModeDef | failuremodes+=PartFailureModeDef
		//| subcomponents+=FMEDAComponentInstance | failurepropagations+=FailurePropagationDef | channels+=Channel)* "}"
		public Group getGroup() { return cGroup; }
		
		//"fmeda"
		public Keyword getFmedaKeyword_0() { return cFmedaKeyword_0; }
		
		//"component"
		public Keyword getComponentKeyword_1() { return cComponentKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//("[" ports+=Port* "]")?
		public Group getGroup_3() { return cGroup_3; }
		
		//"["
		public Keyword getLeftSquareBracketKeyword_3_0() { return cLeftSquareBracketKeyword_3_0; }
		
		//ports+=Port*
		public Assignment getPortsAssignment_3_1() { return cPortsAssignment_3_1; }
		
		//Port
		public RuleCall getPortsPortParserRuleCall_3_1_0() { return cPortsPortParserRuleCall_3_1_0; }
		
		//"]"
		public Keyword getRightSquareBracketKeyword_3_2() { return cRightSquareBracketKeyword_3_2; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }
		
		//(failuremodes+=FailureModeDef | failuremodes+=PartFailureModeDef | subcomponents+=FMEDAComponentInstance |
		//failurepropagations+=FailurePropagationDef | channels+=Channel)*
		public Alternatives getAlternatives_5() { return cAlternatives_5; }
		
		//failuremodes+=FailureModeDef
		public Assignment getFailuremodesAssignment_5_0() { return cFailuremodesAssignment_5_0; }
		
		//FailureModeDef
		public RuleCall getFailuremodesFailureModeDefParserRuleCall_5_0_0() { return cFailuremodesFailureModeDefParserRuleCall_5_0_0; }
		
		//failuremodes+=PartFailureModeDef
		public Assignment getFailuremodesAssignment_5_1() { return cFailuremodesAssignment_5_1; }
		
		//PartFailureModeDef
		public RuleCall getFailuremodesPartFailureModeDefParserRuleCall_5_1_0() { return cFailuremodesPartFailureModeDefParserRuleCall_5_1_0; }
		
		//subcomponents+=FMEDAComponentInstance
		public Assignment getSubcomponentsAssignment_5_2() { return cSubcomponentsAssignment_5_2; }
		
		//FMEDAComponentInstance
		public RuleCall getSubcomponentsFMEDAComponentInstanceParserRuleCall_5_2_0() { return cSubcomponentsFMEDAComponentInstanceParserRuleCall_5_2_0; }
		
		//failurepropagations+=FailurePropagationDef
		public Assignment getFailurepropagationsAssignment_5_3() { return cFailurepropagationsAssignment_5_3; }
		
		//FailurePropagationDef
		public RuleCall getFailurepropagationsFailurePropagationDefParserRuleCall_5_3_0() { return cFailurepropagationsFailurePropagationDefParserRuleCall_5_3_0; }
		
		//channels+=Channel
		public Assignment getChannelsAssignment_5_4() { return cChannelsAssignment_5_4; }
		
		//Channel
		public RuleCall getChannelsChannelParserRuleCall_5_4_0() { return cChannelsChannelParserRuleCall_5_4_0; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class InterfaceDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.gamma.fmeda.language.FMEDALanguage.InterfaceDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cInterfaceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cFailuremodesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cFailuremodesFailureModeDefParserRuleCall_3_0 = (RuleCall)cFailuremodesAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//InterfaceDef FMEDAModel::Interface:
		//	"interface" name=ID "{"
		//	failuremodes+=FailureModeDef+
		//	"}";
		@Override public ParserRule getRule() { return rule; }
		
		//"interface" name=ID "{" failuremodes+=FailureModeDef+ "}"
		public Group getGroup() { return cGroup; }
		
		//"interface"
		public Keyword getInterfaceKeyword_0() { return cInterfaceKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//failuremodes+=FailureModeDef+
		public Assignment getFailuremodesAssignment_3() { return cFailuremodesAssignment_3; }
		
		//FailureModeDef
		public RuleCall getFailuremodesFailureModeDefParserRuleCall_3_0() { return cFailuremodesFailureModeDefParserRuleCall_3_0; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class PortElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.gamma.fmeda.language.FMEDALanguage.Port");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPortKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cTypeInterfaceCrossReference_3_0 = (CrossReference)cTypeAssignment_3.eContents().get(0);
		private final RuleCall cTypeInterfaceIDTerminalRuleCall_3_0_1 = (RuleCall)cTypeInterfaceCrossReference_3_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Port FMEDAModel::Port:
		//	"port" name=ID ":" type=[FMEDAModel::Interface] ";";
		@Override public ParserRule getRule() { return rule; }
		
		//"port" name=ID ":" type=[FMEDAModel::Interface] ";"
		public Group getGroup() { return cGroup; }
		
		//"port"
		public Keyword getPortKeyword_0() { return cPortKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//type=[FMEDAModel::Interface]
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }
		
		//[FMEDAModel::Interface]
		public CrossReference getTypeInterfaceCrossReference_3_0() { return cTypeInterfaceCrossReference_3_0; }
		
		//ID
		public RuleCall getTypeInterfaceIDTerminalRuleCall_3_0_1() { return cTypeInterfaceIDTerminalRuleCall_3_0_1; }
		
		//";"
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}
	public class ChannelInterfaceReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.gamma.fmeda.language.FMEDALanguage.ChannelInterfaceReference");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cHardwarePartPortReferenceParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cThisPortReferenceParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ChannelInterfaceReference FMEDAModel::ChannelPortReference:
		//	HardwarePartPortReference | ThisPortReference;
		@Override public ParserRule getRule() { return rule; }
		
		//HardwarePartPortReference | ThisPortReference
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//HardwarePartPortReference
		public RuleCall getHardwarePartPortReferenceParserRuleCall_0() { return cHardwarePartPortReferenceParserRuleCall_0; }
		
		//ThisPortReference
		public RuleCall getThisPortReferenceParserRuleCall_1() { return cThisPortReferenceParserRuleCall_1; }
	}
	public class HardwarePartPortReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.gamma.fmeda.language.FMEDALanguage.HardwarePartPortReference");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cPartAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cPartFMEDAComponentInstanceCrossReference_1_0 = (CrossReference)cPartAssignment_1.eContents().get(0);
		private final RuleCall cPartFMEDAComponentInstanceIDTerminalRuleCall_1_0_1 = (RuleCall)cPartFMEDAComponentInstanceCrossReference_1_0.eContents().get(1);
		private final Keyword cFullStopKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cPortAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cPortPortCrossReference_3_0 = (CrossReference)cPortAssignment_3.eContents().get(0);
		private final RuleCall cPortPortIDTerminalRuleCall_3_0_1 = (RuleCall)cPortPortCrossReference_3_0.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//HardwarePartPortReference FMEDAModel::HardwarePartPortReference:
		//	"[" part=[FMEDAModel::FMEDAComponentInstance] "." port=[FMEDAModel::Port] "]";
		@Override public ParserRule getRule() { return rule; }
		
		//"[" part=[FMEDAModel::FMEDAComponentInstance] "." port=[FMEDAModel::Port] "]"
		public Group getGroup() { return cGroup; }
		
		//"["
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }
		
		//part=[FMEDAModel::FMEDAComponentInstance]
		public Assignment getPartAssignment_1() { return cPartAssignment_1; }
		
		//[FMEDAModel::FMEDAComponentInstance]
		public CrossReference getPartFMEDAComponentInstanceCrossReference_1_0() { return cPartFMEDAComponentInstanceCrossReference_1_0; }
		
		//ID
		public RuleCall getPartFMEDAComponentInstanceIDTerminalRuleCall_1_0_1() { return cPartFMEDAComponentInstanceIDTerminalRuleCall_1_0_1; }
		
		//"."
		public Keyword getFullStopKeyword_2() { return cFullStopKeyword_2; }
		
		//port=[FMEDAModel::Port]
		public Assignment getPortAssignment_3() { return cPortAssignment_3; }
		
		//[FMEDAModel::Port]
		public CrossReference getPortPortCrossReference_3_0() { return cPortPortCrossReference_3_0; }
		
		//ID
		public RuleCall getPortPortIDTerminalRuleCall_3_0_1() { return cPortPortIDTerminalRuleCall_3_0_1; }
		
		//"]"
		public Keyword getRightSquareBracketKeyword_4() { return cRightSquareBracketKeyword_4; }
	}
	public class ThisPortReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.gamma.fmeda.language.FMEDALanguage.ThisPortReference");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cThisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cPortAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cPortPortCrossReference_3_0 = (CrossReference)cPortAssignment_3.eContents().get(0);
		private final RuleCall cPortPortIDTerminalRuleCall_3_0_1 = (RuleCall)cPortPortCrossReference_3_0.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ThisPortReference FMEDAModel::ThisPortReference:
		//	"[" "this" "." port=[FMEDAModel::Port] "]";
		@Override public ParserRule getRule() { return rule; }
		
		//"[" "this" "." port=[FMEDAModel::Port] "]"
		public Group getGroup() { return cGroup; }
		
		//"["
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }
		
		//"this"
		public Keyword getThisKeyword_1() { return cThisKeyword_1; }
		
		//"."
		public Keyword getFullStopKeyword_2() { return cFullStopKeyword_2; }
		
		//port=[FMEDAModel::Port]
		public Assignment getPortAssignment_3() { return cPortAssignment_3; }
		
		//[FMEDAModel::Port]
		public CrossReference getPortPortCrossReference_3_0() { return cPortPortCrossReference_3_0; }
		
		//ID
		public RuleCall getPortPortIDTerminalRuleCall_3_0_1() { return cPortPortIDTerminalRuleCall_3_0_1; }
		
		//"]"
		public Keyword getRightSquareBracketKeyword_4() { return cRightSquareBracketKeyword_4; }
	}
	public class ChannelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.gamma.fmeda.language.FMEDALanguage.Channel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCHKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cFromAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFromChannelInterfaceReferenceParserRuleCall_1_0 = (RuleCall)cFromAssignment_1.eContents().get(0);
		private final Keyword cLessThanSignHyphenMinusGreaterThanSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cToAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cToChannelInterfaceReferenceParserRuleCall_3_0_0 = (RuleCall)cToAssignment_3_0.eContents().get(0);
		private final Keyword cCommaKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cToAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cToChannelInterfaceReferenceParserRuleCall_4_0 = (RuleCall)cToAssignment_4.eContents().get(0);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Channel FMEDAModel::Channel:
		//	"CH" from=ChannelInterfaceReference "<->" (to+=ChannelInterfaceReference ",")* to+=ChannelInterfaceReference ";";
		@Override public ParserRule getRule() { return rule; }
		
		//"CH" from=ChannelInterfaceReference "<->" (to+=ChannelInterfaceReference ",")* to+=ChannelInterfaceReference ";"
		public Group getGroup() { return cGroup; }
		
		//"CH"
		public Keyword getCHKeyword_0() { return cCHKeyword_0; }
		
		//from=ChannelInterfaceReference
		public Assignment getFromAssignment_1() { return cFromAssignment_1; }
		
		//ChannelInterfaceReference
		public RuleCall getFromChannelInterfaceReferenceParserRuleCall_1_0() { return cFromChannelInterfaceReferenceParserRuleCall_1_0; }
		
		//"<->"
		public Keyword getLessThanSignHyphenMinusGreaterThanSignKeyword_2() { return cLessThanSignHyphenMinusGreaterThanSignKeyword_2; }
		
		//(to+=ChannelInterfaceReference ",")*
		public Group getGroup_3() { return cGroup_3; }
		
		//to+=ChannelInterfaceReference
		public Assignment getToAssignment_3_0() { return cToAssignment_3_0; }
		
		//ChannelInterfaceReference
		public RuleCall getToChannelInterfaceReferenceParserRuleCall_3_0_0() { return cToChannelInterfaceReferenceParserRuleCall_3_0_0; }
		
		//","
		public Keyword getCommaKeyword_3_1() { return cCommaKeyword_3_1; }
		
		//to+=ChannelInterfaceReference
		public Assignment getToAssignment_4() { return cToAssignment_4; }
		
		//ChannelInterfaceReference
		public RuleCall getToChannelInterfaceReferenceParserRuleCall_4_0() { return cToChannelInterfaceReferenceParserRuleCall_4_0; }
		
		//";"
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}
	public class FMEDAComponentInstanceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.gamma.fmeda.language.FMEDALanguage.FMEDAComponentInstance");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSubcomponentKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cTypeFMEDAComponentCrossReference_3_0 = (CrossReference)cTypeAssignment_3.eContents().get(0);
		private final RuleCall cTypeFMEDAComponentIDTerminalRuleCall_3_0_1 = (RuleCall)cTypeFMEDAComponentCrossReference_3_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//FMEDAComponentInstance FMEDAModel::FMEDAComponentInstance:
		//	"subcomponent" name=ID ":" type=[FMEDAModel::FMEDAComponent] ";";
		@Override public ParserRule getRule() { return rule; }
		
		//"subcomponent" name=ID ":" type=[FMEDAModel::FMEDAComponent] ";"
		public Group getGroup() { return cGroup; }
		
		//"subcomponent"
		public Keyword getSubcomponentKeyword_0() { return cSubcomponentKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//type=[FMEDAModel::FMEDAComponent]
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }
		
		//[FMEDAModel::FMEDAComponent]
		public CrossReference getTypeFMEDAComponentCrossReference_3_0() { return cTypeFMEDAComponentCrossReference_3_0; }
		
		//ID
		public RuleCall getTypeFMEDAComponentIDTerminalRuleCall_3_0_1() { return cTypeFMEDAComponentIDTerminalRuleCall_3_0_1; }
		
		//";"
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}
	public class FMEDADiagnosticsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.gamma.fmeda.language.FMEDALanguage.FMEDADiagnostics");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDiagnosticsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//FMEDADiagnostics FMEDAModel::FMEDADiagnostics:
		//	"diagnostics" name=ID ";";
		@Override public ParserRule getRule() { return rule; }
		
		//"diagnostics" name=ID ";"
		public Group getGroup() { return cGroup; }
		
		//"diagnostics"
		public Keyword getDiagnosticsKeyword_0() { return cDiagnosticsKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//";"
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}
	public class DiagnosticsReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.gamma.fmeda.language.FMEDALanguage.DiagnosticsReference");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDiagnosedKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cByKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cFmedadiagnosticsAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final CrossReference cFmedadiagnosticsFMEDADiagnosticsCrossReference_2_0_0 = (CrossReference)cFmedadiagnosticsAssignment_2_0.eContents().get(0);
		private final RuleCall cFmedadiagnosticsFMEDADiagnosticsIDTerminalRuleCall_2_0_0_1 = (RuleCall)cFmedadiagnosticsFMEDADiagnosticsCrossReference_2_0_0.eContents().get(1);
		private final Keyword cCommaKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cFmedadiagnosticsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cFmedadiagnosticsFMEDADiagnosticsCrossReference_3_0 = (CrossReference)cFmedadiagnosticsAssignment_3.eContents().get(0);
		private final RuleCall cFmedadiagnosticsFMEDADiagnosticsIDTerminalRuleCall_3_0_1 = (RuleCall)cFmedadiagnosticsFMEDADiagnosticsCrossReference_3_0.eContents().get(1);
		private final Keyword cWithKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cCoverageAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cCoverageDOUBLETerminalRuleCall_5_0 = (RuleCall)cCoverageAssignment_5.eContents().get(0);
		
		//DiagnosticsReference FMEDAModel::DiagnosticsReference:
		//	"diagnosed" "by" (fmedadiagnostics+=[FMEDAModel::FMEDADiagnostics] ",")*
		//	fmedadiagnostics+=[FMEDAModel::FMEDADiagnostics] "with" coverage=DOUBLE;
		@Override public ParserRule getRule() { return rule; }
		
		//"diagnosed" "by" (fmedadiagnostics+=[FMEDAModel::FMEDADiagnostics] ",")*
		//fmedadiagnostics+=[FMEDAModel::FMEDADiagnostics] "with" coverage=DOUBLE
		public Group getGroup() { return cGroup; }
		
		//"diagnosed"
		public Keyword getDiagnosedKeyword_0() { return cDiagnosedKeyword_0; }
		
		//"by"
		public Keyword getByKeyword_1() { return cByKeyword_1; }
		
		//(fmedadiagnostics+=[FMEDAModel::FMEDADiagnostics] ",")*
		public Group getGroup_2() { return cGroup_2; }
		
		//fmedadiagnostics+=[FMEDAModel::FMEDADiagnostics]
		public Assignment getFmedadiagnosticsAssignment_2_0() { return cFmedadiagnosticsAssignment_2_0; }
		
		//[FMEDAModel::FMEDADiagnostics]
		public CrossReference getFmedadiagnosticsFMEDADiagnosticsCrossReference_2_0_0() { return cFmedadiagnosticsFMEDADiagnosticsCrossReference_2_0_0; }
		
		//ID
		public RuleCall getFmedadiagnosticsFMEDADiagnosticsIDTerminalRuleCall_2_0_0_1() { return cFmedadiagnosticsFMEDADiagnosticsIDTerminalRuleCall_2_0_0_1; }
		
		//","
		public Keyword getCommaKeyword_2_1() { return cCommaKeyword_2_1; }
		
		//fmedadiagnostics+=[FMEDAModel::FMEDADiagnostics]
		public Assignment getFmedadiagnosticsAssignment_3() { return cFmedadiagnosticsAssignment_3; }
		
		//[FMEDAModel::FMEDADiagnostics]
		public CrossReference getFmedadiagnosticsFMEDADiagnosticsCrossReference_3_0() { return cFmedadiagnosticsFMEDADiagnosticsCrossReference_3_0; }
		
		//ID
		public RuleCall getFmedadiagnosticsFMEDADiagnosticsIDTerminalRuleCall_3_0_1() { return cFmedadiagnosticsFMEDADiagnosticsIDTerminalRuleCall_3_0_1; }
		
		//"with"
		public Keyword getWithKeyword_4() { return cWithKeyword_4; }
		
		//coverage=DOUBLE
		public Assignment getCoverageAssignment_5() { return cCoverageAssignment_5; }
		
		//DOUBLE
		public RuleCall getCoverageDOUBLETerminalRuleCall_5_0() { return cCoverageDOUBLETerminalRuleCall_5_0; }
	}
	public class FailureModeDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.gamma.fmeda.language.FMEDALanguage.FailureModeDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFMKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cDiagnosticsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDiagnosticsDiagnosticsReferenceParserRuleCall_2_0 = (RuleCall)cDiagnosticsAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//FailureModeDef FMEDAModel::FailureMode:
		//	"FM" name=ID diagnostics=DiagnosticsReference? ";";
		@Override public ParserRule getRule() { return rule; }
		
		//"FM" name=ID diagnostics=DiagnosticsReference? ";"
		public Group getGroup() { return cGroup; }
		
		//"FM"
		public Keyword getFMKeyword_0() { return cFMKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//diagnostics=DiagnosticsReference?
		public Assignment getDiagnosticsAssignment_2() { return cDiagnosticsAssignment_2; }
		
		//DiagnosticsReference
		public RuleCall getDiagnosticsDiagnosticsReferenceParserRuleCall_2_0() { return cDiagnosticsDiagnosticsReferenceParserRuleCall_2_0; }
		
		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class PartFailureModeDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.gamma.fmeda.language.FMEDALanguage.PartFailureModeDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPFMKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cDiagnosticsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDiagnosticsDiagnosticsReferenceParserRuleCall_2_0 = (RuleCall)cDiagnosticsAssignment_2.eContents().get(0);
		private final Keyword cFRKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cEqualsSignKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cFailureRateAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cFailureRateDOUBLETerminalRuleCall_5_0 = (RuleCall)cFailureRateAssignment_5.eContents().get(0);
		private final Keyword cSemicolonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//PartFailureModeDef FMEDAModel::PartFailureMode:
		//	"PFM" name=ID diagnostics=DiagnosticsReference? "FR" "=" failureRate=DOUBLE ";";
		@Override public ParserRule getRule() { return rule; }
		
		//"PFM" name=ID diagnostics=DiagnosticsReference? "FR" "=" failureRate=DOUBLE ";"
		public Group getGroup() { return cGroup; }
		
		//"PFM"
		public Keyword getPFMKeyword_0() { return cPFMKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//diagnostics=DiagnosticsReference?
		public Assignment getDiagnosticsAssignment_2() { return cDiagnosticsAssignment_2; }
		
		//DiagnosticsReference
		public RuleCall getDiagnosticsDiagnosticsReferenceParserRuleCall_2_0() { return cDiagnosticsDiagnosticsReferenceParserRuleCall_2_0; }
		
		//"FR"
		public Keyword getFRKeyword_3() { return cFRKeyword_3; }
		
		//"="
		public Keyword getEqualsSignKeyword_4() { return cEqualsSignKeyword_4; }
		
		//failureRate=DOUBLE
		public Assignment getFailureRateAssignment_5() { return cFailureRateAssignment_5; }
		
		//DOUBLE
		public RuleCall getFailureRateDOUBLETerminalRuleCall_5_0() { return cFailureRateDOUBLETerminalRuleCall_5_0; }
		
		//";"
		public Keyword getSemicolonKeyword_6() { return cSemicolonKeyword_6; }
	}
	public class FailureModeReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.gamma.fmeda.language.FMEDALanguage.FailureModeReference");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cHardwarePartFailureModeReferenceDefParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cThisPartFailureModeReferenceParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cPortFailureModeReferenceParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cThisPortFailureModeReferenceParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//FailureModeReference FMEDAModel::FailureModeReference:
		//	HardwarePartFailureModeReferenceDef | ThisPartFailureModeReference | PortFailureModeReference |
		//	ThisPortFailureModeReference;
		@Override public ParserRule getRule() { return rule; }
		
		//HardwarePartFailureModeReferenceDef | ThisPartFailureModeReference | PortFailureModeReference |
		//ThisPortFailureModeReference
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//HardwarePartFailureModeReferenceDef
		public RuleCall getHardwarePartFailureModeReferenceDefParserRuleCall_0() { return cHardwarePartFailureModeReferenceDefParserRuleCall_0; }
		
		//ThisPartFailureModeReference
		public RuleCall getThisPartFailureModeReferenceParserRuleCall_1() { return cThisPartFailureModeReferenceParserRuleCall_1; }
		
		//PortFailureModeReference
		public RuleCall getPortFailureModeReferenceParserRuleCall_2() { return cPortFailureModeReferenceParserRuleCall_2; }
		
		//ThisPortFailureModeReference
		public RuleCall getThisPortFailureModeReferenceParserRuleCall_3() { return cThisPortFailureModeReferenceParserRuleCall_3; }
	}
	public class HardwarePartFailureModeReferenceDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.gamma.fmeda.language.FMEDALanguage.HardwarePartFailureModeReferenceDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cPartAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cPartFMEDAComponentInstanceCrossReference_1_0 = (CrossReference)cPartAssignment_1.eContents().get(0);
		private final RuleCall cPartFMEDAComponentInstanceIDTerminalRuleCall_1_0_1 = (RuleCall)cPartFMEDAComponentInstanceCrossReference_1_0.eContents().get(1);
		private final Keyword cFullStopKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cFailuremodeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cFailuremodeFailureModeCrossReference_3_0 = (CrossReference)cFailuremodeAssignment_3.eContents().get(0);
		private final RuleCall cFailuremodeFailureModeIDTerminalRuleCall_3_0_1 = (RuleCall)cFailuremodeFailureModeCrossReference_3_0.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//HardwarePartFailureModeReferenceDef FMEDAModel::HardwarePartFailureModeReference:
		//	"[" part=[FMEDAModel::FMEDAComponentInstance] "." failuremode=[FMEDAModel::FailureMode] "]";
		@Override public ParserRule getRule() { return rule; }
		
		//"[" part=[FMEDAModel::FMEDAComponentInstance] "." failuremode=[FMEDAModel::FailureMode] "]"
		public Group getGroup() { return cGroup; }
		
		//"["
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }
		
		//part=[FMEDAModel::FMEDAComponentInstance]
		public Assignment getPartAssignment_1() { return cPartAssignment_1; }
		
		//[FMEDAModel::FMEDAComponentInstance]
		public CrossReference getPartFMEDAComponentInstanceCrossReference_1_0() { return cPartFMEDAComponentInstanceCrossReference_1_0; }
		
		//ID
		public RuleCall getPartFMEDAComponentInstanceIDTerminalRuleCall_1_0_1() { return cPartFMEDAComponentInstanceIDTerminalRuleCall_1_0_1; }
		
		//"."
		public Keyword getFullStopKeyword_2() { return cFullStopKeyword_2; }
		
		//failuremode=[FMEDAModel::FailureMode]
		public Assignment getFailuremodeAssignment_3() { return cFailuremodeAssignment_3; }
		
		//[FMEDAModel::FailureMode]
		public CrossReference getFailuremodeFailureModeCrossReference_3_0() { return cFailuremodeFailureModeCrossReference_3_0; }
		
		//ID
		public RuleCall getFailuremodeFailureModeIDTerminalRuleCall_3_0_1() { return cFailuremodeFailureModeIDTerminalRuleCall_3_0_1; }
		
		//"]"
		public Keyword getRightSquareBracketKeyword_4() { return cRightSquareBracketKeyword_4; }
	}
	public class ThisPartFailureModeReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.gamma.fmeda.language.FMEDALanguage.ThisPartFailureModeReference");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cThisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cFailuremodeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cFailuremodeFailureModeCrossReference_3_0 = (CrossReference)cFailuremodeAssignment_3.eContents().get(0);
		private final RuleCall cFailuremodeFailureModeIDTerminalRuleCall_3_0_1 = (RuleCall)cFailuremodeFailureModeCrossReference_3_0.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ThisPartFailureModeReference FMEDAModel::ThisPartFailureModeReference:
		//	"[" "this" "." failuremode=[FMEDAModel::FailureMode] "]";
		@Override public ParserRule getRule() { return rule; }
		
		//"[" "this" "." failuremode=[FMEDAModel::FailureMode] "]"
		public Group getGroup() { return cGroup; }
		
		//"["
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }
		
		//"this"
		public Keyword getThisKeyword_1() { return cThisKeyword_1; }
		
		//"."
		public Keyword getFullStopKeyword_2() { return cFullStopKeyword_2; }
		
		//failuremode=[FMEDAModel::FailureMode]
		public Assignment getFailuremodeAssignment_3() { return cFailuremodeAssignment_3; }
		
		//[FMEDAModel::FailureMode]
		public CrossReference getFailuremodeFailureModeCrossReference_3_0() { return cFailuremodeFailureModeCrossReference_3_0; }
		
		//ID
		public RuleCall getFailuremodeFailureModeIDTerminalRuleCall_3_0_1() { return cFailuremodeFailureModeIDTerminalRuleCall_3_0_1; }
		
		//"]"
		public Keyword getRightSquareBracketKeyword_4() { return cRightSquareBracketKeyword_4; }
	}
	public class PortFailureModeReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.gamma.fmeda.language.FMEDALanguage.PortFailureModeReference");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cPartAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cPartFMEDAComponentInstanceCrossReference_1_0 = (CrossReference)cPartAssignment_1.eContents().get(0);
		private final RuleCall cPartFMEDAComponentInstanceIDTerminalRuleCall_1_0_1 = (RuleCall)cPartFMEDAComponentInstanceCrossReference_1_0.eContents().get(1);
		private final Keyword cFullStopKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cPortAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cPortPortCrossReference_3_0 = (CrossReference)cPortAssignment_3.eContents().get(0);
		private final RuleCall cPortPortIDTerminalRuleCall_3_0_1 = (RuleCall)cPortPortCrossReference_3_0.eContents().get(1);
		private final Keyword cFullStopKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cFailuremodeAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final CrossReference cFailuremodeFailureModeCrossReference_5_0 = (CrossReference)cFailuremodeAssignment_5.eContents().get(0);
		private final RuleCall cFailuremodeFailureModeIDTerminalRuleCall_5_0_1 = (RuleCall)cFailuremodeFailureModeCrossReference_5_0.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//PortFailureModeReference FMEDAModel::PortFailureModeReference:
		//	"[" part=[FMEDAModel::FMEDAComponentInstance] "." port=[FMEDAModel::Port] "." failuremode=[FMEDAModel::FailureMode]
		//	"]";
		@Override public ParserRule getRule() { return rule; }
		
		//"[" part=[FMEDAModel::FMEDAComponentInstance] "." port=[FMEDAModel::Port] "." failuremode=[FMEDAModel::FailureMode] "]"
		public Group getGroup() { return cGroup; }
		
		//"["
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }
		
		//part=[FMEDAModel::FMEDAComponentInstance]
		public Assignment getPartAssignment_1() { return cPartAssignment_1; }
		
		//[FMEDAModel::FMEDAComponentInstance]
		public CrossReference getPartFMEDAComponentInstanceCrossReference_1_0() { return cPartFMEDAComponentInstanceCrossReference_1_0; }
		
		//ID
		public RuleCall getPartFMEDAComponentInstanceIDTerminalRuleCall_1_0_1() { return cPartFMEDAComponentInstanceIDTerminalRuleCall_1_0_1; }
		
		//"."
		public Keyword getFullStopKeyword_2() { return cFullStopKeyword_2; }
		
		//port=[FMEDAModel::Port]
		public Assignment getPortAssignment_3() { return cPortAssignment_3; }
		
		//[FMEDAModel::Port]
		public CrossReference getPortPortCrossReference_3_0() { return cPortPortCrossReference_3_0; }
		
		//ID
		public RuleCall getPortPortIDTerminalRuleCall_3_0_1() { return cPortPortIDTerminalRuleCall_3_0_1; }
		
		//"."
		public Keyword getFullStopKeyword_4() { return cFullStopKeyword_4; }
		
		//failuremode=[FMEDAModel::FailureMode]
		public Assignment getFailuremodeAssignment_5() { return cFailuremodeAssignment_5; }
		
		//[FMEDAModel::FailureMode]
		public CrossReference getFailuremodeFailureModeCrossReference_5_0() { return cFailuremodeFailureModeCrossReference_5_0; }
		
		//ID
		public RuleCall getFailuremodeFailureModeIDTerminalRuleCall_5_0_1() { return cFailuremodeFailureModeIDTerminalRuleCall_5_0_1; }
		
		//"]"
		public Keyword getRightSquareBracketKeyword_6() { return cRightSquareBracketKeyword_6; }
	}
	public class ThisPortFailureModeReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.gamma.fmeda.language.FMEDALanguage.ThisPortFailureModeReference");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cThisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cPortAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cPortPortCrossReference_3_0 = (CrossReference)cPortAssignment_3.eContents().get(0);
		private final RuleCall cPortPortIDTerminalRuleCall_3_0_1 = (RuleCall)cPortPortCrossReference_3_0.eContents().get(1);
		private final Keyword cFullStopKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cFailuremodeAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final CrossReference cFailuremodeFailureModeCrossReference_5_0 = (CrossReference)cFailuremodeAssignment_5.eContents().get(0);
		private final RuleCall cFailuremodeFailureModeIDTerminalRuleCall_5_0_1 = (RuleCall)cFailuremodeFailureModeCrossReference_5_0.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//ThisPortFailureModeReference FMEDAModel::ThisPortFailureModeReference:
		//	"[" "this" "." port=[FMEDAModel::Port] "." failuremode=[FMEDAModel::FailureMode] "]";
		@Override public ParserRule getRule() { return rule; }
		
		//"[" "this" "." port=[FMEDAModel::Port] "." failuremode=[FMEDAModel::FailureMode] "]"
		public Group getGroup() { return cGroup; }
		
		//"["
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }
		
		//"this"
		public Keyword getThisKeyword_1() { return cThisKeyword_1; }
		
		//"."
		public Keyword getFullStopKeyword_2() { return cFullStopKeyword_2; }
		
		//port=[FMEDAModel::Port]
		public Assignment getPortAssignment_3() { return cPortAssignment_3; }
		
		//[FMEDAModel::Port]
		public CrossReference getPortPortCrossReference_3_0() { return cPortPortCrossReference_3_0; }
		
		//ID
		public RuleCall getPortPortIDTerminalRuleCall_3_0_1() { return cPortPortIDTerminalRuleCall_3_0_1; }
		
		//"."
		public Keyword getFullStopKeyword_4() { return cFullStopKeyword_4; }
		
		//failuremode=[FMEDAModel::FailureMode]
		public Assignment getFailuremodeAssignment_5() { return cFailuremodeAssignment_5; }
		
		//[FMEDAModel::FailureMode]
		public CrossReference getFailuremodeFailureModeCrossReference_5_0() { return cFailuremodeFailureModeCrossReference_5_0; }
		
		//ID
		public RuleCall getFailuremodeFailureModeIDTerminalRuleCall_5_0_1() { return cFailuremodeFailureModeIDTerminalRuleCall_5_0_1; }
		
		//"]"
		public Keyword getRightSquareBracketKeyword_6() { return cRightSquareBracketKeyword_6; }
	}
	public class FailurePropagationDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.gamma.fmeda.language.FMEDALanguage.FailurePropagationDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFPKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cCauseAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCauseFailureModeReferenceParserRuleCall_1_0 = (RuleCall)cCauseAssignment_1.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cEffectAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cEffectFailureModeReferenceParserRuleCall_3_0_0 = (RuleCall)cEffectAssignment_3_0.eContents().get(0);
		private final Keyword cCommaKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cEffectAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cEffectFailureModeReferenceParserRuleCall_4_0 = (RuleCall)cEffectAssignment_4.eContents().get(0);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//FailurePropagationDef FMEDAModel::FailurePropagation:
		//	"FP" cause=FailureModeReference "->" (effect+=FailureModeReference ",")* effect+=FailureModeReference ";";
		@Override public ParserRule getRule() { return rule; }
		
		//"FP" cause=FailureModeReference "->" (effect+=FailureModeReference ",")* effect+=FailureModeReference ";"
		public Group getGroup() { return cGroup; }
		
		//"FP"
		public Keyword getFPKeyword_0() { return cFPKeyword_0; }
		
		//cause=FailureModeReference
		public Assignment getCauseAssignment_1() { return cCauseAssignment_1; }
		
		//FailureModeReference
		public RuleCall getCauseFailureModeReferenceParserRuleCall_1_0() { return cCauseFailureModeReferenceParserRuleCall_1_0; }
		
		//"->"
		public Keyword getHyphenMinusGreaterThanSignKeyword_2() { return cHyphenMinusGreaterThanSignKeyword_2; }
		
		//(effect+=FailureModeReference ",")*
		public Group getGroup_3() { return cGroup_3; }
		
		//effect+=FailureModeReference
		public Assignment getEffectAssignment_3_0() { return cEffectAssignment_3_0; }
		
		//FailureModeReference
		public RuleCall getEffectFailureModeReferenceParserRuleCall_3_0_0() { return cEffectFailureModeReferenceParserRuleCall_3_0_0; }
		
		//","
		public Keyword getCommaKeyword_3_1() { return cCommaKeyword_3_1; }
		
		//effect+=FailureModeReference
		public Assignment getEffectAssignment_4() { return cEffectAssignment_4; }
		
		//FailureModeReference
		public RuleCall getEffectFailureModeReferenceParserRuleCall_4_0() { return cEffectFailureModeReferenceParserRuleCall_4_0; }
		
		//";"
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}
	
	
	private final PackageDefElements pPackageDef;
	private final FMEDAComponentDefElements pFMEDAComponentDef;
	private final InterfaceDefElements pInterfaceDef;
	private final PortElements pPort;
	private final ChannelInterfaceReferenceElements pChannelInterfaceReference;
	private final HardwarePartPortReferenceElements pHardwarePartPortReference;
	private final ThisPortReferenceElements pThisPortReference;
	private final ChannelElements pChannel;
	private final FMEDAComponentInstanceElements pFMEDAComponentInstance;
	private final FMEDADiagnosticsElements pFMEDADiagnostics;
	private final DiagnosticsReferenceElements pDiagnosticsReference;
	private final FailureModeDefElements pFailureModeDef;
	private final PartFailureModeDefElements pPartFailureModeDef;
	private final FailureModeReferenceElements pFailureModeReference;
	private final HardwarePartFailureModeReferenceDefElements pHardwarePartFailureModeReferenceDef;
	private final ThisPartFailureModeReferenceElements pThisPartFailureModeReference;
	private final PortFailureModeReferenceElements pPortFailureModeReference;
	private final ThisPortFailureModeReferenceElements pThisPortFailureModeReference;
	private final FailurePropagationDefElements pFailurePropagationDef;
	private final TerminalRule tDOUBLE;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public FMEDALanguageGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pPackageDef = new PackageDefElements();
		this.pFMEDAComponentDef = new FMEDAComponentDefElements();
		this.pInterfaceDef = new InterfaceDefElements();
		this.pPort = new PortElements();
		this.pChannelInterfaceReference = new ChannelInterfaceReferenceElements();
		this.pHardwarePartPortReference = new HardwarePartPortReferenceElements();
		this.pThisPortReference = new ThisPortReferenceElements();
		this.pChannel = new ChannelElements();
		this.pFMEDAComponentInstance = new FMEDAComponentInstanceElements();
		this.pFMEDADiagnostics = new FMEDADiagnosticsElements();
		this.pDiagnosticsReference = new DiagnosticsReferenceElements();
		this.pFailureModeDef = new FailureModeDefElements();
		this.pPartFailureModeDef = new PartFailureModeDefElements();
		this.pFailureModeReference = new FailureModeReferenceElements();
		this.pHardwarePartFailureModeReferenceDef = new HardwarePartFailureModeReferenceDefElements();
		this.pThisPartFailureModeReference = new ThisPartFailureModeReferenceElements();
		this.pPortFailureModeReference = new PortFailureModeReferenceElements();
		this.pThisPortFailureModeReference = new ThisPortFailureModeReferenceElements();
		this.pFailurePropagationDef = new FailurePropagationDefElements();
		this.tDOUBLE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.gamma.fmeda.language.FMEDALanguage.DOUBLE");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("hu.bme.mit.gamma.fmeda.language.FMEDALanguage".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//PackageDef FMEDAModel::Package:
	//	'package' name=ID (components+=FMEDAComponentDef | diagnostics+=FMEDADiagnostics | interfaces+=InterfaceDef)*;
	public PackageDefElements getPackageDefAccess() {
		return pPackageDef;
	}
	
	public ParserRule getPackageDefRule() {
		return getPackageDefAccess().getRule();
	}
	
	//FMEDAComponentDef FMEDAModel::FMEDAComponent:
	//	"fmeda" "component" name=ID ("["
	//	ports+=Port*
	//	"]")?
	//	"{" (failuremodes+=FailureModeDef | failuremodes+=PartFailureModeDef | subcomponents+=FMEDAComponentInstance |
	//	failurepropagations+=FailurePropagationDef | channels+=Channel)*
	//	"}";
	public FMEDAComponentDefElements getFMEDAComponentDefAccess() {
		return pFMEDAComponentDef;
	}
	
	public ParserRule getFMEDAComponentDefRule() {
		return getFMEDAComponentDefAccess().getRule();
	}
	
	//InterfaceDef FMEDAModel::Interface:
	//	"interface" name=ID "{"
	//	failuremodes+=FailureModeDef+
	//	"}";
	public InterfaceDefElements getInterfaceDefAccess() {
		return pInterfaceDef;
	}
	
	public ParserRule getInterfaceDefRule() {
		return getInterfaceDefAccess().getRule();
	}
	
	//Port FMEDAModel::Port:
	//	"port" name=ID ":" type=[FMEDAModel::Interface] ";";
	public PortElements getPortAccess() {
		return pPort;
	}
	
	public ParserRule getPortRule() {
		return getPortAccess().getRule();
	}
	
	//ChannelInterfaceReference FMEDAModel::ChannelPortReference:
	//	HardwarePartPortReference | ThisPortReference;
	public ChannelInterfaceReferenceElements getChannelInterfaceReferenceAccess() {
		return pChannelInterfaceReference;
	}
	
	public ParserRule getChannelInterfaceReferenceRule() {
		return getChannelInterfaceReferenceAccess().getRule();
	}
	
	//HardwarePartPortReference FMEDAModel::HardwarePartPortReference:
	//	"[" part=[FMEDAModel::FMEDAComponentInstance] "." port=[FMEDAModel::Port] "]";
	public HardwarePartPortReferenceElements getHardwarePartPortReferenceAccess() {
		return pHardwarePartPortReference;
	}
	
	public ParserRule getHardwarePartPortReferenceRule() {
		return getHardwarePartPortReferenceAccess().getRule();
	}
	
	//ThisPortReference FMEDAModel::ThisPortReference:
	//	"[" "this" "." port=[FMEDAModel::Port] "]";
	public ThisPortReferenceElements getThisPortReferenceAccess() {
		return pThisPortReference;
	}
	
	public ParserRule getThisPortReferenceRule() {
		return getThisPortReferenceAccess().getRule();
	}
	
	//Channel FMEDAModel::Channel:
	//	"CH" from=ChannelInterfaceReference "<->" (to+=ChannelInterfaceReference ",")* to+=ChannelInterfaceReference ";";
	public ChannelElements getChannelAccess() {
		return pChannel;
	}
	
	public ParserRule getChannelRule() {
		return getChannelAccess().getRule();
	}
	
	//FMEDAComponentInstance FMEDAModel::FMEDAComponentInstance:
	//	"subcomponent" name=ID ":" type=[FMEDAModel::FMEDAComponent] ";";
	public FMEDAComponentInstanceElements getFMEDAComponentInstanceAccess() {
		return pFMEDAComponentInstance;
	}
	
	public ParserRule getFMEDAComponentInstanceRule() {
		return getFMEDAComponentInstanceAccess().getRule();
	}
	
	//FMEDADiagnostics FMEDAModel::FMEDADiagnostics:
	//	"diagnostics" name=ID ";";
	public FMEDADiagnosticsElements getFMEDADiagnosticsAccess() {
		return pFMEDADiagnostics;
	}
	
	public ParserRule getFMEDADiagnosticsRule() {
		return getFMEDADiagnosticsAccess().getRule();
	}
	
	//DiagnosticsReference FMEDAModel::DiagnosticsReference:
	//	"diagnosed" "by" (fmedadiagnostics+=[FMEDAModel::FMEDADiagnostics] ",")*
	//	fmedadiagnostics+=[FMEDAModel::FMEDADiagnostics] "with" coverage=DOUBLE;
	public DiagnosticsReferenceElements getDiagnosticsReferenceAccess() {
		return pDiagnosticsReference;
	}
	
	public ParserRule getDiagnosticsReferenceRule() {
		return getDiagnosticsReferenceAccess().getRule();
	}
	
	//FailureModeDef FMEDAModel::FailureMode:
	//	"FM" name=ID diagnostics=DiagnosticsReference? ";";
	public FailureModeDefElements getFailureModeDefAccess() {
		return pFailureModeDef;
	}
	
	public ParserRule getFailureModeDefRule() {
		return getFailureModeDefAccess().getRule();
	}
	
	//PartFailureModeDef FMEDAModel::PartFailureMode:
	//	"PFM" name=ID diagnostics=DiagnosticsReference? "FR" "=" failureRate=DOUBLE ";";
	public PartFailureModeDefElements getPartFailureModeDefAccess() {
		return pPartFailureModeDef;
	}
	
	public ParserRule getPartFailureModeDefRule() {
		return getPartFailureModeDefAccess().getRule();
	}
	
	//FailureModeReference FMEDAModel::FailureModeReference:
	//	HardwarePartFailureModeReferenceDef | ThisPartFailureModeReference | PortFailureModeReference |
	//	ThisPortFailureModeReference;
	public FailureModeReferenceElements getFailureModeReferenceAccess() {
		return pFailureModeReference;
	}
	
	public ParserRule getFailureModeReferenceRule() {
		return getFailureModeReferenceAccess().getRule();
	}
	
	//HardwarePartFailureModeReferenceDef FMEDAModel::HardwarePartFailureModeReference:
	//	"[" part=[FMEDAModel::FMEDAComponentInstance] "." failuremode=[FMEDAModel::FailureMode] "]";
	public HardwarePartFailureModeReferenceDefElements getHardwarePartFailureModeReferenceDefAccess() {
		return pHardwarePartFailureModeReferenceDef;
	}
	
	public ParserRule getHardwarePartFailureModeReferenceDefRule() {
		return getHardwarePartFailureModeReferenceDefAccess().getRule();
	}
	
	//ThisPartFailureModeReference FMEDAModel::ThisPartFailureModeReference:
	//	"[" "this" "." failuremode=[FMEDAModel::FailureMode] "]";
	public ThisPartFailureModeReferenceElements getThisPartFailureModeReferenceAccess() {
		return pThisPartFailureModeReference;
	}
	
	public ParserRule getThisPartFailureModeReferenceRule() {
		return getThisPartFailureModeReferenceAccess().getRule();
	}
	
	//PortFailureModeReference FMEDAModel::PortFailureModeReference:
	//	"[" part=[FMEDAModel::FMEDAComponentInstance] "." port=[FMEDAModel::Port] "." failuremode=[FMEDAModel::FailureMode]
	//	"]";
	public PortFailureModeReferenceElements getPortFailureModeReferenceAccess() {
		return pPortFailureModeReference;
	}
	
	public ParserRule getPortFailureModeReferenceRule() {
		return getPortFailureModeReferenceAccess().getRule();
	}
	
	//ThisPortFailureModeReference FMEDAModel::ThisPortFailureModeReference:
	//	"[" "this" "." port=[FMEDAModel::Port] "." failuremode=[FMEDAModel::FailureMode] "]";
	public ThisPortFailureModeReferenceElements getThisPortFailureModeReferenceAccess() {
		return pThisPortFailureModeReference;
	}
	
	public ParserRule getThisPortFailureModeReferenceRule() {
		return getThisPortFailureModeReferenceAccess().getRule();
	}
	
	//FailurePropagationDef FMEDAModel::FailurePropagation:
	//	"FP" cause=FailureModeReference "->" (effect+=FailureModeReference ",")* effect+=FailureModeReference ";";
	public FailurePropagationDefElements getFailurePropagationDefAccess() {
		return pFailurePropagationDef;
	}
	
	public ParserRule getFailurePropagationDefRule() {
		return getFailurePropagationDefAccess().getRule();
	}
	
	//terminal DOUBLE returns ecore::EDouble:
	//	'0'..'9'+ ("." '0'..'9'*);
	public TerminalRule getDOUBLERule() {
		return tDOUBLE;
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}

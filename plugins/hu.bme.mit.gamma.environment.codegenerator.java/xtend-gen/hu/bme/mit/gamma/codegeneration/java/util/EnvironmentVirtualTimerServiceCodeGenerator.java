/**
 * Copyright (c) 2018-2023 Contributors to the Gamma project
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * SPDX-License-Identifier: EPL-1.0
 */
package hu.bme.mit.gamma.codegeneration.java.util;

import org.eclipse.xtend2.lib.StringConcatenation;

@SuppressWarnings("all")
public class EnvironmentVirtualTimerServiceCodeGenerator {
  protected final String PACKAGE_NAME;

  protected final String CLASS_NAME = "VirtualTimerService";

  protected final String UNIFIED_TIMER_INTERFACE_NAME = Namings.UNIFIED_TIMER_INTERFACE;

  protected final String ITIMER_CALLBACK_INTERFACE_NAME = Namings.TIMER_CALLBACK_INTERFACE;

  public EnvironmentVirtualTimerServiceCodeGenerator(final String packageName) {
    this.PACKAGE_NAME = packageName;
  }

  /**
   * Creates the virtual timer class for the timings in the generated test cases.
   */
  public CharSequence createVirtualTimerClassCode() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package ");
    _builder.append(this.PACKAGE_NAME);
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("import java.util.List;");
    _builder.newLine();
    _builder.append("import java.util.ArrayList;");
    _builder.newLine();
    _builder.append("import java.util.Map;");
    _builder.newLine();
    _builder.append("import java.util.HashMap;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Virtual timer service implementation.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("public class ");
    _builder.append(this.CLASS_NAME);
    _builder.append(" implements ");
    _builder.append(this.UNIFIED_TIMER_INTERFACE_NAME);
    _builder.append(" {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("// Yakindu timer");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private final List<TimeEventTask> timerTaskList = new ArrayList<TimeEventTask>();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("// Gamma timer");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private Map<Object, Long> elapsedTime = new HashMap<Object, Long>();");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* Timer task that reflects a time event. It\'s internally used by TimerService.");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private class TimeEventTask {");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("private ");
    _builder.append(this.ITIMER_CALLBACK_INTERFACE_NAME, "\t\t");
    _builder.append(" callback;");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("int eventID;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("private boolean periodic;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("private final long time;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("private long timeLeft;");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("* Constructor for a time event.");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("* ");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("* @param callback: Set to true if event should be repeated periodically.");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("* @param eventID: index position within the state machine\'s timeEvent array.");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("public TimeEventTask(");
    _builder.append(this.ITIMER_CALLBACK_INTERFACE_NAME, "\t\t");
    _builder.append(" callback, int eventID, long time, boolean isPeriodic) {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t");
    _builder.append("this.callback = callback;");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("this.eventID = eventID;");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("this.time = time;");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("this.timeLeft = time;");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("this.periodic = isPeriodic;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("public void run() {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("callback.timeElapsed(eventID);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("public boolean equals(Object obj) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("if (obj instanceof TimeEventTask) {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("TimeEventTask timeEventTask = (TimeEventTask) obj;");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("return timeEventTask.callback.equals(callback)");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("&& timeEventTask.eventID == eventID;");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("return super.equals(obj);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("public void elapse(long amount) {\t\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("if (timeLeft <= 0) {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("return;");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("timeLeft -= amount;");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("if (timeLeft <= 0) {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("run();");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("if (periodic) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("timeLeft = time + timeLeft;");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void setTimer(");
    _builder.append(this.ITIMER_CALLBACK_INTERFACE_NAME, "\t");
    _builder.append(" callback, int eventID, long time, boolean isPeriodic) {\t");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("// Creating a new TimerTask for given event and storing it");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("TimeEventTask timerTask = new TimeEventTask(callback, eventID, time, isPeriodic);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("timerTaskList.add(timerTask);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void unsetTimer(");
    _builder.append(this.ITIMER_CALLBACK_INTERFACE_NAME, "\t");
    _builder.append(" callback, int eventID) {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("for (TimeEventTask timer : new ArrayList<TimeEventTask>(timerTaskList)) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("if (timer.callback.equals(callback) && timer.eventID == eventID) {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("timerTaskList.remove(timer);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void elapse(long amount) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("for (TimeEventTask timer : timerTaskList) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("timer.elapse(amount);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("for (Object object : elapsedTime.keySet()) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("elapsedTime.put(object, elapsedTime.get(object) + amount);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void saveTime(Object object) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("elapsedTime.put(object, Long.valueOf(0));");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public long getElapsedTime(Object object, TimeUnit timeUnit) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("long elapsedTime = this.elapsedTime.get(object);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("switch (timeUnit) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("case MILLISECOND:");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("return elapsedTime;");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("default:");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("throw new IllegalArgumentException(\"Not supported time unit: \" + timeUnit);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public long getEarliestTime(){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("long earliestTime=Long.MAX_VALUE;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("for (TimeEventTask timer : timerTaskList) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("long timeLeft=timer.timeLeft;");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("if (earliestTime > timeLeft) { ");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("earliestTime=timeLeft;");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("for (Object object : elapsedTime.keySet()) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("long timeLeft=((TimedObject) object).getEarliestTime();");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("if (earliestTime > timeLeft) {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("earliestTime=timeLeft;");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return earliestTime;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void reset() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("timerTaskList.clear();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("elapsedTime.clear();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }

  public String getClassName() {
    return this.CLASS_NAME;
  }
}

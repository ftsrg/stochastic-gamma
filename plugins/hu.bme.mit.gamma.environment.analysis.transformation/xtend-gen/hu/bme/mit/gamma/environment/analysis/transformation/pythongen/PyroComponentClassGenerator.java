package hu.bme.mit.gamma.environment.analysis.transformation.pythongen;

import hu.bme.mit.gamma.codegeneration.java.util.ElementaryEnvironmentComponentUtility;
import hu.bme.mit.gamma.environment.analysis.transformation.util.EnvironmentConnections;
import hu.bme.mit.gamma.environment.analysis.transformation.util.TransformationUtility;
import hu.bme.mit.gamma.environment.model.ElementaryEnvironmentComponentInstance;
import hu.bme.mit.gamma.environment.model.EnvironmentDelay;
import hu.bme.mit.gamma.environment.model.EnvironmentSample;
import hu.bme.mit.gamma.environment.model.EnvironmentSwitch;
import hu.bme.mit.gamma.expression.model.ParameterDeclaration;
import hu.bme.mit.gamma.expression.model.Type;
import hu.bme.mit.gamma.expression.util.ExpressionEvaluator;
import hu.bme.mit.gamma.statechart.interface_.EventDeclaration;
import hu.bme.mit.gamma.statechart.interface_.Interface;
import java.util.List;
import java.util.Set;
import org.eclipse.emf.common.util.EList;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.xbase.lib.Functions.Function1;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.eclipse.xtext.xbase.lib.StringExtensions;

@SuppressWarnings("all")
public class PyroComponentClassGenerator {
  private static Integer cntr = Integer.valueOf(0);

  private final String packageName;

  private final ExpressionEvaluator expEval;

  private PyroDistGenerator distGenerator;

  private static Integer if_cntr = Integer.valueOf(0);

  private final ElementaryEnvironmentComponentUtility envUtil = ElementaryEnvironmentComponentUtility.INSTANCE;

  public PyroComponentClassGenerator(final String packageName) {
    this.packageName = packageName;
    this.expEval = ExpressionEvaluator.INSTANCE;
    PyroDistGenerator _pyroDistGenerator = new PyroDistGenerator(packageName);
    this.distGenerator = _pyroDistGenerator;
  }

  public CharSequence generateInterface(final Interface i) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("if");
    _builder.append(PyroComponentClassGenerator.if_cntr);
    _builder.append(" = JClass(\'");
    _builder.append(this.packageName);
    _builder.append(".interfaces.");
    String _firstUpper = StringExtensions.toFirstUpper(i.getName());
    _builder.append(_firstUpper);
    _builder.append("Interface$Listener$Provided\')");
    _builder.newLineIfNotEmpty();
    _builder.append("if");
    _builder.append(PyroComponentClassGenerator.if_cntr);
    _builder.append("_s = JClass(\'");
    _builder.append(this.packageName);
    _builder.append(".");
    CharSequence _schedulingInterfacePackage = this.envUtil.getSchedulingInterfacePackage();
    _builder.append(_schedulingInterfacePackage);
    _builder.append(".");
    String _schedulingInterfaceName = this.envUtil.getSchedulingInterfaceName();
    _builder.append(_schedulingInterfaceName);
    _builder.append("\')");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("@JImplements([if");
    _builder.append(PyroComponentClassGenerator.if_cntr);
    _builder.append(",if");
    Integer _plusPlus = PyroComponentClassGenerator.if_cntr++;
    _builder.append(_plusPlus);
    _builder.append("_s])");
    _builder.newLineIfNotEmpty();
    return _builder;
  }

  public CharSequence generateInterface() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("if");
    _builder.append(PyroComponentClassGenerator.if_cntr);
    _builder.append("_s = JClass(\'");
    _builder.append(this.packageName);
    _builder.append(".");
    CharSequence _schedulingInterfacePackage = this.envUtil.getSchedulingInterfacePackage();
    _builder.append(_schedulingInterfacePackage);
    _builder.append(".");
    String _schedulingInterfaceName = this.envUtil.getSchedulingInterfaceName();
    _builder.append(_schedulingInterfaceName);
    _builder.append("\')");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("@JImplements(if");
    Integer _plusPlus = PyroComponentClassGenerator.if_cntr++;
    _builder.append(_plusPlus);
    _builder.append("_s)");
    _builder.newLineIfNotEmpty();
    return _builder;
  }

  public CharSequence generateInterfaceSubClass(final Interface i) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("#\tclass Java:");
    _builder.newLine();
    _builder.append("#\t\timplements = [\"");
    _builder.append(this.packageName);
    _builder.append(".interfaces.");
    String _firstUpper = StringExtensions.toFirstUpper(i.getName());
    _builder.append(_firstUpper);
    _builder.append("Interface$Listener$Provided\"]");
    _builder.newLineIfNotEmpty();
    return _builder;
  }

  public CharSequence generateEventSourceClass() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("class EventSource():");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("def configure(self,name,calls,rules,portevents,simulator):");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("self.name=name");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("self.calls=calls");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("self.rules=rules");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("self.portevents=portevents");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("self.simulator=simulator");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("ports=list(self.calls.keys())");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("#iterating through ports");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("for port in ports:");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("pevents=self.portevents[port]");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("#iterating through events");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("for pevent in pevents:");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("rule=self.rules[port][pevent]");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("self.simulator.dists.append(rule)");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("def generateEvents(self):");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("ports=list(self.calls.keys())");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("#iterating through ports");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("for port in ports:");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("pevents=self.portevents[port]");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("#iterating through events");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("for pevent in pevents:");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("rule=self.rules[port][pevent]");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("call=self.calls[port][pevent]");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("time=rule.calc(port+\".\"+pevent,0.0)");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("if time>=0:");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("#iterating through port connections");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("self.simulator.events.append(Event(self,time,call))");
    _builder.newLine();
    return _builder;
  }

  public CharSequence generatePeriodicEventSourceClass() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("class PeriodicEventSource():");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("def __init__(self,name,calls,rules,portevents,simulator):");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("self.name=name");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("self.calls=calls");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("self.rules=rules");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("self.portevents=portevents");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("self.simulator=simulator");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("ports=list(self.calls.keys())");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("#iterating through ports");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("for port in ports:");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("pevents=self.portevents[port]");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("#iterating through events");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("for pevent in pevents:");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("rule=self.rules[port][pevent]");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("self.simulator.dists.append(rule)");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("def generateEvents(self):");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("ports=list(self.calls.keys())");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("#iterating through self.ports");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("for port in ports:");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("pevents=self.portevents[port]");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("#iterating through events");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("for pevent in pevents:");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("call=self.calls[port][pevent]");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("rule=self.rules[port][pevent]");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("simulationtime=0.0");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("while simulationtime < simTime:");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("simulationtime=simulationtime+rule.calc(port+\".\"+pevent,simulationtime)");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("#iterating through port connections");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("self.simulator.events.append(Event(self,simulationtime,call))");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t\t\t");
    _builder.newLine();
    _builder.newLine();
    return _builder;
  }

  public CharSequence generateSampleClasses(final List<EnvironmentConnections> connections) {
    StringConcatenation _builder = new StringConcatenation();
    final Function1<EnvironmentConnections, Boolean> _function = (EnvironmentConnections c) -> {
      return Boolean.valueOf((c.component instanceof EnvironmentSample));
    };
    final Function1<EnvironmentConnections, ElementaryEnvironmentComponentInstance> _function_1 = (EnvironmentConnections c) -> {
      return c.component;
    };
    Set<ElementaryEnvironmentComponentInstance> samples = IterableExtensions.<ElementaryEnvironmentComponentInstance>toSet(IterableExtensions.<EnvironmentConnections, ElementaryEnvironmentComponentInstance>map(IterableExtensions.<EnvironmentConnections>filter(connections, _function), _function_1));
    _builder.newLineIfNotEmpty();
    {
      for(final ElementaryEnvironmentComponentInstance sample : samples) {
        Interface i = sample.getOutports().get(0).getInterfaceRealization().getInterface();
        _builder.newLineIfNotEmpty();
        CharSequence _generateInterface = this.generateInterface(i);
        _builder.append(_generateInterface);
        _builder.newLineIfNotEmpty();
        _builder.append("class Sample");
        String _firstUpper = StringExtensions.toFirstUpper(sample.getName());
        _builder.append(_firstUpper);
        _builder.append("():");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("def configure(self,name,inport,calls,rules,simulator,compCall,shname):");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("self.name=name");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("callitem=list(calls.items())[0]#only one out port");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("self.calls=callitem[1]");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("self.port=callitem[0]");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("self.rules=list(rules.items())[0][1]#only one out port");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("self.event_cntr=0");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("self.inport=inport");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("if inport is not None:");
        _builder.newLine();
        _builder.append("\t\t\t");
        _builder.append("inport.registerListener(self)");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("self.events=[]");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("compCall.registerEnvironmentComponent(shname,self)");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("self.simulator=simulator");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("#iterating through ports");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("for port in rules.keys():");
        _builder.newLine();
        _builder.append("\t\t\t");
        _builder.append("pevents=rules[port].keys()");
        _builder.newLine();
        _builder.append("\t\t\t");
        _builder.append("#iterating through events");
        _builder.newLine();
        _builder.append("\t\t\t");
        _builder.append("for pevent in pevents:");
        _builder.newLine();
        _builder.append("\t\t\t\t");
        _builder.append("rule=rules[port][pevent]");
        _builder.newLine();
        _builder.append("\t\t\t\t");
        _builder.append("simulator.dists.append(rule)");
        _builder.newLine();
        _builder.newLine();
        _builder.newLine();
        _builder.newLine();
        _builder.append("\t");
        _builder.append("def generateEvents(self):");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("self.events.clear()");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("pass");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("#definition of the interface functions");
        _builder.newLine();
        _builder.newLine();
        _builder.append("\t");
        _builder.append("@JOverride");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("def isEmpty(self):");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("return (len(self.events)==0)");
        _builder.newLine();
        _builder.newLine();
        _builder.append("\t");
        _builder.append("@JOverride");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("def schedule(self):");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("for event in self.events:");
        _builder.newLine();
        _builder.append("\t\t\t");
        _builder.append("event.callEvent()");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("self.events.clear()");
        _builder.newLine();
        _builder.newLine();
        {
          EList<EventDeclaration> _events = i.getEvents();
          for(final EventDeclaration event : _events) {
            _builder.newLine();
            _builder.append("\t");
            _builder.append("@JOverride");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("def raise");
            String _firstUpper_1 = StringExtensions.toFirstUpper(event.getEvent().getName());
            _builder.append(_firstUpper_1, "\t");
            _builder.append("(self,");
            CharSequence _generateFuncParams = TransformationUtility.generateFuncParams(event.getEvent());
            _builder.append(_generateFuncParams, "\t");
            _builder.append("):");
            _builder.newLineIfNotEmpty();
            {
              EList<ParameterDeclaration> _parameterDeclarations = event.getEvent().getParameterDeclarations();
              for(final ParameterDeclaration param : _parameterDeclarations) {
                _builder.append("\t\t");
                _builder.append("if \"");
                String _firstLower = StringExtensions.toFirstLower(param.getName());
                _builder.append(_firstLower, "\t\t");
                _builder.append("\" in self.rules[\"");
                String _firstUpper_2 = StringExtensions.toFirstUpper(event.getEvent().getName());
                _builder.append(_firstUpper_2, "\t\t");
                _builder.append("\"].keys():");
                _builder.newLineIfNotEmpty();
                _builder.append("\t\t");
                _builder.append("\t");
                String _firstLower_1 = StringExtensions.toFirstLower(param.getName());
                _builder.append(_firstLower_1, "\t\t\t");
                _builder.append(" = self.rules[\"");
                String _firstUpper_3 = StringExtensions.toFirstUpper(event.getEvent().getName());
                _builder.append(_firstUpper_3, "\t\t\t");
                _builder.append("\"][\"");
                String _firstLower_2 = StringExtensions.toFirstLower(param.getName());
                _builder.append(_firstLower_2, "\t\t\t");
                _builder.append("\"].calc(self.port+\".\"+\"");
                String _firstUpper_4 = StringExtensions.toFirstUpper(event.getEvent().getName());
                _builder.append(_firstUpper_4, "\t\t\t");
                _builder.append("::");
                String _name = param.getName();
                _builder.append(_name, "\t\t\t");
                _builder.append("\",self.simulator.time)");
                _builder.newLineIfNotEmpty();
              }
            }
            _builder.append("\t\t");
            _builder.newLine();
            _builder.append("\t\t");
            String _firstLower_3 = StringExtensions.toFirstLower(event.getEvent().getParameterDeclarations().get(0).getName());
            _builder.append(_firstLower_3, "\t\t");
            _builder.append("=self.rules[\"");
            String _firstUpper_5 = StringExtensions.toFirstUpper(event.getEvent().getName());
            _builder.append(_firstUpper_5, "\t\t");
            _builder.append("\"].calc(self.port+\".\"+\"");
            String _firstUpper_6 = StringExtensions.toFirstUpper(event.getEvent().getName());
            _builder.append(_firstUpper_6, "\t\t");
            _builder.append("\",self.simulator.time)");
            _builder.newLineIfNotEmpty();
            _builder.append("\t\t");
            _builder.append("#");
            Type _type = event.getEvent().getParameterDeclarations().get(0).getType();
            _builder.append(_type, "\t\t");
            _builder.newLineIfNotEmpty();
            _builder.append("\t\t");
            _builder.append("self.event_cntr=self.event_cntr+1");
            _builder.newLine();
            _builder.append("\t\t");
            _builder.append("for call in self.calls:");
            _builder.newLine();
            _builder.append("\t\t\t");
            _builder.append("if IESC_SYNC:");
            _builder.newLine();
            _builder.append("\t\t\t\t");
            _builder.append("callEvent=lambda:call.raise");
            String _firstUpper_7 = StringExtensions.toFirstUpper(event.getEvent().getName());
            _builder.append(_firstUpper_7, "\t\t\t\t");
            _builder.append("(");
            CharSequence _generateFuncParams_1 = TransformationUtility.generateFuncParams(event.getEvent());
            _builder.append(_generateFuncParams_1, "\t\t\t\t");
            _builder.append(");");
            _builder.newLineIfNotEmpty();
            _builder.append("\t\t\t\t");
            _builder.append("self.events.append(Event(self,self.simulator.time,callEvent))");
            _builder.newLine();
            _builder.append("\t\t\t");
            _builder.append("else:");
            _builder.newLine();
            _builder.append("\t\t\t\t");
            _builder.append("call.raise");
            String _firstUpper_8 = StringExtensions.toFirstUpper(event.getEvent().getName());
            _builder.append(_firstUpper_8, "\t\t\t\t");
            _builder.append("(");
            CharSequence _generateFuncParams_2 = TransformationUtility.generateFuncParams(event.getEvent());
            _builder.append(_generateFuncParams_2, "\t\t\t\t");
            _builder.append(")");
            _builder.newLineIfNotEmpty();
          }
        }
        _builder.newLine();
        _builder.append("#");
        CharSequence _generateInterfaceSubClass = this.generateInterfaceSubClass(i);
        _builder.append(_generateInterfaceSubClass);
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder;
  }

  public String generateDelayClasses(final List<EnvironmentConnections> connections) {
    final Function1<EnvironmentConnections, Boolean> _function = (EnvironmentConnections c) -> {
      return Boolean.valueOf((c.component instanceof EnvironmentDelay));
    };
    final Function1<EnvironmentConnections, Interface> _function_1 = (EnvironmentConnections c) -> {
      return c.component.getOutports().get(0).getInterfaceRealization().getInterface();
    };
    Set<Interface> interfaces = IterableExtensions.<Interface>toSet(IterableExtensions.<EnvironmentConnections, Interface>map(IterableExtensions.<EnvironmentConnections>filter(connections, _function), _function_1));
    StringBuilder classes = new StringBuilder();
    for (final Interface i : interfaces) {
      StringConcatenation _builder = new StringConcatenation();
      CharSequence _generateInterface = this.generateInterface(i);
      _builder.append(_generateInterface);
      _builder.newLineIfNotEmpty();
      _builder.append("class Delay");
      String _firstUpper = StringExtensions.toFirstUpper(i.getName());
      _builder.append(_firstUpper);
      _builder.append("():");
      _builder.newLineIfNotEmpty();
      _builder.append("\t");
      _builder.append("def configure(self,name,inport,calls,rules,simulator):");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("self.name=name");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("callitem=list(calls.items())[0]#only one out port");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("self.calls=callitem[1]");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("self.port=callitem[0]");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("self.rules=list(rules.items())[0][1]#only one out port");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("self.event_cntr=0");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("self.inport=inport");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("if inport is not None:");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("inport.registerListener(self)");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("self.simulator=simulator");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("#iterating through ports");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("for port in list(rules.keys()):");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("pevents=list(rules[port].keys())");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("#iterating through events");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("for pevent in pevents:");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("rule=rules[port][pevent]");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("simulator.dists.append(rule)");
      _builder.newLine();
      _builder.newLine();
      _builder.newLine();
      _builder.append("\t");
      _builder.append("def generateEvents(self):");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("self.events.clear()");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("pass");
      _builder.newLine();
      _builder.newLine();
      _builder.append("\t");
      _builder.append("@JOverride");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("def schedule(self):");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("pass");
      _builder.newLine();
      _builder.newLine();
      _builder.append("\t");
      _builder.append("@JOverride");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("def isEmpty(self):");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("return True");
      _builder.newLine();
      _builder.newLine();
      _builder.append("\t");
      _builder.append("#definition of the interface functions");
      _builder.newLine();
      {
        EList<EventDeclaration> _events = i.getEvents();
        for(final EventDeclaration event : _events) {
          _builder.append("\t");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("@JOverride");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("def raise");
          String _firstUpper_1 = StringExtensions.toFirstUpper(event.getEvent().getName());
          _builder.append(_firstUpper_1, "\t");
          _builder.append("(self,");
          CharSequence _generateFuncParams = TransformationUtility.generateFuncParams(event.getEvent());
          _builder.append(_generateFuncParams, "\t");
          _builder.append("):");
          _builder.newLineIfNotEmpty();
          _builder.append("\t");
          _builder.append("\t");
          _builder.append("time=self.rules[\"");
          String _firstUpper_2 = StringExtensions.toFirstUpper(event.getEvent().getName());
          _builder.append(_firstUpper_2, "\t\t");
          _builder.append("\"].calc(self.port+\".\"+\"");
          String _firstUpper_3 = StringExtensions.toFirstUpper(event.getEvent().getName());
          _builder.append(_firstUpper_3, "\t\t");
          _builder.append("\",self.simulator.time)");
          _builder.newLineIfNotEmpty();
          _builder.append("\t");
          _builder.append("\t");
          _builder.append("self.event_cntr=self.event_cntr+1");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("\t");
          _builder.append("failureTime=abs(time)+self.simulator.time");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("\t");
          _builder.append("for callitem in self.calls:");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("\t\t");
          _builder.append("callEvent=lambda:callitem.raise");
          String _firstUpper_4 = StringExtensions.toFirstUpper(event.getEvent().getName());
          _builder.append(_firstUpper_4, "\t\t\t");
          _builder.append("(");
          CharSequence _generateFuncParams_1 = TransformationUtility.generateFuncParams(event.getEvent());
          _builder.append(_generateFuncParams_1, "\t\t\t");
          _builder.append(");");
          _builder.newLineIfNotEmpty();
          _builder.append("\t");
          _builder.append("\t\t");
          _builder.append("self.simulator.events.append(Event(self,failureTime,callEvent))");
          _builder.newLine();
        }
      }
      _builder.append("#");
      CharSequence _generateInterfaceSubClass = this.generateInterfaceSubClass(i);
      _builder.append(_generateInterfaceSubClass);
      _builder.newLineIfNotEmpty();
      _builder.newLine();
      classes.append(_builder);
    }
    return classes.toString();
  }

  public String generateSwitchClasses(final List<EnvironmentConnections> connections) {
    final Function1<EnvironmentConnections, Boolean> _function = (EnvironmentConnections c) -> {
      return Boolean.valueOf((c.component instanceof EnvironmentSwitch));
    };
    final Function1<EnvironmentConnections, Interface> _function_1 = (EnvironmentConnections c) -> {
      return c.component.getOutports().get(0).getInterfaceRealization().getInterface();
    };
    Set<Interface> interfaces = IterableExtensions.<Interface>toSet(IterableExtensions.<EnvironmentConnections, Interface>map(IterableExtensions.<EnvironmentConnections>filter(connections, _function), _function_1));
    StringBuilder classes = new StringBuilder();
    for (final Interface i : interfaces) {
      StringConcatenation _builder = new StringConcatenation();
      CharSequence _generateInterface = this.generateInterface(i);
      _builder.append(_generateInterface);
      _builder.newLineIfNotEmpty();
      _builder.append("class Switch");
      String _firstUpper = StringExtensions.toFirstUpper(i.getName());
      _builder.append(_firstUpper);
      _builder.append("():");
      _builder.newLineIfNotEmpty();
      _builder.newLine();
      _builder.append("\t");
      _builder.append("def configure(self,name,inport,calls,portarray,categorical,simulator,compCall,shname):");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("self.name=name");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("self.calls=calls");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("self.categorical=categorical");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("self.portarray=portarray");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("self.event_cntr=0");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("self.events=[]");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("self.inport=inport");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("if inport is not None:");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("inport.registerListener(self)");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("compCall.registerEnvironmentComponent(shname,self)");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("self.simulator=simulator");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("self.simulator.dists.append(categorical)");
      _builder.newLine();
      _builder.newLine();
      _builder.append("\t");
      _builder.append("def generateEvents(self):");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("pass");
      _builder.newLine();
      _builder.newLine();
      _builder.newLine();
      _builder.newLine();
      _builder.append("\t");
      _builder.append("@JOverride");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("def schedule(self):");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("for event in self.events:");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("event.callEvent()");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("self.events.clear()");
      _builder.newLine();
      _builder.newLine();
      _builder.append("\t");
      _builder.append("@JOverride");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("def isEmpty(self):");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("return (len(self.events)==0)");
      _builder.newLine();
      _builder.append("\t");
      _builder.newLine();
      _builder.append("\t");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("#definition of the interface functions");
      _builder.newLine();
      {
        EList<EventDeclaration> _events = i.getEvents();
        for(final EventDeclaration event : _events) {
          _builder.newLine();
          _builder.append("\t");
          _builder.append("@JOverride");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("def raise");
          String _firstUpper_1 = StringExtensions.toFirstUpper(event.getEvent().getName());
          _builder.append(_firstUpper_1, "\t");
          _builder.append("(self,");
          CharSequence _generateFuncParams = TransformationUtility.generateFuncParams(event.getEvent());
          _builder.append(_generateFuncParams, "\t");
          _builder.append("):");
          _builder.newLineIfNotEmpty();
          _builder.append("\t\t");
          _builder.append("port=self.portarray[self.categorical.calc()]");
          _builder.newLine();
          _builder.append("\t\t");
          _builder.append("eventcalls=self.calls[port]#[\"");
          String _firstUpper_2 = StringExtensions.toFirstUpper(event.getEvent().getName());
          _builder.append(_firstUpper_2, "\t\t");
          _builder.append("\"]");
          _builder.newLineIfNotEmpty();
          _builder.append("\t\t");
          _builder.append("self.event_cntr=self.event_cntr+1");
          _builder.newLine();
          _builder.append("\t\t");
          _builder.append("for call in eventcalls:");
          _builder.newLine();
          _builder.append("\t\t\t");
          _builder.append("if call is not None:");
          _builder.newLine();
          _builder.append("\t\t\t\t");
          _builder.append("if IESC_SYNC:");
          _builder.newLine();
          _builder.append("\t\t\t\t\t");
          _builder.append("callEvent=lambda:call.raise");
          String _firstUpper_3 = StringExtensions.toFirstUpper(event.getEvent().getName());
          _builder.append(_firstUpper_3, "\t\t\t\t\t");
          _builder.append("(");
          CharSequence _generateFuncParams_1 = TransformationUtility.generateFuncParams(event.getEvent());
          _builder.append(_generateFuncParams_1, "\t\t\t\t\t");
          _builder.append(");");
          _builder.newLineIfNotEmpty();
          _builder.append("\t\t\t\t\t");
          _builder.append("self.events.append(Event(self,self.simulator.time,callEvent))");
          _builder.newLine();
          _builder.append("\t\t\t\t");
          _builder.append("else:");
          _builder.newLine();
          _builder.append("\t\t\t\t\t");
          _builder.append("call.raise");
          String _firstUpper_4 = StringExtensions.toFirstUpper(event.getEvent().getName());
          _builder.append(_firstUpper_4, "\t\t\t\t\t");
          _builder.append("(");
          CharSequence _generateFuncParams_2 = TransformationUtility.generateFuncParams(event.getEvent());
          _builder.append(_generateFuncParams_2, "\t\t\t\t\t");
          _builder.append(")");
          _builder.newLineIfNotEmpty();
        }
      }
      _builder.append("#");
      CharSequence _generateInterfaceSubClass = this.generateInterfaceSubClass(i);
      _builder.append(_generateInterfaceSubClass);
      _builder.newLineIfNotEmpty();
      classes.append(_builder);
    }
    return classes.toString();
  }

  public CharSequence generateEventClass() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("class Event():");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("def __init__(self,eventSource,eventTime):");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("self.eventSource=eventSource");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("self.eventTime=eventTime");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("def __init__(self,eventSource,eventTime,eventCall):");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("self.eventSource=eventSource");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("self.eventTime=eventTime");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("self.eventCall=eventCall");
    _builder.newLine();
    return _builder;
  }

  public CharSequence generateClasses(final List<EnvironmentConnections> connections) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("# environment component classes");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    CharSequence _generateEventClass = this.generateEventClass();
    _builder.append(_generateEventClass);
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.newLine();
    CharSequence _generatePeriodicEventSourceClass = this.generatePeriodicEventSourceClass();
    _builder.append(_generatePeriodicEventSourceClass);
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.newLine();
    CharSequence _generateEventSourceClass = this.generateEventSourceClass();
    _builder.append(_generateEventSourceClass);
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.newLine();
    final Function1<EnvironmentConnections, Boolean> _function = (EnvironmentConnections c) -> {
      return Boolean.valueOf((c.component instanceof EnvironmentDelay));
    };
    String _generateDelayClasses = this.generateDelayClasses(
      IterableExtensions.<EnvironmentConnections>toList(IterableExtensions.<EnvironmentConnections>filter(connections, _function)));
    _builder.append(_generateDelayClasses);
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    final Function1<EnvironmentConnections, Boolean> _function_1 = (EnvironmentConnections c) -> {
      return Boolean.valueOf((c.component instanceof EnvironmentSwitch));
    };
    String _generateSwitchClasses = this.generateSwitchClasses(
      IterableExtensions.<EnvironmentConnections>toList(IterableExtensions.<EnvironmentConnections>filter(connections, _function_1)));
    _builder.append(_generateSwitchClasses);
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    final Function1<EnvironmentConnections, Boolean> _function_2 = (EnvironmentConnections c) -> {
      return Boolean.valueOf((c.component instanceof EnvironmentSample));
    };
    CharSequence _generateSampleClasses = this.generateSampleClasses(
      IterableExtensions.<EnvironmentConnections>toList(IterableExtensions.<EnvironmentConnections>filter(connections, _function_2)));
    _builder.append(_generateSampleClasses);
    _builder.newLineIfNotEmpty();
    return _builder;
  }
}

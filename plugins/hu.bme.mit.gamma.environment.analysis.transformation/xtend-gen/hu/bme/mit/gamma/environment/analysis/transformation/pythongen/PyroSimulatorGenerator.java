package hu.bme.mit.gamma.environment.analysis.transformation.pythongen;

import hu.bme.mit.gamma.codegeneration.java.util.TimingDeterminer;
import hu.bme.mit.gamma.environment.analysis.AnalysisComponent;
import hu.bme.mit.gamma.environment.analysis.AnalysisMethod;
import hu.bme.mit.gamma.environment.analysis.EndCondition;
import hu.bme.mit.gamma.environment.analysis.SimulationAnalysisMethod;
import hu.bme.mit.gamma.environment.analysis.transformation.util.ElementaryComponentCollector;
import hu.bme.mit.gamma.environment.analysis.transformation.util.EnvironmentConnections;
import hu.bme.mit.gamma.environment.analysis.transformation.util.TransformationUtility;
import hu.bme.mit.gamma.environment.model.EnvironmentAsynchronousCompositeComponentInstance;
import hu.bme.mit.gamma.environment.model.EnvironmentSynchronousCompositeComponentInstance;
import hu.bme.mit.gamma.expression.util.ExpressionEvaluator;
import hu.bme.mit.gamma.statechart.composite.ComponentInstance;
import java.io.File;
import java.util.ArrayList;
import java.util.List;
import org.eclipse.core.resources.IProject;
import org.eclipse.core.resources.IWorkspace;
import org.eclipse.core.resources.ResourcesPlugin;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.xbase.lib.CollectionLiterals;
import org.eclipse.xtext.xbase.lib.StringExtensions;

@SuppressWarnings("all")
public class PyroSimulatorGenerator {
  public CharSequence generate(final AnalysisComponent analysis_component, final String packageName, final String basePackage) {
    CharSequence _xblockexpression = null;
    {
      EObject _xifexpression = null;
      EnvironmentAsynchronousCompositeComponentInstance _analyzedComponent = analysis_component.getAnalyzedComponent();
      if ((_analyzedComponent instanceof EnvironmentAsynchronousCompositeComponentInstance)) {
        EnvironmentAsynchronousCompositeComponentInstance _analyzedComponent_1 = analysis_component.getAnalyzedComponent();
        _xifexpression = ((EnvironmentAsynchronousCompositeComponentInstance) _analyzedComponent_1).getType();
      } else {
        EnvironmentAsynchronousCompositeComponentInstance _analyzedComponent_2 = analysis_component.getAnalyzedComponent();
        _xifexpression = ((EnvironmentSynchronousCompositeComponentInstance) _analyzedComponent_2).getType();
      }
      EObject component = ((EObject)_xifexpression);
      ArrayList<ComponentInstance> stack = CollectionLiterals.<ComponentInstance>newArrayList();
      List<EnvironmentConnections> connections = ElementaryComponentCollector.collect(analysis_component.getAnalyzedComponent(), stack);
      PyroDistGenerator distGenerator = new PyroDistGenerator();
      PyroComponentClassGenerator compClassGenerator = new PyroComponentClassGenerator(packageName);
      ExpressionEvaluator expEval = ExpressionEvaluator.INSTANCE;
      IWorkspace workspace = ResourcesPlugin.getWorkspace();
      IProject[] projectName = ResourcesPlugin.getWorkspace().getRoot().getProjects();
      String workspaceDirectory = workspace.getRoot().getRawLocationURI().toString().replaceAll("^file:/", "").replace('/', File.separatorChar);
      final String strSep = ("\\" + File.separator);
      String jarSources = ((basePackage + File.separator) + "bin").replaceAll("\\\\", "\\\\\\\\").replaceAll("/", "\\\\\\\\");
      AnalysisMethod _analysismethod = analysis_component.getAnalysismethod();
      SimulationAnalysisMethod analysismethod = ((SimulationAnalysisMethod) _analysismethod);
      String _property = System.getProperty("java.home");
      String _plus = (_property + File.separator);
      String _plus_1 = (_plus + "bin");
      String _plus_2 = (_plus_1 + File.separator);
      String _plus_3 = (_plus_2 + "server");
      String _plus_4 = (_plus_3 + File.separator);
      String jvmHome = (_plus_4 + "jvm.dll").replaceAll("\\\\", "\\\\\\\\");
      PyroAnalysisGenerator analysisGen = new PyroAnalysisGenerator();
      StringConcatenation _builder = new StringConcatenation();
      _builder.newLine();
      CharSequence _generateImports = this.generateImports();
      _builder.append(_generateImports);
      _builder.newLineIfNotEmpty();
      _builder.newLine();
      _builder.append("# turn on debug mode");
      _builder.newLine();
      _builder.append("DEBUG=False");
      _builder.newLine();
      _builder.append("# manually build the java code");
      _builder.newLine();
      _builder.append("BUILD=False");
      _builder.newLine();
      _builder.append("# synchronization of elementary stochastic components in synchronous composition");
      _builder.newLine();
      _builder.append("IESC_SYNC=False");
      _builder.newLine();
      _builder.newLine();
      _builder.append("# conversion between the time unit of elementary stochastic components and millisecond");
      _builder.newLine();
      _builder.append("time_conv=1000000000.0*60*60*1000");
      _builder.newLine();
      _builder.newLine();
      _builder.append("simTime=");
      String _string = Double.toString(expEval.evaluateDecimal(analysismethod.getSimulationTime()));
      _builder.append(_string);
      _builder.newLineIfNotEmpty();
      _builder.append("simNumber=");
      int _evaluateInteger = expEval.evaluateInteger(analysismethod.getSimulationNumber());
      _builder.append(_evaluateInteger);
      _builder.newLineIfNotEmpty();
      _builder.newLine();
      CharSequence _generateMarginalVisualisation = analysisGen.generateMarginalVisualisation();
      _builder.append(_generateMarginalVisualisation);
      _builder.newLineIfNotEmpty();
      _builder.newLine();
      String _generateDiagPrint = this.generateDiagPrint();
      _builder.append(_generateDiagPrint);
      _builder.newLineIfNotEmpty();
      _builder.newLine();
      _builder.append("print(\'initiating Python-Java connection\')");
      _builder.newLine();
      _builder.newLine();
      _builder.append("def create_detmodel():");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("if BUILD:");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("commands = [\"\"\"javac $(find ");
      String _replaceAll = workspaceDirectory.replaceAll("\\\\", "\\\\\\\\");
      _builder.append(_replaceAll, "\t\t");
      _builder.append(" -name \"*.java\")\"\"\"]");
      _builder.newLineIfNotEmpty();
      _builder.append("\t\t");
      _builder.append("for command in commands:");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("if os.system(command) == 0:");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("continue");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("else:");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("print( \"ERROR\")");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("break");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("startJVM(\"\"\"");
      _builder.append(jvmHome, "\t");
      _builder.append("\"\"\", \'-ea\',\"\"\"-Djava.class.path=");
      _builder.append(jarSources, "\t");
      _builder.append("\"\"\")");
      _builder.newLineIfNotEmpty();
      _builder.append("\t");
      _builder.append("detmodel = 0");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("DetModelEntryPoint = JClass(\'javaenv.DetModelEntryPoint\')");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("detmodel = DetModelEntryPoint()");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("print(\'Python-Java connection established\')");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("return detmodel");
      _builder.newLine();
      _builder.newLine();
      _builder.append("detmodel=create_detmodel()");
      _builder.newLine();
      _builder.newLine();
      _builder.newLine();
      _builder.newLine();
      _builder.append("# python classes of random variables and distributions");
      _builder.newLine();
      CharSequence _generateClasses = distGenerator.generateClasses();
      _builder.append(_generateClasses);
      _builder.newLineIfNotEmpty();
      _builder.newLine();
      _builder.append("#");
      _builder.newLine();
      CharSequence _generateClasses_1 = compClassGenerator.generateClasses(connections);
      _builder.append(_generateClasses_1);
      _builder.newLineIfNotEmpty();
      _builder.newLine();
      _builder.append("#");
      _builder.newLine();
      CharSequence _generate = PyroStochasticClassGenerator.generate(analysis_component, packageName);
      _builder.append(_generate);
      _builder.newLineIfNotEmpty();
      _builder.newLine();
      _builder.newLine();
      _builder.append("print(\"creating stochastic event generator\")");
      _builder.newLine();
      _builder.append("stochmodel=0");
      _builder.newLine();
      _builder.append("try:");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("stochmodel = StochasticEventGenerator(detmodel)");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("print(\"stochastic event generator is successfully created\")");
      _builder.newLine();
      _builder.append("except jpype.JException as ex:");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("print(\"Caught base exception : \", str(ex))");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("print(ex.stacktrace())");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("shutdownJVM()");
      _builder.newLine();
      _builder.append("except Exception as ex:");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("print(\"Caught python exception :\", str(ex))");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("traceback.print_exc()");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("shutdownJVM()");
      _builder.newLine();
      _builder.newLine();
      _builder.append("def state2num(state):");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("if state==\"run\":");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("return 0.0");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("else:");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("return 1.0");
      _builder.newLine();
      _builder.newLine();
      CharSequence _generateSimulator = this.generateSimulator(analysis_component);
      _builder.append(_generateSimulator);
      _builder.newLineIfNotEmpty();
      _builder.newLine();
      CharSequence _generateMain = analysisGen.generateMain(analysis_component);
      _builder.append(_generateMain);
      _builder.newLineIfNotEmpty();
      _builder.newLine();
      _builder.newLine();
      _builder.newLine();
      _xblockexpression = _builder;
    }
    return _xblockexpression;
  }

  public CharSequence generateImports() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("import pyro");
    _builder.newLine();
    _builder.append("import torch");
    _builder.newLine();
    _builder.append("import pyro.distributions as dist");
    _builder.newLine();
    _builder.append("import pyro.contrib.gp as gp");
    _builder.newLine();
    _builder.append("import numpy as np");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import math");
    _builder.newLine();
    _builder.append("from math import exp");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import matplotlib.pyplot as plt");
    _builder.newLine();
    _builder.append("import matplotlib");
    _builder.newLine();
    _builder.newLine();
    _builder.append("# import datetime");
    _builder.newLine();
    _builder.append("# from influxdb import InfluxDBClient");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.append("import time");
    _builder.newLine();
    _builder.append("import os");
    _builder.newLine();
    _builder.append("import traceback");
    _builder.newLine();
    _builder.append("from jpype import JImplements, JOverride");
    _builder.newLine();
    _builder.append("from jpype import *");
    _builder.newLine();
    _builder.append("import jpype");
    _builder.newLine();
    _builder.append("import hashlib");
    _builder.newLine();
    _builder.newLine();
    return _builder;
  }

  public CharSequence generateSimulator(final AnalysisComponent analysis_component) {
    CharSequence _xblockexpression = null;
    {
      AnalysisMethod _analysismethod = analysis_component.getAnalysismethod();
      SimulationAnalysisMethod analysismethod = ((SimulationAnalysisMethod) _analysismethod);
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("def simulate():");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("# global objects: stochastic event generator and deterministic evaluator");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("global stochmodel, detmodel");
      _builder.newLine();
      _builder.append("\t");
      _builder.newLine();
      _builder.append("\t");
      CharSequence _generateDebugAspectVars = TransformationUtility.generateDebugAspectVars(analysis_component.getAspect());
      _builder.append(_generateDebugAspectVars, "\t");
      _builder.newLineIfNotEmpty();
      _builder.append("\t");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("if DEBUG:");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("print(\"New simulation run --------------------------------------------------\")");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("dinit()");
      _builder.newLine();
      _builder.append("\t");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("# initialize the stochastic event generator");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("stochmodel.reset()");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("stochmodel.generateEvents()");
      _builder.newLine();
      _builder.append("\t");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("# schedule the asynchronous component");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("detmodel.get");
      String _firstUpper = StringExtensions.toFirstUpper(analysis_component.getAnalyzedComponent().getName());
      _builder.append(_firstUpper, "\t");
      _builder.append("().schedule()");
      _builder.newLineIfNotEmpty();
      _builder.append("\t");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("if DEBUG:");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("print(\"Initial events: ---------------------------------------------\")");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("dprint(\'note over stochmodel \')");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("dprint(\'| Source of the event | Name of the event | Time of the event |\')");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("for event in stochmodel.events:");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("print(\"      ESC name: \", event.eventSource.name + \"   Event name: \" + event.name +\'   Time: \' + str(event.eventTime))");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("dprint(\"|   \", event.eventSource.name + \"   | \" + event.name +\'   | \' + str(event.eventTime)+ \' |\')");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("print(\"Simulation events: ---------------------------------------------\")");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("dprint(\'endnote\')");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("#dprint(\"== Simulation Starts ==\")");
      _builder.newLine();
      _builder.append("\t");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("# run the simulator until there are stochastic events available and simulation time is not reached");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("while len(stochmodel.events) > 0 and stochmodel.time <= simTime:");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.newLine();
      _builder.newLine();
      _builder.append("\t\t");
      _builder.newLine();
      {
        boolean _needTimer = TimingDeterminer.INSTANCE.needTimer(analysis_component.getAnalyzedComponent().getType());
        if (_needTimer) {
          _builder.append("\t\t");
          _builder.append("gamma_time=detmodel.timer.getEarliestTime()");
          _builder.newLine();
          _builder.append("\t\t");
          _builder.append("stoch_time=(stochmodel.getEarliestTime())*time_conv");
          _builder.newLine();
          _builder.append("\t\t");
          _builder.append("# if Deterministic Evaluator code has the earliest alarm clock");
          _builder.newLine();
          _builder.append("\t\t");
          _builder.append("if (float(gamma_time) < stoch_time) and (float(gamma_time)<=(simTime-stochmodel.time)*time_conv):");
          _builder.newLine();
          _builder.append("\t\t");
          _builder.append("\t");
          _builder.append("if DEBUG:");
          _builder.newLine();
          _builder.append("\t\t");
          _builder.append("\t\t");
          _builder.append("print(\"Gamma timed event simulation++++++++++++\")");
          _builder.newLine();
          _builder.append("\t\t");
          _builder.append("\t\t");
          _builder.append("dprint(f\'detmodel -> detmodel : \"Gamma timeout, {str(stochmodel.time)} ms\"\')");
          _builder.newLine();
          _builder.append("\t\t");
          _builder.append("\t");
          _builder.append("detmodel.timer.elapse(gamma_time)");
          _builder.newLine();
          _builder.append("\t\t");
          _builder.append("\t");
          _builder.append("detmodel.get");
          String _firstUpper_1 = StringExtensions.toFirstUpper(analysis_component.getAnalyzedComponent().getName());
          _builder.append(_firstUpper_1, "\t\t\t");
          _builder.append("().schedule()");
          _builder.newLineIfNotEmpty();
          _builder.append("\t\t");
          _builder.append("# if Stochastic Event Generator has the earliest alarm clock");
          _builder.newLine();
          _builder.append("\t\t");
          _builder.append("else:");
          _builder.newLine();
          _builder.append("\t\t");
          _builder.append("\t");
          _builder.append("# get the event with the earliest clock");
          _builder.newLine();
          _builder.append("\t\t");
          _builder.append("\t");
          _builder.append("event = stochmodel.popEvent()");
          _builder.newLine();
          _builder.append("\t\t");
          _builder.append("\t");
          _builder.newLine();
          _builder.append("\t\t");
          _builder.append("\t");
          _builder.append("# insert the event into the deterministic evaluator");
          _builder.newLine();
          _builder.append("\t\t");
          _builder.append("\t");
          _builder.append("stochmodel.time = event.eventTime");
          _builder.newLine();
          _builder.append("\t\t");
          _builder.append("\t");
          _builder.newLine();
          _builder.append("\t\t");
          _builder.append("\t");
          _builder.append("if stochmodel.time > simTime :");
          _builder.newLine();
          _builder.append("\t\t");
          _builder.append("\t\t");
          _builder.append("if DEBUG:");
          _builder.newLine();
          _builder.append("\t\t");
          _builder.append("\t\t\t");
          _builder.append("print(\"End condition is satisfied: ---------------------------------------------\")");
          _builder.newLine();
          _builder.append("\t\t");
          _builder.append("\t\t\t");
          _builder.append("print(\"       Out of time\")");
          _builder.newLine();
          _builder.append("\t\t");
          _builder.append("\t\t");
          _builder.append("break");
          _builder.newLine();
          _builder.append("\t\t");
          _builder.append("\t");
          _builder.newLine();
          _builder.append("\t\t");
          _builder.append("\t");
          _builder.append("# print debug event information");
          _builder.newLine();
          _builder.append("\t\t");
          _builder.append("\t");
          _builder.append("if DEBUG:");
          _builder.newLine();
          _builder.append("\t\t");
          _builder.append("\t\t");
          _builder.append("print(\"      ESC name: \", event.eventSource.name + \"   Event name: \" + event.name + \'   Time: \' + str(event.eventTime))");
          _builder.newLine();
          _builder.append("\t\t");
          _builder.append("\t\t");
          _builder.append("dprint(f\'stochmodel -> detmodel : {event.eventSource.name}  ::  {event.name} at {str(event.eventTime)}\')");
          _builder.newLine();
          _builder.append("\t\t");
          _builder.append("\t\t");
          _builder.newLine();
          _builder.append("\t\t");
          _builder.append("\t");
          _builder.append("# raise the event");
          _builder.newLine();
          _builder.append("\t\t");
          _builder.append("\t");
          _builder.append("event.eventCall()");
          _builder.newLine();
          _builder.append("\t\t");
          _builder.append("\t");
          _builder.newLine();
          _builder.append("\t\t");
          _builder.append("\t");
          _builder.append("# schedule the deterministic evaluator");
          _builder.newLine();
          _builder.append("\t\t");
          _builder.append("\t");
          _builder.append("detmodel.get");
          String _firstUpper_2 = StringExtensions.toFirstUpper(analysis_component.getAnalyzedComponent().getName());
          _builder.append(_firstUpper_2, "\t\t\t");
          _builder.append("().schedule()");
          _builder.newLineIfNotEmpty();
        } else {
          _builder.append("\t\t");
          _builder.append("# get the event with the earliest clock");
          _builder.newLine();
          _builder.append("\t\t");
          _builder.append("stochmodel.getEarliestTime()");
          _builder.newLine();
          _builder.append("\t\t");
          _builder.append("event = stochmodel.popEvent()");
          _builder.newLine();
          _builder.append("\t\t");
          _builder.newLine();
          _builder.append("\t\t");
          _builder.append("# insert the event into the deterministic evaluator");
          _builder.newLine();
          _builder.append("\t\t");
          _builder.append("stochmodel.time = event.eventTime");
          _builder.newLine();
          _builder.append("\t\t");
          _builder.newLine();
          _builder.append("\t\t");
          _builder.append("if stochmodel.time > simTime :");
          _builder.newLine();
          _builder.append("\t\t");
          _builder.append("\t");
          _builder.append("if DEBUG:");
          _builder.newLine();
          _builder.append("\t\t");
          _builder.append("\t\t");
          _builder.append("print(\"End condition is satisfied: ---------------------------------------------\")");
          _builder.newLine();
          _builder.append("\t\t");
          _builder.append("\t\t");
          _builder.append("print(\"       Out of time\")");
          _builder.newLine();
          _builder.append("\t\t");
          _builder.append("\t\t");
          _builder.append("dprint(\"== Simulation Ends: Time limit is reached ==\")");
          _builder.newLine();
          _builder.append("\t\t");
          _builder.append("\t");
          _builder.append("break");
          _builder.newLine();
          _builder.append("\t\t");
          _builder.newLine();
          _builder.append("\t\t");
          _builder.append("# print debug event information");
          _builder.newLine();
          _builder.append("\t\t");
          _builder.append("if DEBUG:");
          _builder.newLine();
          _builder.append("\t\t");
          _builder.append("\t");
          _builder.append("print(\"      ESC name: \", event.eventSource.name + \"   Event name: \" + event.name + \'   Time: \' + str(event.eventTime))");
          _builder.newLine();
          _builder.append("\t\t");
          _builder.append("\t");
          _builder.append("dprint(f\'stochmodel -> detmodel : \"{event.eventSource.name}  ::  {event.name} at {str(event.eventTime)}\"\')");
          _builder.newLine();
          _builder.append("\t\t");
          _builder.append("\t");
          _builder.newLine();
          _builder.append("\t\t");
          _builder.append("# raise the event");
          _builder.newLine();
          _builder.append("\t\t");
          _builder.append("event.eventCall()");
          _builder.newLine();
          _builder.append("\t\t");
          _builder.newLine();
          _builder.append("\t\t");
          _builder.append("# schedule the deterministic evaluator");
          _builder.newLine();
          _builder.append("\t\t");
          _builder.append("detmodel.get");
          String _firstUpper_3 = StringExtensions.toFirstUpper(analysis_component.getAnalyzedComponent().getName());
          _builder.append(_firstUpper_3, "\t\t");
          _builder.append("().schedule()");
          _builder.newLineIfNotEmpty();
        }
      }
      _builder.append("\t\t");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("# evaluate end condition");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.newLine();
      _builder.append("\t\t");
      CharSequence _generateDebugAspectRegistry = TransformationUtility.generateDebugAspectRegistry(analysis_component.getAspect());
      _builder.append(_generateDebugAspectRegistry, "\t\t");
      _builder.newLineIfNotEmpty();
      _builder.append("\t\t");
      _builder.newLine();
      {
        EList<EndCondition> _endcondition = analysismethod.getEndcondition();
        for(final EndCondition endCondition : _endcondition) {
          _builder.append("\t\t");
          _builder.append("if detmodel.monitorOf");
          String _generateEndConditionName = TransformationUtility.generateEndConditionName(endCondition);
          _builder.append(_generateEndConditionName, "\t\t");
          _builder.append(".state != \"run\":");
          _builder.newLineIfNotEmpty();
          _builder.append("\t\t");
          _builder.append("\t");
          _builder.append("# print debug end condition information");
          _builder.newLine();
          _builder.append("\t\t");
          _builder.append("\t");
          _builder.append("if DEBUG:");
          _builder.newLine();
          _builder.append("\t\t");
          _builder.append("\t\t");
          _builder.append("print(\"End condition is satisfied: ---------------------------------------------\")");
          _builder.newLine();
          _builder.append("\t\t");
          _builder.append("\t\t");
          _builder.append("print(\"      ");
          String _generateEndConditionName_1 = TransformationUtility.generateEndConditionName(endCondition);
          _builder.append(_generateEndConditionName_1, "\t\t\t\t");
          _builder.append(" : \", detmodel.monitorOf");
          String _generateEndConditionName_2 = TransformationUtility.generateEndConditionName(endCondition);
          _builder.append(_generateEndConditionName_2, "\t\t\t\t");
          _builder.append(".state)");
          _builder.newLineIfNotEmpty();
          _builder.append("\t\t");
          _builder.append("\t\t");
          _builder.append("dprint(\'hnote over analysis \')");
          _builder.newLine();
          _builder.append("\t\t");
          _builder.append("\t\t");
          _builder.append("dprint(\'");
          String _generateEndConditionName_3 = TransformationUtility.generateEndConditionName(endCondition);
          _builder.append(_generateEndConditionName_3, "\t\t\t\t");
          _builder.append(" is reached\')");
          _builder.newLineIfNotEmpty();
          _builder.append("\t\t");
          _builder.append("\t\t");
          _builder.append("dprint(\"endnote\")");
          _builder.newLine();
          _builder.append("\t\t");
          _builder.append("\t");
          _builder.append("break");
          _builder.newLine();
        }
      }
      _builder.append("\t");
      _builder.newLine();
      _builder.append("\t");
      CharSequence _generatePyroAspectRegistry = TransformationUtility.generatePyroAspectRegistry(analysis_component.getAspect());
      _builder.append(_generatePyroAspectRegistry, "\t");
      _builder.newLineIfNotEmpty();
      _builder.append("\t");
      _builder.newLine();
      _builder.append("\t");
      CharSequence _generatePyroConditionRegistry = TransformationUtility.generatePyroConditionRegistry(analysis_component.getConditions());
      _builder.append(_generatePyroConditionRegistry, "\t");
      _builder.newLineIfNotEmpty();
      _builder.append("\t");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("if DEBUG:");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("print(\"Simulation is finished! ---------------------------------------------\")");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("dsave()");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("# get the aspects and return from the simulations ");
      _builder.newLine();
      _builder.append("\t");
      CharSequence _generateSimulationReturn = TransformationUtility.generateSimulationReturn(analysis_component.getAspect());
      _builder.append(_generateSimulationReturn, "\t");
      _builder.newLineIfNotEmpty();
      _xblockexpression = _builder;
    }
    return _xblockexpression;
  }

  public String generateDiagPrint() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("debug_diag_cntr=0");
    _builder.newLine();
    _builder.append("debug_diag=\"\"");
    _builder.newLine();
    _builder.append("diag_hashes=set()");
    _builder.newLine();
    _builder.append("def dprint(*args, **kwargs):");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("global debug_diag");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("for a in args:");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("debug_diag=debug_diag+str(a)");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("debug_diag=debug_diag+\"\\n\"");
    _builder.newLine();
    _builder.newLine();
    _builder.append("def dinit():");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("global debug_diag");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("debug_diag=\"\"\"");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@startuml");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("participant \"Stochastic Models\" as stochmodel");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("participant \"Deteministic Models\" as detmodel");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("participant \"Analysis Case\" as analysis");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("\"\"\"");
    _builder.newLine();
    _builder.newLine();
    _builder.append("def dsave():");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("global debug_diag, debug_diag_cntr");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("debug_diag=debug_diag+(\"@enduml\")");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("#hash_str=hashlib.md5(debug_diag.encode()).hexdigest()");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("#if hash_str not in diag_hashes:");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("isExist = os.path.exists(\"debug_diag\")");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("if not isExist:");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("os.makedirs(\"debug_diag\")");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("with open(f\'debug_diag/diag{debug_diag_cntr}.plantuml\', \'w\') as f:");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("f.write(debug_diag)");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("debug_diag_cntr=debug_diag_cntr+1");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("print(debug_diag)");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("debug_diag=\"\"");
    _builder.newLine();
    return _builder.toString();
  }
}

/**
 * generated by Xtext 2.30.0.M2
 */
package hu.bme.mit.gamma.environment.language.ui.wizard;

import com.google.common.collect.Iterables;
import hu.bme.mit.gamma.util.FileUtil;
import java.io.File;
import java.net.URL;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.Collections;
import java.util.List;
import java.util.stream.Collectors;
import org.eclipse.core.runtime.FileLocator;
import org.eclipse.core.runtime.IStatus;
import org.eclipse.core.runtime.Path;
import org.eclipse.core.runtime.Platform;
import org.eclipse.jdt.core.JavaCore;
import org.eclipse.xtext.ui.XtextProjectHelper;
import org.eclipse.xtext.ui.util.PluginProjectFactory;
import org.eclipse.xtext.ui.wizard.template.AbstractProjectTemplate;
import org.eclipse.xtext.ui.wizard.template.IProjectGenerator;
import org.eclipse.xtext.ui.wizard.template.ProjectTemplate;
import org.eclipse.xtext.xbase.lib.CollectionLiterals;
import org.eclipse.xtext.xbase.lib.Exceptions;
import org.eclipse.xtext.xbase.lib.ObjectExtensions;
import org.eclipse.xtext.xbase.lib.Procedures.Procedure1;
import org.osgi.framework.Bundle;

@ProjectTemplate(label = "IoT Camera System Example Project", icon = "stochastic_gamma16.png", description = "<p><b>IoT Camera System Example Project</b></p>\n<p>This is a wizard to create  Stochastic Gamma Composition Project of an IoT camera system.</p>")
@SuppressWarnings("all")
public final class IoTStochasticGammaProject extends AbstractProjectTemplate {
  @Override
  protected void updateVariables() {
  }

  @Override
  protected IStatus validate() {
    return null;
  }

  @Override
  public void generateProjects(final IProjectGenerator generator) {
    PluginProjectFactory _pluginProjectFactory = new PluginProjectFactory();
    final Procedure1<PluginProjectFactory> _function = (PluginProjectFactory it) -> {
      try {
        it.setProjectName(this.getProjectInfo().getProjectName());
        it.setLocation(this.getProjectInfo().getLocationPath());
        List<String> _projectNatures = it.getProjectNatures();
        Iterables.<String>addAll(_projectNatures, Collections.<String>unmodifiableList(CollectionLiterals.<String>newArrayList(JavaCore.NATURE_ID, "org.eclipse.pde.PluginNature", XtextProjectHelper.NATURE_ID)));
        List<String> _builderIds = it.getBuilderIds();
        Iterables.<String>addAll(_builderIds, Collections.<String>unmodifiableList(CollectionLiterals.<String>newArrayList(JavaCore.BUILDER_ID, XtextProjectHelper.BUILDER_ID)));
        List<String> _folders = it.getFolders();
        _folders.add("src");
        List<String> _folders_1 = it.getFolders();
        _folders_1.add("src-gen");
        List<String> _folders_2 = it.getFolders();
        _folders_2.add("gateway-gen");
        List<String> _folders_3 = it.getFolders();
        _folders_3.add("simulator-gen");
        FileUtil futil = FileUtil.INSTANCE;
        Bundle bundle = Platform.getBundle("hu.bme.mit.gamma.environment.language.ui");
        Path _path = new Path("/resources/iot-models");
        URL url_m = FileLocator.find(bundle, _path);
        List<java.nio.file.Path> urls = Files.list(Paths.get(FileLocator.toFileURL(url_m).toURI())).collect(Collectors.<java.nio.file.Path>toList());
        for (final java.nio.file.Path url : urls) {
          {
            File file = url.toFile();
            String filename = file.getName();
            boolean _isFile = file.isFile();
            if (_isFile) {
              String contents = futil.loadString(file);
              this.addFile(it, ("model/" + filename), contents);
            }
          }
        }
      } catch (Throwable _e) {
        throw Exceptions.sneakyThrow(_e);
      }
    };
    PluginProjectFactory _doubleArrow = ObjectExtensions.<PluginProjectFactory>operator_doubleArrow(_pluginProjectFactory, _function);
    generator.generate(_doubleArrow);
  }
}

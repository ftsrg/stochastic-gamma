/**
 * generated by Xtext 2.30.0.M2
 */
package hu.bme.mit.gamma.environment.language.ui.wizard;

import com.google.common.collect.Iterables;
import java.util.Collections;
import java.util.List;
import org.eclipse.core.runtime.IStatus;
import org.eclipse.jdt.core.JavaCore;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.ui.XtextProjectHelper;
import org.eclipse.xtext.ui.util.PluginProjectFactory;
import org.eclipse.xtext.ui.wizard.template.AbstractProjectTemplate;
import org.eclipse.xtext.ui.wizard.template.BooleanTemplateVariable;
import org.eclipse.xtext.ui.wizard.template.GroupTemplateVariable;
import org.eclipse.xtext.ui.wizard.template.IProjectGenerator;
import org.eclipse.xtext.ui.wizard.template.ProjectTemplate;
import org.eclipse.xtext.ui.wizard.template.StringTemplateVariable;
import org.eclipse.xtext.xbase.lib.CollectionLiterals;
import org.eclipse.xtext.xbase.lib.ObjectExtensions;
import org.eclipse.xtext.xbase.lib.Procedures.Procedure1;
import org.eclipse.xtext.xbase.lib.StringExtensions;

@ProjectTemplate(label = "Stochastic Gamma Composition Modeling", icon = "stochastic_gamma16.png", description = "<p><b>Stochastic Gamma Composition Modeling</b></p>\r\n<p>This is a wizard to create a Stochastic Gamma Composition Modeling project.</p>")
@SuppressWarnings("all")
public final class GenericStochasticGammaProject extends AbstractProjectTemplate {
  private final BooleanTemplateVariable advanced = this.check("Custom model name:", false);

  private final GroupTemplateVariable advancedGroup = this.group("Properties");

  private final StringTemplateVariable name = this.text("Model name:", "The name of the main model", this.advancedGroup);

  @Override
  protected void updateVariables() {
    this.name.setEnabled(this.advanced.getValue());
    boolean _value = this.advanced.getValue();
    boolean _not = (!_value);
    if (_not) {
      this.name.setValue("Model");
    }
  }

  @Override
  protected IStatus validate() {
    return null;
  }

  @Override
  public void generateProjects(final IProjectGenerator generator) {
    PluginProjectFactory _pluginProjectFactory = new PluginProjectFactory();
    final Procedure1<PluginProjectFactory> _function = (PluginProjectFactory it) -> {
      it.setProjectName(this.getProjectInfo().getProjectName());
      it.setLocation(this.getProjectInfo().getLocationPath());
      String _string = this.name.toString();
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("\\s");
      final String model_name = StringExtensions.toFirstUpper(_string.replaceAll(_builder.toString(), "_"));
      final String pkg_name = model_name.toLowerCase();
      List<String> _projectNatures = it.getProjectNatures();
      Iterables.<String>addAll(_projectNatures, Collections.<String>unmodifiableList(CollectionLiterals.<String>newArrayList(JavaCore.NATURE_ID, "org.eclipse.pde.PluginNature", XtextProjectHelper.NATURE_ID)));
      List<String> _builderIds = it.getBuilderIds();
      Iterables.<String>addAll(_builderIds, Collections.<String>unmodifiableList(CollectionLiterals.<String>newArrayList(JavaCore.BUILDER_ID, XtextProjectHelper.BUILDER_ID)));
      List<String> _folders = it.getFolders();
      _folders.add("src");
      List<String> _folders_1 = it.getFolders();
      _folders_1.add("src-gen");
      List<String> _folders_2 = it.getFolders();
      _folders_2.add("gateway-gen");
      List<String> _folders_3 = it.getFolders();
      _folders_3.add("simulator-gen");
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("model/");
      _builder_1.append(pkg_name);
      _builder_1.append(".sgcd");
      StringConcatenation _builder_2 = new StringConcatenation();
      _builder_2.append("package ");
      _builder_2.append(pkg_name);
      _builder_2.newLineIfNotEmpty();
      _builder_2.append("import \"interfaces\"");
      _builder_2.newLine();
      _builder_2.append("stochastic async ");
      _builder_2.append(model_name);
      _builder_2.append(" [");
      _builder_2.newLineIfNotEmpty();
      _builder_2.append("] {");
      _builder_2.newLine();
      _builder_2.append("\t");
      _builder_2.newLine();
      _builder_2.append("}");
      _builder_2.newLine();
      this.addFile(it, _builder_1, _builder_2);
      StringConcatenation _builder_3 = new StringConcatenation();
      _builder_3.append("model/interfaces.gcd");
      StringConcatenation _builder_4 = new StringConcatenation();
      _builder_4.append("package inerfaces");
      _builder_4.newLine();
      _builder_4.newLine();
      _builder_4.append("interface TestInterface{");
      _builder_4.newLine();
      _builder_4.append("\t");
      _builder_4.append("out event newEvent");
      _builder_4.newLine();
      _builder_4.append("}");
      _builder_4.newLine();
      _builder_4.newLine();
      this.addFile(it, _builder_3, _builder_4);
    };
    PluginProjectFactory _doubleArrow = ObjectExtensions.<PluginProjectFactory>operator_doubleArrow(_pluginProjectFactory, _function);
    generator.generate(_doubleArrow);
  }
}

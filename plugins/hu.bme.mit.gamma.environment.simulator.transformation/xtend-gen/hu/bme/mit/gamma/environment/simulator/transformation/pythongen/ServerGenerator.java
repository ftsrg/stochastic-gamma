package hu.bme.mit.gamma.environment.simulator.transformation.pythongen;

import hu.bme.mit.gamma.environment.analysis.AnalysisComponent;
import hu.bme.mit.gamma.environment.model.utils.EnvironmentModelDerivedFeatures;
import hu.bme.mit.gamma.statechart.composite.AsynchronousAdapter;
import hu.bme.mit.gamma.statechart.composite.ComponentInstance;
import hu.bme.mit.gamma.statechart.composite.CompositeComponent;
import hu.bme.mit.gamma.statechart.derivedfeatures.StatechartModelDerivedFeatures;
import hu.bme.mit.gamma.statechart.interface_.Component;
import hu.bme.mit.gamma.statechart.statechart.AsynchronousStatechartDefinition;
import hu.bme.mit.gamma.statechart.statechart.StatechartDefinition;
import java.util.LinkedList;
import java.util.List;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.xbase.lib.StringExtensions;

@SuppressWarnings("all")
public class ServerGenerator {
  public Object generateDiagramNames(final ComponentInstance instance, final String namespace, final List<String> diagramNames) {
    Object _xblockexpression = null;
    {
      Component component = EnvironmentModelDerivedFeatures.getDerivedType(instance);
      StringConcatenation _builder = new StringConcatenation();
      _builder.append(namespace);
      _builder.append("::");
      String _firstUpper = StringExtensions.toFirstUpper(instance.getName());
      _builder.append(_firstUpper);
      String namespace2 = _builder.toString();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("\"");
      _builder_1.append(namespace2);
      _builder_1.append("\" : \"");
      String _name = component.getName();
      _builder_1.append(_name);
      _builder_1.append("\"");
      diagramNames.add(_builder_1.toString());
      Object _xifexpression = null;
      if ((component instanceof AsynchronousStatechartDefinition)) {
        _xifexpression = null;
      } else {
        Object _xifexpression_1 = null;
        if ((component instanceof StatechartDefinition)) {
          _xifexpression_1 = null;
        } else {
          Object _xifexpression_2 = null;
          if ((component instanceof AsynchronousAdapter)) {
            _xifexpression_2 = this.generateDiagramNames(((AsynchronousAdapter)component).getWrappedComponent(), namespace2, diagramNames);
          } else {
            if ((component instanceof CompositeComponent)) {
              List<? extends ComponentInstance> _derivedComponents = StatechartModelDerivedFeatures.getDerivedComponents(((CompositeComponent)component));
              for (final ComponentInstance inst : _derivedComponents) {
                this.generateDiagramNames(inst, namespace2, diagramNames);
              }
            }
          }
          _xifexpression_1 = _xifexpression_2;
        }
        _xifexpression = _xifexpression_1;
      }
      _xblockexpression = _xifexpression;
    }
    return _xblockexpression;
  }

  public String generate(final AnalysisComponent analysisComponent) {
    final LinkedList<String> diagramNames = new LinkedList<String>();
    this.generateDiagramNames(analysisComponent.getAnalyzedComponent(), analysisComponent.getName(), diagramNames);
    StringConcatenation _builder = new StringConcatenation();
    _builder.newLine();
    _builder.append("from simulator import *");
    _builder.newLine();
    _builder.append("# Python 3 server for visualizing the simulator");
    _builder.newLine();
    _builder.append("from http.server import BaseHTTPRequestHandler, HTTPServer");
    _builder.newLine();
    _builder.append("import time");
    _builder.newLine();
    _builder.append("import re");
    _builder.newLine();
    _builder.append("from pathlib import Path");
    _builder.newLine();
    _builder.append("import yaml");
    _builder.newLine();
    _builder.append("from yaml import Loader, Dumper");
    _builder.newLine();
    _builder.newLine();
    _builder.append("with open(\"config.yml\", \"r\") as ymlfile:");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("config = yaml.load(ymlfile, Loader=Loader)");
    _builder.newLine();
    _builder.newLine();
    _builder.append("with open(\"config_sct.yml\", \"r\") as ymlfile:");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("config_sct = yaml.load(ymlfile, Loader=Loader)");
    _builder.newLine();
    _builder.newLine();
    _builder.append("hostName = \"localhost\"");
    _builder.newLine();
    _builder.append("serverPort = 8080");
    _builder.newLine();
    _builder.newLine();
    _builder.append("diagrams = [\"system_context_diagram.svg\",\"trq_calc.svg\",\"tsu_diag.svg\"]");
    _builder.newLine();
    _builder.append("diagram_cmd_dict = dict()");
    _builder.newLine();
    _builder.append("diagram_name_dict = dict()");
    _builder.newLine();
    _builder.append("diagram_url_dict = dict()");
    _builder.newLine();
    _builder.append("diagram_svg_dict = dict()");
    _builder.newLine();
    _builder.newLine();
    _builder.append("sim_stoch_events=dict()");
    _builder.newLine();
    _builder.newLine();
    _builder.append("diagram_name_dict = {");
    _builder.newLine();
    {
      for(final String diagramName : diagramNames) {
        _builder.append("\t");
        _builder.append(diagramName, "\t");
        _builder.append(",");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.append("for diagram in diagram_name_dict.keys():");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("cmd=\"Diagram-\"+diagram.replace(\"::\", \"__\")");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("name=diagram_name_dict[diagram]");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("diagram_cmd_dict.update({diagram : cmd})");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("diagram_name_dict.update({diagram : name})");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("diagram_url_dict.update({cmd : diagram})");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("svg = \"\"");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("#svg = Path(name+\".svg\",encoding=\'utf-8\', errors=\'space_it\').read_text()");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("with open(name+\".svg\",encoding=\'UTF-8\', errors=\'space_it\') as f:");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("svg =  f.read()");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("svg=svg.replace(\"Â\",\"\").replace(\"Ă\",\"\").replace(\"Â\",\"\")");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("diagram_svg_dict.update({cmd : svg})");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.append("svg=\"\"");
    _builder.newLine();
    _builder.newLine();
    _builder.append("url=diagrams[0]");
    _builder.newLine();
    _builder.newLine();
    _builder.append("failure_names=[]");
    _builder.newLine();
    _builder.append("failure_dict=dict()");
    _builder.newLine();
    _builder.append("for component in stochmodel.components.keys():");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("comp=stochmodel.components[component]");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("if (isinstance(comp, EventSource)):");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("ports=list(comp.calls.keys())");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("#iterating through ports");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("for port in ports:");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("pevents=comp.portevents[port]");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("#iterating through events");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("for pevent in pevents:");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("name=\"Failure\"+(component+\".\"+port+\".\"+pevent).replace(\"()\",\".\").replace(\"..\",\".\")");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("call=comp.calls[port][pevent]");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("failure_names.append(name)");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("failure_dict.update({name:call})");
    _builder.newLine();
    _builder.newLine();
    _builder.append("pfailure_names=[]");
    _builder.newLine();
    _builder.append("pfailure_dict=dict()");
    _builder.newLine();
    _builder.append("for component in stochmodel.components.keys():");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("comp=stochmodel.components[component]");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("if (isinstance(comp, PeriodicEventSource)):");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("ports=list(comp.calls.keys())");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("#iterating through ports");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("for port in ports:");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("pevents=comp.portevents[port]");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("#iterating through events");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("for pevent in pevents:");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("name=\"PFailure\"+(component+\".\"+port+\".\"+pevent).replace(\"()\",\".\").replace(\"..\",\".\")");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("call=comp.calls[port][pevent]");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("pfailure_names.append(name)");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("pfailure_dict.update({name:call})");
    _builder.newLine();
    _builder.newLine();
    _builder.append("detmodel.reset()");
    _builder.newLine();
    _builder.append("detmodel.getDetModel().schedule()");
    _builder.newLine();
    _builder.newLine();
    _builder.append("stochmodel.generateEvents()");
    _builder.newLine();
    _builder.append("stochmodel.events.clear()");
    _builder.newLine();
    _builder.newLine();
    _builder.append("cmd=\"\"");
    _builder.newLine();
    _builder.newLine();
    _builder.append("class MyServer(BaseHTTPRequestHandler):");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("def send_page(self):");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("global url, svg, cmd");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("command=\"\"");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("print(self.requestline)");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if \"Reset\" in self.requestline:");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("detmodel.reset()");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("detmodel.getDetModel().schedule()");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("print(\"Reset!\")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("elif \"PFailure\" in self.requestline:");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("command=self.requestline.replace(\"GET /?pfname=\", \"\").replace(\" HTTP/1.1\", \"\")");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("print(\"Raise event \",command,\"!\")");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("stochmodel.time=stochmodel.time+1.0");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("failure_calls=pfailure_dict[command]");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("for failure_call in failure_calls:");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("failure_call()");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("detmodel.getDetModel().schedule()");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("while len(stochmodel.events)>0:");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("event = stochmodel.popEvent()");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("sim_stoch_events[event.eventSource.name.replace(\"()\",\"_\").replace(\".\",\"\")]=event");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("# evaluate end condition");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("print(\"Event raised successfully!\")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("elif \"Failure\" in self.requestline:");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("command=self.requestline.replace(\"GET /?fname=\", \"\").replace(\" HTTP/1.1\", \"\")");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("print(\"Raise event \",command,\"!\")");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("stochmodel.time=stochmodel.time+1.0");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("failure_calls=failure_dict[command]");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("for failure_call in failure_calls:");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("failure_call()");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("detmodel.getDetModel().schedule()");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("while len(stochmodel.events)>0:");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("event = stochmodel.popEvent()");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("sim_stoch_events[event.eventSource.name.replace(\"()\",\"_\").replace(\".\",\"\")]=event");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("# evaluate end condition");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("print(\"Event raised successfully!\")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("elif \"StochEvent\" in self.requestline:");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("eventkey=self.requestline.replace(\"GET /?stname=\", \"\").replace(\" HTTP/1.1\", \"\").replace(\"StochEvent-\",\"\")");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("event=sim_stoch_events[eventkey]");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("stochmodel.time = event.eventTime");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("print(event.eventSource.name + \' at time: \' + str(stochmodel.time))");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("event.eventCall()");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("detmodel.getDetModel().schedule()");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("sim_stoch_events.pop(eventkey,None)");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("elif \"Diagram\" in self.requestline:");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("command=self.requestline.replace(\"GET /?dname=\", \"\").replace(\" HTTP/1.1\", \"\")");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("#url=diagram_url_dict[command]");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("svg=diagram_svg_dict[command]");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("cmd=command.replace(\"Diagram-\",\"\")");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("print(\"Diagram change: \", command)");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("# Using readlines()");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("count = 0");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("self.send_response(200)");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("self.send_header(\"Content-type\", \"text/html\")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("self.end_headers()");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("self.wfile.write(bytes(\'<html><head><title>Gamma Simulator</title><meta charset=\"utf-8\"></head>\', \"utf-8\"))");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("#self.wfile.write(bytes(\"\"\"<meta http-equiv=\"refresh\" content=\"0.5\" />\"\"\", \"utf-8\"))");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("self.wfile.write(bytes(\"<body>\", \"utf-8\"))");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("# Strips the newline character");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("self.wfile.write(bytes(\"\"\"<form action=\"http://localhost:8080/\">\"\"\", \"utf-8\"))");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("self.wfile.write(bytes(\"\"\"<label for=\"dname\">Choose diagram:</label><br>\t\"\"\", \"utf-8\"))");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("self.wfile.write(bytes(\"\"\"<select name=\"dname\" id=\"dname\">\"\"\", \"utf-8\"))");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("for diagram in diagram_name_dict.keys():");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("self.wfile.write(bytes(\"\"\"<option value=\'\"\"\"+\"Diagram-\"+diagram.replace(\"::\",\"__\")+\"\"\"\'> \"\"\"+diagram+\"\"\" </option>\"\"\", \"utf-8\"))");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("self.wfile.write(bytes(\"\"\"</select>\"\"\", \"utf-8\"))");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("self.wfile.write(bytes(\"\"\"<input type=\"submit\" value=\"Choose\">\"\"\", \"utf-8\"))");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("self.wfile.write(bytes(\"\"\"</form>\"\"\", \"utf-8\"))");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("self.wfile.write(bytes(\"\"\"<form action=\"http://localhost:8080/\">\"\"\", \"utf-8\"))");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("self.wfile.write(bytes(\"\"\"<label for=\"fname\">Events of Stochastic Source Components:</label><br>\t\"\"\", \"utf-8\"))");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("self.wfile.write(bytes(\"\"\"<select name=\"fname\" id=\"fname\">\"\"\", \"utf-8\"))");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("self.wfile.write(bytes(\"\"\"<option value=\'no failure\'> no event </option>\"\"\", \"utf-8\"))");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("for failure in failure_names:\t");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("self.wfile.write(bytes(\"\"\"<option value=\'\"\"\"+failure+\"\"\"\'>\"\"\"+failure+\"\"\"</option>\"\"\", \"utf-8\"))");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("self.wfile.write(bytes(\"\"\"</select>\"\"\", \"utf-8\"))");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("self.wfile.write(bytes(\"\"\"<input type=\"submit\" value=\"Insert event!\">\"\"\", \"utf-8\"))");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("self.wfile.write(bytes(\"\"\"</form>\"\"\", \"utf-8\"))");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("self.wfile.write(bytes(\"\"\"<form action=\"http://localhost:8080/\">\"\"\", \"utf-8\"))");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("self.wfile.write(bytes(\"\"\"<label for=\"pfname\">Events of Stochastic Periodic Source Components:</label><br>\t\"\"\", \"utf-8\"))");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("self.wfile.write(bytes(\"\"\"<select name=\"pfname\" id=\"pfname\">\"\"\", \"utf-8\"))");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("self.wfile.write(bytes(\"\"\"<option value=\'no failure\'> no event </option>\"\"\", \"utf-8\"))");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("for failure in pfailure_names:\t");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("self.wfile.write(bytes(\"\"\"<option value=\'\"\"\"+failure+\"\"\"\'>\"\"\"+failure+\"\"\"</option>\"\"\", \"utf-8\"))");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("self.wfile.write(bytes(\"\"\"</select>\"\"\", \"utf-8\"))");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("self.wfile.write(bytes(\"\"\"<input type=\"submit\" value=\"Insert event!\">\"\"\", \"utf-8\"))");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("self.wfile.write(bytes(\"\"\"</form>\"\"\", \"utf-8\"))");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("self.wfile.write(bytes(\"\"\"<form action=\"http://localhost:8080/\">\"\"\", \"utf-8\"))");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("self.wfile.write(bytes(\"\"\"<label for=\"stname\">Events of Stochastic Delay Components:</label><br>\t\"\"\", \"utf-8\"))");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("self.wfile.write(bytes(\"\"\"<select name=\"stname\" id=\"stname\">\"\"\", \"utf-8\"))");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("self.wfile.write(bytes(\"\"\"<option value=\'no failure\'> no event </option>\"\"\", \"utf-8\"))");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("for stoch_event in sim_stoch_events.keys():\t");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("self.wfile.write(bytes(\"\"\"<option value=\'\"\"\"+\"StochEvent-\"+stoch_event+\"\"\"\'>\"\"\"+stoch_event+\"\"\"</option>\"\"\", \"utf-8\"))");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("self.wfile.write(bytes(\"\"\"</select>\"\"\", \"utf-8\"))");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("self.wfile.write(bytes(\"\"\"<input type=\"submit\" value=\"Insert event!\">\"\"\", \"utf-8\"))");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("self.wfile.write(bytes(\"\"\"</form>\"\"\", \"utf-8\"))");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("self.wfile.write(bytes(\"\"\"<form action=\"http://localhost:8080/ResetDetModel\">\"\"\", \"utf-8\"))");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("self.wfile.write(bytes(\"\"\"<input type=\"submit\" value=\"Reset\">\"\"\", \"utf-8\"))");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("self.wfile.write(bytes(\"\"\"</form>\"\"\", \"utf-8\"))");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("state_lines=list()");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("diagram_svg=svg");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("diagram_svg=diagram_svg.replace(\'lengthAdjust=\"spacing\"\',\'\')");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if cmd not in config.keys() and cmd!=\"\":");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("print(\"Eval : \",\"detmodel.get\"+cmd.replace(\"");
    String _name = analysisComponent.getName();
    _builder.append(_name, "\t\t\t");
    _builder.append("__\",\"\").replace(\"__\",\"().get\")+\"().toString()\")");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t");
    _builder.append("value=str(eval(\"detmodel.get\"+cmd.replace(\"");
    String _name_1 = analysisComponent.getName();
    _builder.append(_name_1, "\t\t\t");
    _builder.append("__\",\"\").replace(\"__\",\"().get\")+\"().toString()\"))");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("value2=value");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("value2=value2.replace(\"_\",\"::\")");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("value2=value2.replace(\"\\n\",\";<br> \")");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("value2=value2.replace(\"\\r\",\"\")");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("state_lines.append(\"<h3> Variables of \"+cmd.replace(\"__\",\"::\")+\"</h3> <p>\"+value2+\"\\n</p>\")");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("value=value.replace(\"\\n\",\"|\")");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("value=value.replace(\"\\r\",\"\")");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("value=value.replace(\" \",\"\")");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("values=value.split(\"|\")");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("for pair in values:");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("vars=pair.split(\'=\')");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("var_name=vars[0]");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("var_value=vars[1]");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("if var_name in config_sct[diagram_name_dict[cmd.replace(\"__\",\"::\")]]:");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("diagram_svg=diagram_svg.replace(\">\"+var_value,\'font-weight=\"bold\" text-decoration = \"underline\">\'+var_value)");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("elif cmd!=\'\':");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("for option in config[cmd].keys():");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("if option != \"dummy\":");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("value=\"\"");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("param=\"\"");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("if \"__STATECHART__\" in config[cmd][option]:");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("print(\"Eval : \", \"detmodel.get\"+cmd.replace(\"");
    String _name_2 = analysisComponent.getName();
    _builder.append(_name_2, "\t\t\t\t\t\t");
    _builder.append("__\",\"\").replace(\"__\",\"().get\")+\"().get\"+config[cmd][option].replace(\"__STATECHART__\",\"\")+\"().toString()\")");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("value=str(eval(\"detmodel.get\"+cmd.replace(\"");
    String _name_3 = analysisComponent.getName();
    _builder.append(_name_3, "\t\t\t\t\t\t");
    _builder.append("__\",\"\").replace(\"__\",\"().get\")+\"().get\"+config[cmd][option].replace(\"__STATECHART__\",\"\")+\"().toString()\"))");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("value=value.replace(\"_\",\"::\")");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("value=value.replace(\"\\n\",\";<br> \")");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("value=value.replace(\"\\r\",\"\")");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("state_lines.append(\"<h3>\"+option+\":</h3> <p>\"+value+\"\\n</p>\")");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("else:");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("param=option.split(\"_\")[-1].replace(\'$\',\'\')");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("print(\"Eval : \",\"detmodel.get\"+cmd.replace(\"");
    String _name_4 = analysisComponent.getName();
    _builder.append(_name_4, "\t\t\t\t\t\t");
    _builder.append("__\",\"\").replace(\"__\",\"().get\")+\"().get\"+config[cmd][option].replace(\"::\",\"().get\")+\"()\")");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("value=str(eval(\"detmodel.get\"+cmd.replace(\"");
    String _name_5 = analysisComponent.getName();
    _builder.append(_name_5, "\t\t\t\t\t\t");
    _builder.append("__\",\"\").replace(\"__\",\"().get\")+\"().get\"+config[cmd][option].replace(\"::\",\"().get\")+\"()\"))");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("s=\"\"");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("if len(value)+len(param)<len(option):");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("for i in range(len(option)-len(value)-len(param)):");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t");
    _builder.append("s=s+\".\"");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("diagram_svg=diagram_svg.replace(option,param+s+value)");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("self.wfile.write(bytes(diagram_svg, \"utf-8\"))");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("for line in state_lines:");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("self.wfile.write(bytes(line, \"utf-8\"))");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("self.wfile.write(bytes(\"</body></html>\", \"utf-8\"))");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("def do_GET(self):");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("self.send_page()");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("def do_POST(self):");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("#Reads post request body");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("print(\"Post: \")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("self._set_headers()");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("content_len = int(self.headers.getheader(\'content-length\', 0))");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("post_body = self.rfile.read(content_len)");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("self.send_page()");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("print((\"received post request:<br>{}\".format(post_body)))");
    _builder.newLine();
    _builder.newLine();
    _builder.append("if __name__ == \"__main__\":\t\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("webServer = HTTPServer((hostName, serverPort), MyServer)");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("print(\"Server started http://%s:%s\" % (hostName, serverPort))");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("try:");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("webServer.serve_forever()");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("except KeyboardInterrupt:");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("pass");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("webServer.server_close()");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("print(\"Server stopped.\")");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    return _builder.toString();
  }
}
